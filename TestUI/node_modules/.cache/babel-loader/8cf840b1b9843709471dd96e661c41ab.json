{"ast":null,"code":"module.exports = function (e) {\n  var t = {};\n\n  function n(r) {\n    if (t[r]) return t[r].exports;\n    var i = t[r] = {\n      i: r,\n      l: !1,\n      exports: {}\n    };\n    return e[r].call(i.exports, i, i.exports, n), i.l = !0, i.exports;\n  }\n\n  return n.m = e, n.c = t, n.d = function (e, t, r) {\n    n.o(e, t) || Object.defineProperty(e, t, {\n      enumerable: !0,\n      get: r\n    });\n  }, n.r = function (e) {\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n      value: \"Module\"\n    }), Object.defineProperty(e, \"__esModule\", {\n      value: !0\n    });\n  }, n.t = function (e, t) {\n    if (1 & t && (e = n(e)), 8 & t) return e;\n    if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;\n    var r = Object.create(null);\n    if (n.r(r), Object.defineProperty(r, \"default\", {\n      enumerable: !0,\n      value: e\n    }), 2 & t && \"string\" != typeof e) for (var i in e) {\n      n.d(r, i, function (t) {\n        return e[t];\n      }.bind(null, i));\n    }\n    return r;\n  }, n.n = function (e) {\n    var t = e && e.__esModule ? function () {\n      return e.default;\n    } : function () {\n      return e;\n    };\n    return n.d(t, \"a\", t), t;\n  }, n.o = function (e, t) {\n    return Object.prototype.hasOwnProperty.call(e, t);\n  }, n.p = \"\", n(n.s = 22);\n}([function (e, t) {\n  e.exports = require(\"@babel/runtime/regenerator\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/classCallCheck\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/createClass\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/defineProperty\");\n}, function (e, t) {\n  e.exports = require(\"injectpromise\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/toConsumableArray\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/slicedToArray\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/typeof\");\n}, function (e, t) {\n  e.exports = require(\"bignumber.js\");\n}, function (e, t) {\n  e.exports = require(\"ethers\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");\n}, function (e, t) {\n  e.exports = require(\"semver\");\n}, function (e, t) {\n  e.exports = require(\"elliptic\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");\n}, function (e, t) {\n  e.exports = require(\"@babel/runtime/helpers/inherits\");\n}, function (e, t) {\n  e.exports = require(\"axios\");\n}, function (e, t) {\n  e.exports = require(\"validator\");\n}, function (e, t) {\n  e.exports = require(\"eventemitter3\");\n}, function (e) {\n  e.exports = JSON.parse('{\"a\":\"2.10.1\"}');\n}, function (e, t) {\n  e.exports = require(\"querystring\");\n}, function (e, t, n) {\n  \"use strict\";\n\n  n.r(t);\n  var r = {};\n  n.r(r), n.d(r, \"byte2hexStr\", function () {\n    return F;\n  }), n.d(r, \"bytesToString\", function () {\n    return C;\n  }), n.d(r, \"hextoString\", function () {\n    return E;\n  }), n.d(r, \"byteArray2hexStr\", function () {\n    return O;\n  }), n.d(r, \"base64DecodeFromString\", function () {\n    return q;\n  }), n.d(r, \"base64EncodeToString\", function () {\n    return D;\n  });\n  var i = {};\n  n.r(i), n.d(i, \"bin2String\", function () {\n    return z;\n  }), n.d(i, \"arrayEquals\", function () {\n    return M;\n  }), n.d(i, \"stringToBytes\", function () {\n    return J;\n  }), n.d(i, \"byte2hexStr\", function () {\n    return F;\n  }), n.d(i, \"bytesToString\", function () {\n    return C;\n  }), n.d(i, \"hextoString\", function () {\n    return E;\n  }), n.d(i, \"byteArray2hexStr\", function () {\n    return O;\n  }), n.d(i, \"base64DecodeFromString\", function () {\n    return q;\n  }), n.d(i, \"base64EncodeToString\", function () {\n    return D;\n  }), n.d(i, \"hexChar2byte\", function () {\n    return G;\n  }), n.d(i, \"isHexChar\", function () {\n    return Y;\n  }), n.d(i, \"hexStr2byteArray\", function () {\n    return X;\n  }), n.d(i, \"strToDate\", function () {\n    return Z;\n  }), n.d(i, \"isNumber\", function () {\n    return $;\n  }), n.d(i, \"getStringType\", function () {\n    return Q;\n  });\n  var s = {};\n  n.r(s), n.d(s, \"encode58\", function () {\n    return ie;\n  }), n.d(s, \"decode58\", function () {\n    return se;\n  });\n  var o = {};\n  n.r(o), n.d(o, \"keccak256\", function () {\n    return ue;\n  }), n.d(o, \"sha256\", function () {\n    return ce;\n  }), n.d(o, \"toUtf8Bytes\", function () {\n    return de;\n  }), n.d(o, \"recoverAddress\", function () {\n    return le;\n  }), n.d(o, \"SigningKey\", function () {\n    return he;\n  }), n.d(o, \"AbiCoder\", function () {\n    return fe;\n  });\n  var a = {};\n  n.r(a), n.d(a, \"getBase58CheckAddress\", function () {\n    return ve;\n  }), n.d(a, \"decodeBase58Address\", function () {\n    return pe;\n  }), n.d(a, \"signTransaction\", function () {\n    return ge;\n  }), n.d(a, \"arrayToBase64String\", function () {\n    return be;\n  }), n.d(a, \"signBytes\", function () {\n    return me;\n  }), n.d(a, \"getRowBytesFromTransactionBase64\", function () {\n    return ye;\n  }), n.d(a, \"genPriKey\", function () {\n    return ke;\n  }), n.d(a, \"computeAddress\", function () {\n    return xe;\n  }), n.d(a, \"getAddressFromPriKey\", function () {\n    return we;\n  }), n.d(a, \"decode58Check\", function () {\n    return Ie;\n  }), n.d(a, \"isAddressValid\", function () {\n    return We;\n  }), n.d(a, \"getBase58CheckAddressFromPriKeyBase64String\", function () {\n    return Ae;\n  }), n.d(a, \"getHexStrAddressFromPriKeyBase64String\", function () {\n    return Pe;\n  }), n.d(a, \"getAddressFromPriKeyBase64String\", function () {\n    return _e;\n  }), n.d(a, \"getPubKeyFromPriKey\", function () {\n    return Ne;\n  }), n.d(a, \"ECKeySign\", function () {\n    return Se;\n  }), n.d(a, \"SHA256\", function () {\n    return je;\n  }), n.d(a, \"passwordToAddress\", function () {\n    return Te;\n  }), n.d(a, \"pkToAddress\", function () {\n    return Be;\n  });\n  var u = {};\n  n.r(u), n.d(u, \"generateAccount\", function () {\n    return Fe;\n  });\n  var c = {};\n  n.r(c), n.d(c, \"decodeParams\", function () {\n    return Ee;\n  }), n.d(c, \"encodeParams\", function () {\n    return Oe;\n  });\n\n  var d = n(0),\n      l = n.n(d),\n      h = n(1),\n      f = n.n(h),\n      v = n(8),\n      p = n.n(v),\n      g = n(2),\n      b = n.n(g),\n      m = n(3),\n      y = n.n(m),\n      k = n(14),\n      x = n.n(k),\n      w = n(15),\n      I = n.n(w),\n      W = n(11),\n      A = n.n(W),\n      P = n(16),\n      _ = n.n(P),\n      N = n(4),\n      S = n.n(N),\n      j = n(17),\n      T = n.n(j);\n\n  function B() {\n    var e = this;\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", this.encode = function (t) {\n      for (var n, r, i, s, o, a, u, c = \"\", d = 0; d < t.length;) {\n        s = (n = t.charCodeAt(d++)) >> 2, o = (3 & n) << 4 | (r = t.charCodeAt(d++)) >> 4, a = (15 & r) << 2 | (i = t.charCodeAt(d++)) >> 6, u = 63 & i, isNaN(r) ? a = u = 64 : isNaN(i) && (u = 64), c = c + e._keyStr.charAt(s) + e._keyStr.charAt(o) + e._keyStr.charAt(a) + e._keyStr.charAt(u);\n      }\n\n      return c;\n    }, this.encodeIgnoreUtf8 = function (t) {\n      for (var n, r, i, s, o, a, u, c = \"\", d = 0; d < t.length;) {\n        s = (n = t[d++]) >> 2, o = (3 & n) << 4 | (r = t[d++]) >> 4, a = (15 & r) << 2 | (i = t[d++]) >> 6, u = 63 & i, isNaN(r) ? a = u = 64 : isNaN(i) && (u = 64), c = c + e._keyStr.charAt(s) + e._keyStr.charAt(o) + e._keyStr.charAt(a) + e._keyStr.charAt(u);\n      }\n\n      return c;\n    }, this.decode = function (t) {\n      var n,\n          r,\n          i,\n          s,\n          o,\n          a,\n          u = \"\",\n          c = 0;\n\n      for (t = t.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\"); c < t.length;) {\n        n = e._keyStr.indexOf(t.charAt(c++)) << 2 | (s = e._keyStr.indexOf(t.charAt(c++))) >> 4, r = (15 & s) << 4 | (o = e._keyStr.indexOf(t.charAt(c++))) >> 2, i = (3 & o) << 6 | (a = e._keyStr.indexOf(t.charAt(c++))), u += String.fromCharCode(n), 64 != o && (u += String.fromCharCode(r)), 64 != a && (u += String.fromCharCode(i));\n      }\n\n      return e._utf8_decode(u);\n    }, this.decodeToByteArray = function (t) {\n      var n,\n          r,\n          i,\n          s,\n          o,\n          a,\n          u = \"\",\n          c = 0;\n\n      for (t = t.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\"); c < t.length;) {\n        n = e._keyStr.indexOf(t.charAt(c++)) << 2 | (s = e._keyStr.indexOf(t.charAt(c++))) >> 4, r = (15 & s) << 4 | (o = e._keyStr.indexOf(t.charAt(c++))) >> 2, i = (3 & o) << 6 | (a = e._keyStr.indexOf(t.charAt(c++))), u += String.fromCharCode(n), 64 != o && (u += String.fromCharCode(r)), 64 != a && (u += String.fromCharCode(i));\n      }\n\n      return e._out2ByteArray(u);\n    }, this._out2ByteArray = function (e) {\n      for (var t = new Array(e.length), n = 0, r = 0; n < e.length;) {\n        r = e.charCodeAt(n), t[n] = r, n++;\n      }\n\n      return t;\n    }, this._utf8_encode = function (e) {\n      e = e.replace(/\\r\\n/g, \"\\n\");\n\n      for (var t = \"\", n = 0; n < e.length; n++) {\n        var r = e.charCodeAt(n);\n        r < 128 ? t += String.fromCharCode(r) : r > 127 && r < 2048 ? (t += String.fromCharCode(r >> 6 | 192), t += String.fromCharCode(63 & r | 128)) : (t += String.fromCharCode(r >> 12 | 224), t += String.fromCharCode(r >> 6 & 63 | 128), t += String.fromCharCode(63 & r | 128));\n      }\n\n      return t;\n    }, this._utf8_decode = function (e) {\n      for (var t = \"\", n = 0, r = 0, i = 0, s = 0; n < e.length;) {\n        (r = e.charCodeAt(n)) < 128 ? (t += String.fromCharCode(r), n++) : r > 191 && r < 224 ? (i = e.charCodeAt(n + 1), t += String.fromCharCode((31 & r) << 6 | 63 & i), n += 2) : (i = e.charCodeAt(n + 1), s = e.charCodeAt(n + 2), t += String.fromCharCode((15 & r) << 12 | (63 & i) << 6 | 63 & s), n += 3);\n      }\n\n      return t;\n    };\n  }\n\n  function F(e) {\n    if (\"number\" != typeof e) throw new Error(\"Input must be a number\");\n    if (e < 0 || e > 255) throw new Error(\"Input must be a byte\");\n    var t = \"\";\n    return t += \"0123456789ABCDEF\".charAt(e >> 4), t += \"0123456789ABCDEF\".charAt(15 & e);\n  }\n\n  function C(e) {\n    if (\"string\" == typeof e) return e;\n\n    for (var t = \"\", n = 0; n < e.length; n++) {\n      var r = e[n].toString(2),\n          i = r.match(/^1+?(?=0)/);\n\n      if (i && 8 === r.length) {\n        for (var s = i[0].length, o = e[n].toString(2).slice(7 - s), a = 1; a < s; a++) {\n          o += e[a + n].toString(2).slice(2);\n        }\n\n        t += String.fromCharCode(parseInt(o, 2)), n += s - 1;\n      } else t += String.fromCharCode(e[n]);\n    }\n\n    return t;\n  }\n\n  function E(e) {\n    for (var t = e.replace(/^0x/, \"\").split(\"\"), n = \"\", r = 0; r < t.length / 2; r++) {\n      var i = \"0x\".concat(t[2 * r]).concat(t[2 * r + 1]);\n      n += String.fromCharCode(i);\n    }\n\n    return n;\n  }\n\n  function O(e) {\n    for (var t = \"\", n = 0; n < e.length; n++) {\n      t += F(e[n]);\n    }\n\n    return t;\n  }\n\n  function q(e) {\n    return new B().decodeToByteArray(e);\n  }\n\n  function D(e) {\n    return new B().encodeIgnoreUtf8(e);\n  }\n\n  var K = n(6),\n      R = n.n(K),\n      H = 34,\n      U = \"41\",\n      V = 65,\n      L = /^(41)/;\n\n  function z(e) {\n    return C(e);\n  }\n\n  function M(e, t, n) {\n    if (e.length != t.length) return !1;\n    var r;\n\n    for (r = 0; r < e.length; r++) {\n      if (n) {\n        if (e[r] != t[r]) return !1;\n      } else if (JSON.stringify(e[r]) != JSON.stringify(t[r])) return !1;\n    }\n\n    return !0;\n  }\n\n  function J(e) {\n    if (\"string\" != typeof e) throw new Error(\"The passed string is not a string\");\n    var t,\n        n,\n        r = new Array();\n    t = e.length;\n\n    for (var i = 0; i < t; i++) {\n      (n = e.charCodeAt(i)) >= 65536 && n <= 1114111 ? (r.push(n >> 18 & 7 | 240), r.push(n >> 12 & 63 | 128), r.push(n >> 6 & 63 | 128), r.push(63 & n | 128)) : n >= 2048 && n <= 65535 ? (r.push(n >> 12 & 15 | 224), r.push(n >> 6 & 63 | 128), r.push(63 & n | 128)) : n >= 128 && n <= 2047 ? (r.push(n >> 6 & 31 | 192), r.push(63 & n | 128)) : r.push(255 & n);\n    }\n\n    return r;\n  }\n\n  function G(e) {\n    var t;\n    if (e >= \"A\" && e <= \"F\" ? t = e.charCodeAt(0) - \"A\".charCodeAt(0) + 10 : e >= \"a\" && e <= \"f\" ? t = e.charCodeAt(0) - \"a\".charCodeAt(0) + 10 : e >= \"0\" && e <= \"9\" && (t = e.charCodeAt(0) - \"0\".charCodeAt(0)), \"number\" == typeof t) return t;\n    throw new Error(\"The passed hex char is not a valid hex char\");\n  }\n\n  function Y(e) {\n    return e >= \"A\" && e <= \"F\" || e >= \"a\" && e <= \"f\" || e >= \"0\" && e <= \"9\" ? 1 : 0;\n  }\n\n  function X(e) {\n    if (\"string\" != typeof e) throw new Error(\"The passed string is not a string\");\n\n    for (var t = Array(), n = 0, r = 0, i = 0, s = 0; s < e.length; s++) {\n      var o = e.charAt(s);\n      if (!Y(o)) throw new Error(\"The passed hex char is not a valid hex string\");\n      n <<= 4, n += G(o), 0 == ++r % 2 && (t[i++] = n, n = 0);\n    }\n\n    return t;\n  }\n\n  function Z(e) {\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(e)) throw new Error(\"The passed date string is not valid\");\n    var t = e.split(\" \"),\n        n = t[0].split(\"-\"),\n        r = parseInt(n[0], 10),\n        i = parseInt(n[1], 10) - 1,\n        s = parseInt(n[2], 10);\n\n    if (t.length > 1) {\n      var o = t[1].split(\"-\"),\n          a = parseInt(o[0], 10),\n          u = parseInt(o[1], 10),\n          c = parseInt(o[2], 10);\n      return new Date(r, i, s, a, u, c);\n    }\n\n    return new Date(r, i, s);\n  }\n\n  function $(e) {\n    return e >= \"0\" && e <= \"9\" ? 1 : 0;\n  }\n\n  function Q(e) {\n    if (null == e) return -1;\n    if (\"string\" != typeof e) return -1;\n    if (0 == e.length || \"\" == e) return -1;\n    var t = 0;\n    if (40 == e.length) for (; t < 40; t++) {\n      if (!Y(e.charAt(t))) break;\n    }\n    if (40 == t) return 1;\n\n    for (t = 0; t < e.length; t++) {\n      if (!$(e.charAt(t))) break;\n    }\n\n    if (t == e.length) return 2;\n\n    for (t = 0; t < e.length; t++) {\n      if (e.charAt(t) > \" \") return 3;\n    }\n\n    return -1;\n  }\n\n  for (var ee = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\", te = {}, ne = 0; ne < ee.length; ne++) {\n    te[ee.charAt(ne)] = ne;\n  }\n\n  var re = 58;\n\n  function ie(e) {\n    if (0 === e.length) return \"\";\n    var t,\n        n,\n        r = [0];\n\n    for (t = 0; t < e.length; t++) {\n      for (n = 0; n < r.length; n++) {\n        r[n] <<= 8;\n      }\n\n      r[0] += e[t];\n      var i = 0;\n\n      for (n = 0; n < r.length; ++n) {\n        r[n] += i, i = r[n] / re | 0, r[n] %= re;\n      }\n\n      for (; i;) {\n        r.push(i % re), i = i / re | 0;\n      }\n    }\n\n    for (t = 0; 0 === e[t] && t < e.length - 1; t++) {\n      r.push(0);\n    }\n\n    return r.reverse().map(function (e) {\n      return ee[e];\n    }).join(\"\");\n  }\n\n  function se(e) {\n    if (0 === e.length) return [];\n    var t,\n        n,\n        r = [0];\n\n    for (t = 0; t < e.length; t++) {\n      var i = e[t];\n      if (!(i in te)) throw new Error(\"Non-base58 character\");\n\n      for (n = 0; n < r.length; n++) {\n        r[n] *= re;\n      }\n\n      r[0] += te[i];\n      var s = 0;\n\n      for (n = 0; n < r.length; ++n) {\n        r[n] += s, s = r[n] >> 8, r[n] &= 255;\n      }\n\n      for (; s;) {\n        r.push(255 & s), s >>= 8;\n      }\n    }\n\n    for (t = 0; \"1\" === e[t] && t < e.length - 1; t++) {\n      r.push(0);\n    }\n\n    return r.reverse();\n  }\n\n  var oe = n(13),\n      ae = n(10),\n      ue = ae.utils.keccak256,\n      ce = ae.utils.sha256,\n      de = ae.utils.toUtf8Bytes,\n      le = ae.utils.recoverAddress,\n      he = ae.utils.SigningKey,\n      fe = ae.utils.AbiCoder;\n\n  function ve(e) {\n    var t = je(e),\n        n = je(t).slice(0, 4);\n    return ie(n = e.concat(n));\n  }\n\n  function pe(e) {\n    if (\"string\" != typeof e) return !1;\n    if (e.length <= 4) return !1;\n    var t = se(e);\n    if (e.length <= 4) return !1;\n    var n = t.length - 4,\n        r = t.slice(n),\n        i = je(t = t.slice(0, n)),\n        s = je(i).slice(0, 4);\n    if (r[0] == s[0] && r[1] == s[1] && r[2] == s[2] && r[3] == s[3]) return t;\n    throw new Error(\"Invalid address provided\");\n  }\n\n  function ge(e, t) {\n    \"string\" == typeof e && (e = X(e));\n    var n = Se(X(t.txID), e);\n    return Array.isArray(t.signature) ? t.signature.includes(n) || t.signature.push(n) : t.signature = [n], t;\n  }\n\n  function be(e) {\n    return btoa(String.fromCharCode.apply(String, R()(e)));\n  }\n\n  function me(e, t) {\n    return \"string\" == typeof e && (e = X(e)), Se(je(t), e);\n  }\n\n  function ye(e) {\n    var t = q(e);\n    return proto.protocol.Transaction.deserializeBinary(t).getRawData().serializeBinary();\n  }\n\n  function ke() {\n    for (var e = new oe.ec(\"secp256k1\").genKeyPair().getPrivate().toString(\"hex\"); e.length < 64;) {\n      e = \"0\".concat(e);\n    }\n\n    return X(e);\n  }\n\n  function xe(e) {\n    65 === e.length && (e = e.slice(1));\n    var t = ue(e).toString().substring(2);\n    return X(U + t.substring(24));\n  }\n\n  function we(e) {\n    return xe(Ne(e));\n  }\n\n  function Ie(e) {\n    var t = se(e);\n    if (t.length <= 4) return !1;\n    var n = t.slice(0, t.length - 4),\n        r = je(n),\n        i = je(r);\n    return i[0] === t[n.length] && i[1] === t[n.length + 1] && i[2] === t[n.length + 2] && i[3] === t[n.length + 3] && n;\n  }\n\n  function We(e) {\n    if (\"string\" != typeof e) return !1;\n    if (e.length !== H) return !1;\n    var t = se(e);\n    if (25 !== t.length) return !1;\n    if (t[0] !== V) return !1;\n    var n = t.slice(21),\n        r = je(t = t.slice(0, 21)),\n        i = je(r).slice(0, 4);\n    return n[0] == i[0] && n[1] == i[1] && n[2] == i[2] && n[3] == i[3];\n  }\n\n  function Ae(e) {\n    return ve(xe(Ne(q(e))));\n  }\n\n  function Pe(e) {\n    return O(xe(Ne(q(e))));\n  }\n\n  function _e(e) {\n    return D(xe(Ne(q(e))));\n  }\n\n  function Ne(e) {\n    for (var t = new oe.ec(\"secp256k1\").keyFromPrivate(e, \"bytes\").getPublic(), n = t.x, r = t.y, i = n.toString(\"hex\"); i.length < 64;) {\n      i = \"0\".concat(i);\n    }\n\n    for (var s = r.toString(\"hex\"); s.length < 64;) {\n      s = \"0\".concat(s);\n    }\n\n    return X(\"04\".concat(i).concat(s));\n  }\n\n  function Se(e, t) {\n    for (var n = new oe.ec(\"secp256k1\").keyFromPrivate(t, \"bytes\").sign(e), r = n.r, i = n.s, s = n.recoveryParam, o = r.toString(\"hex\"); o.length < 64;) {\n      o = \"0\".concat(o);\n    }\n\n    for (var a = i.toString(\"hex\"); a.length < 64;) {\n      a = \"0\".concat(a);\n    }\n\n    return o + a + F(s);\n  }\n\n  function je(e) {\n    var t = O(e);\n    return X(ce(\"0x\" + t).replace(/^0x/, \"\"));\n  }\n\n  function Te(e) {\n    return ve(we(q(e)));\n  }\n\n  function Be(e) {\n    return ve(we(X(e)));\n  }\n\n  function Fe() {\n    var e = ke(),\n        t = Ne(e),\n        n = we(e);\n    return {\n      privateKey: O(e),\n      publicKey: O(t),\n      address: {\n        base58: ve(n),\n        hex: O(n)\n      }\n    };\n  }\n\n  var Ce = new fe();\n\n  function Ee(e, t, n, r) {\n    if (n && \"boolean\" != typeof n || (r = n, n = t, t = e, e = []), r && n.replace(/^0x/, \"\").length % 64 == 8 && (n = \"0x\" + n.replace(/^0x/, \"\").substring(8)), n.replace(/^0x/, \"\").length % 64) throw new Error(\"The encoded string is not valid. Its length must be a multiple of 64.\");\n    return t = t.map(function (e) {\n      return /trcToken/.test(e) && (e = e.replace(/trcToken/, \"uint256\")), e;\n    }), Ce.decode(t, n).reduce(function (n, r, i) {\n      return \"address\" == t[i] && (r = U + r.substr(2).toLowerCase()), e.length ? n[e[i]] = r : n.push(r), n;\n    }, e.length ? {} : []);\n  }\n\n  function Oe(e, t) {\n    for (var n = 0; n < e.length; n++) {\n      \"address\" === e[n] && (t[n] = It.address.toHex(t[n]).replace(L, \"0x\"));\n    }\n\n    return Ce.encode(e, t);\n  }\n\n  var qe = n(18),\n      De = n.n(qe),\n      Ke = n(9),\n      Re = n.n(Ke);\n\n  function He(e, t) {\n    var n = Object.keys(e);\n\n    if (Object.getOwnPropertySymbols) {\n      var r = Object.getOwnPropertySymbols(e);\n      t && (r = r.filter(function (t) {\n        return Object.getOwnPropertyDescriptor(e, t).enumerable;\n      })), n.push.apply(n, r);\n    }\n\n    return n;\n  }\n\n  var Ue,\n      Ve,\n      Le = function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = null != arguments[t] ? arguments[t] : {};\n      t % 2 ? He(n, !0).forEach(function (t) {\n        S()(e, t, n[t]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : He(n).forEach(function (t) {\n        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));\n      });\n    }\n\n    return e;\n  }({}, {\n    isValidURL: function isValidURL(e) {\n      return \"string\" == typeof e && De.a.isURL(e.toString(), {\n        protocols: [\"http\", \"https\"],\n        require_tld: !1\n      });\n    },\n    isObject: function isObject(e) {\n      return e === Object(e) && \"[object Array]\" !== Object.prototype.toString.call(e);\n    },\n    isArray: function isArray(e) {\n      return Array.isArray(e);\n    },\n    isJson: function isJson(e) {\n      try {\n        return !!JSON.parse(e);\n      } catch (e) {\n        return !1;\n      }\n    },\n    isBoolean: function isBoolean(e) {\n      return \"boolean\" == typeof e;\n    },\n    isBigNumber: function isBigNumber(e) {\n      return e && (e instanceof Re.a || e.constructor && \"BigNumber\" === e.constructor.name);\n    },\n    isString: function isString(e) {\n      return \"string\" == typeof e || e && e.constructor && \"String\" === e.constructor.name;\n    },\n    isFunction: function isFunction(e) {\n      return \"function\" == typeof e;\n    },\n    isHex: function isHex(e) {\n      return \"string\" == typeof e && !isNaN(parseInt(e, 16)) && /^(0x|)[a-fA-F0-9]+$/.test(e);\n    },\n    isInteger: function isInteger(e) {\n      return null !== e && Number.isInteger(Number(e));\n    },\n    hasProperty: function hasProperty(e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    },\n    hasProperties: function hasProperties(e) {\n      for (var t = this, n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++) {\n        r[i - 1] = arguments[i];\n      }\n\n      return r.length && !r.map(function (n) {\n        return t.hasProperty(e, n);\n      }).includes(!1);\n    },\n    mapEvent: function mapEvent(e) {\n      var t = {\n        block: e.block_number,\n        timestamp: e.block_timestamp,\n        contract: e.contract_address,\n        name: e.event_name,\n        transaction: e.transaction_id,\n        result: e.result,\n        resourceNode: e.resource_Node || (e._unconfirmed ? \"fullNode\" : \"solidityNode\")\n      };\n      return e._unconfirmed && (t.unconfirmed = e._unconfirmed), e._fingerprint && (t.fingerprint = e._fingerprint), t;\n    },\n    parseEvent: function parseEvent(e, t) {\n      var n = t.inputs;\n      if (!e.result) return e;\n      if (this.isObject(e.result)) for (var r = 0; r < n.length; r++) {\n        var i = n[r];\n        \"address\" == i.type && i.name in e.result && (e.result[i.name] = U + e.result[i.name].substr(2).toLowerCase());\n      } else this.isArray(e.result) && (e.result = e.result.reduce(function (e, t, r) {\n        var i = n[r],\n            s = i.name;\n        return \"address\" == i.type && (t = U + t.substr(2).toLowerCase()), e[s] = t, e;\n      }, {}));\n      return e;\n    },\n    padLeft: function padLeft(e, t, n) {\n      for (var r = e.toString(); r.length < n;) {\n        r = t + r;\n      }\n\n      return r;\n    },\n    isNotNullOrUndefined: function isNotNullOrUndefined(e) {\n      return null != e;\n    },\n    sleep: (Ue = f()(l.a.mark(function e() {\n      var t,\n          n = arguments;\n      return l.a.wrap(function (e) {\n        for (;;) {\n          switch (e.prev = e.next) {\n            case 0:\n              return t = n.length > 0 && void 0 !== n[0] ? n[0] : 1e3, e.abrupt(\"return\", new Promise(function (e) {\n                return setTimeout(e, t);\n              }));\n\n            case 2:\n            case \"end\":\n              return e.stop();\n          }\n        }\n      }, e);\n    })), function () {\n      return Ue.apply(this, arguments);\n    })\n  }, {\n    code: i,\n    accounts: u,\n    base58: s,\n    bytes: r,\n    crypto: a,\n    abi: c,\n    ethersUtils: o\n  }),\n      ze = {\n    HttpProvider: function () {\n      function e(t) {\n        var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3e4,\n            r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n            i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],\n            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {},\n            o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"/\";\n        if (b()(this, e), !Le.isValidURL(t)) throw new Error(\"Invalid URL provided to HttpProvider\");\n        if (isNaN(n) || n < 0) throw new Error(\"Invalid timeout duration provided\");\n        if (!Le.isObject(s)) throw new Error(\"Invalid headers object provided\");\n        t = t.replace(/\\/+$/, \"\"), this.host = t, this.timeout = n, this.user = r, this.password = i, this.headers = s, this.statusPage = o, this.instance = T.a.create({\n          baseURL: t,\n          timeout: n,\n          headers: s,\n          auth: r && {\n            user: r,\n            password: i\n          }\n        });\n      }\n\n      var t;\n      return y()(e, [{\n        key: \"setStatusPage\",\n        value: function value() {\n          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"/\";\n          this.statusPage = e;\n        }\n      }, {\n        key: \"isConnected\",\n        value: (t = f()(l.a.mark(function e() {\n          var t,\n              n = arguments;\n          return l.a.wrap(function (e) {\n            for (;;) {\n              switch (e.prev = e.next) {\n                case 0:\n                  return t = n.length > 0 && void 0 !== n[0] ? n[0] : this.statusPage, e.abrupt(\"return\", this.request(t).then(function (e) {\n                    return Le.hasProperties(e, \"blockID\", \"block_header\");\n                  }).catch(function () {\n                    return !1;\n                  }));\n\n                case 2:\n                case \"end\":\n                  return e.stop();\n              }\n            }\n          }, e, this);\n        })), function () {\n          return t.apply(this, arguments);\n        })\n      }, {\n        key: \"request\",\n        value: function value(e) {\n          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n              n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"get\";\n          return n = n.toLowerCase(), this.instance.request({\n            data: \"post\" == n && Object.keys(t).length ? t : null,\n            params: \"get\" == n && t,\n            url: e,\n            method: n\n          }).then(function (e) {\n            return e.data;\n          });\n        }\n      }]), e;\n    }()\n  },\n      Me = n(19),\n      Je = n.n(Me),\n      Ge = n(20),\n      Ye = n(12),\n      Xe = n.n(Ye),\n      Ze = n(5),\n      $e = n.n(Ze),\n      Qe = n(7),\n      et = n.n(Qe),\n      tt = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (b()(this, e), !t || !t instanceof It) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t;\n    }\n\n    return y()(e, [{\n      key: \"invalid\",\n      value: function value(e) {\n        return e.msg || \"Invalid \".concat(e.name).concat(\"address\" === e.type ? \" address\" : \"\", \" provided\");\n      }\n    }, {\n      key: \"notPositive\",\n      value: function value(e) {\n        return \"\".concat(e.name, \" must be a positive integer\");\n      }\n    }, {\n      key: \"notEqual\",\n      value: function value(e) {\n        return e.msg || \"\".concat(e.names[0], \" can not be equal to \").concat(e.names[1]);\n      }\n    }, {\n      key: \"notValid\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Function(),\n            n = {},\n            r = !1,\n            i = !0,\n            s = !1,\n            o = void 0;\n\n        try {\n          for (var a, u = e[Symbol.iterator](); !(i = (a = u.next()).done); i = !0) {\n            var c = a.value,\n                d = c.name,\n                l = c.names,\n                h = c.value,\n                f = c.type,\n                v = c.gt,\n                p = c.lt,\n                g = c.gte,\n                b = c.lte,\n                m = (c.se, c.optional);\n\n            if (!m || Le.isNotNullOrUndefined(h) && (\"boolean\" === f || !1 !== h)) {\n              switch (n[c.name] = c.value, f) {\n                case \"address\":\n                  this.tronWeb.isAddress(h) ? n[d] = this.tronWeb.address.toHex(h) : r = !0;\n                  break;\n\n                case \"integer\":\n                  (!Le.isInteger(h) || \"number\" == typeof v && h <= c.gt || \"number\" == typeof p && h >= c.lt || \"number\" == typeof g && h < c.gte || \"number\" == typeof b && h > c.lte) && (r = !0);\n                  break;\n\n                case \"positive-integer\":\n                  if (!Le.isInteger(h) || h <= 0) return void t(this.notPositive(c));\n                  break;\n\n                case \"tokenId\":\n                  Le.isString(h) && h.length || (r = !0);\n                  break;\n\n                case \"notEmptyObject\":\n                  Le.isObject(h) && Object.keys(h).length || (r = !0);\n                  break;\n\n                case \"notEqual\":\n                  if (n[l[0]] === n[l[1]]) return t(this.notEqual(c)), !0;\n                  break;\n\n                case \"resource\":\n                  [\"BANDWIDTH\", \"ENERGY\"].includes(h) || (r = !0);\n                  break;\n\n                case \"url\":\n                  Le.isValidURL(h) || (r = !0);\n                  break;\n\n                case \"hex\":\n                  Le.isHex(h) || (r = !0);\n                  break;\n\n                case \"array\":\n                  Array.isArray(h) || (r = !0);\n                  break;\n\n                case \"not-empty-string\":\n                  Le.isString(h) && h.length || (r = !0);\n                  break;\n\n                case \"boolean\":\n                  Le.isBoolean(h) || (r = !0);\n                  break;\n\n                case \"string\":\n                  (!Le.isString(h) || \"number\" == typeof v && h.length <= c.gt || \"number\" == typeof p && h.length >= c.lt || \"number\" == typeof g && h.length < c.gte || \"number\" == typeof b && h.length > c.lte) && (r = !0);\n              }\n\n              if (r) return t(this.invalid(c)), !0;\n            }\n          }\n        } catch (e) {\n          s = !0, o = e;\n        } finally {\n          try {\n            i || null == u.return || u.return();\n          } finally {\n            if (s) throw o;\n          }\n        }\n\n        return !1;\n      }\n    }]), e;\n  }();\n\n  function nt(e) {\n    return It.address.toHex(e);\n  }\n\n  function rt(e) {\n    return Ve.tronWeb.fromUtf8(e);\n  }\n\n  function it(e, t) {\n    return e.Error ? t(e.Error) : e.result && e.result.message ? t(Ve.tronWeb.toUtf8(e.result.message)) : t(null, e);\n  }\n\n  var st = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (b()(this, e), !t || !t instanceof It) throw new Error(\"Expected instance of TronWeb\");\n      Ve = this, this.tronWeb = t, this.injectPromise = $e()(this), this.validator = new tt(t);\n    }\n\n    var t, n, r, i;\n    return y()(e, [{\n      key: \"sendTrx\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 3 ? arguments[3] : void 0,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Le.isFunction(r) && (i = r, r = {}), Le.isFunction(n) ? (i = n, n = this.tronWeb.defaultAddress.hex) : Le.isObject(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.sendTrx, e, t, n, r);\n\n        if (t = parseInt(t), !this.validator.notValid([{\n          name: \"recipient\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"origin\",\n          type: \"address\",\n          value: n\n        }, {\n          names: [\"recipient\", \"origin\"],\n          type: \"notEqual\",\n          msg: \"Cannot transfer TRX to the same account\"\n        }, {\n          name: \"amount\",\n          type: \"integer\",\n          gt: 0,\n          value: t\n        }], i)) {\n          var s = {\n            to_address: nt(e),\n            owner_address: nt(n),\n            amount: t\n          };\n          r && r.permissionId && (s.Permission_id = r.permissionId), this.tronWeb.fullNode.request(\"wallet/createtransaction\", s, \"post\").then(function (e) {\n            return it(e, i);\n          }).catch(function (e) {\n            return i(e);\n          });\n        }\n      }\n    }, {\n      key: \"sendToken\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 ? arguments[4] : void 0,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Le.isFunction(i) && (s = i, i = {}), Le.isFunction(r) ? (s = r, r = this.tronWeb.defaultAddress.hex) : Le.isObject(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.sendToken, e, t, n, r, i);\n\n        if (t = parseInt(t), !this.validator.notValid([{\n          name: \"recipient\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"origin\",\n          type: \"address\",\n          value: r\n        }, {\n          names: [\"recipient\", \"origin\"],\n          type: \"notEqual\",\n          msg: \"Cannot transfer tokens to the same account\"\n        }, {\n          name: \"amount\",\n          type: \"integer\",\n          gt: 0,\n          value: t\n        }, {\n          name: \"token ID\",\n          type: \"tokenId\",\n          value: n\n        }], s)) {\n          var o = {\n            to_address: nt(e),\n            owner_address: nt(r),\n            asset_name: rt(n),\n            amount: parseInt(t)\n          };\n          i && i.permissionId && (o.Permission_id = i.permissionId), this.tronWeb.fullNode.request(\"wallet/transferasset\", o, \"post\").then(function (e) {\n            return it(e, s);\n          }).catch(function (e) {\n            return s(e);\n          });\n        }\n      }\n    }, {\n      key: \"purchaseToken\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 ? arguments[4] : void 0,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Le.isFunction(i) && (s = i, i = {}), Le.isFunction(r) ? (s = r, r = this.tronWeb.defaultAddress.hex) : Le.isObject(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.purchaseToken, e, t, n, r, i);\n\n        if (!this.validator.notValid([{\n          name: \"buyer\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: e\n        }, {\n          names: [\"buyer\", \"issuer\"],\n          type: \"notEqual\",\n          msg: \"Cannot purchase tokens from same account\"\n        }, {\n          name: \"amount\",\n          type: \"integer\",\n          gt: 0,\n          value: n\n        }, {\n          name: \"token ID\",\n          type: \"tokenId\",\n          value: t\n        }], s)) {\n          var o = {\n            to_address: nt(e),\n            owner_address: nt(r),\n            asset_name: rt(t),\n            amount: parseInt(n)\n          };\n          i && i.permissionId && (o.Permission_id = i.permissionId), this.tronWeb.fullNode.request(\"wallet/participateassetissue\", o, \"post\").then(function (e) {\n            return it(e, s);\n          }).catch(function (e) {\n            return s(e);\n          });\n        }\n      }\n    }, {\n      key: \"freezeBalance\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"BANDWIDTH\",\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0,\n            s = arguments.length > 5 ? arguments[5] : void 0,\n            o = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];\n        if (Le.isFunction(s) && (o = s, s = {}), Le.isFunction(i) ? (o = i, i = void 0) : Le.isObject(i) && (s = i, i = void 0), Le.isFunction(r) ? (o = r, r = this.tronWeb.defaultAddress.hex) : Le.isObject(r) && (s = r, r = this.tronWeb.defaultAddress.hex), Le.isFunction(t) && (o = t, t = 3), Le.isFunction(n) && (o = n, n = \"BANDWIDTH\"), !o) return this.injectPromise(this.freezeBalance, e, t, n, r, i, s);\n\n        if (!this.validator.notValid([{\n          name: \"origin\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"receiver\",\n          type: \"address\",\n          value: i,\n          optional: !0\n        }, {\n          name: \"amount\",\n          type: \"integer\",\n          gt: 0,\n          value: e\n        }, {\n          name: \"duration\",\n          type: \"integer\",\n          gte: 3,\n          value: t\n        }, {\n          name: \"resource\",\n          type: \"resource\",\n          value: n,\n          msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n        }], o)) {\n          var a = {\n            owner_address: nt(r),\n            frozen_balance: parseInt(e),\n            frozen_duration: parseInt(t),\n            resource: n\n          };\n          Le.isNotNullOrUndefined(i) && nt(i) !== nt(r) && (a.receiver_address = nt(i)), s && s.permissionId && (a.Permission_id = s.permissionId), this.tronWeb.fullNode.request(\"wallet/freezebalance\", a, \"post\").then(function (e) {\n            return it(e, o);\n          }).catch(function (e) {\n            return o(e);\n          });\n        }\n      }\n    }, {\n      key: \"unfreezeBalance\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"BANDWIDTH\",\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n            r = arguments.length > 3 ? arguments[3] : void 0,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Le.isFunction(r) && (i = r, r = {}), Le.isFunction(n) ? (i = n, n = void 0) : Le.isObject(n) && (r = n, n = void 0), Le.isFunction(t) ? (i = t, t = this.tronWeb.defaultAddress.hex) : Le.isObject(t) && (r = t, t = this.tronWeb.defaultAddress.hex), Le.isFunction(e) && (i = e, e = \"BANDWIDTH\"), !i) return this.injectPromise(this.unfreezeBalance, e, t, n, r);\n\n        if (!this.validator.notValid([{\n          name: \"origin\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"receiver\",\n          type: \"address\",\n          value: n,\n          optional: !0\n        }, {\n          name: \"resource\",\n          type: \"resource\",\n          value: e,\n          msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n        }], i)) {\n          var s = {\n            owner_address: nt(t),\n            resource: e\n          };\n          Le.isNotNullOrUndefined(n) && nt(n) !== nt(t) && (s.receiver_address = nt(n)), r && r.permissionId && (s.Permission_id = r.permissionId), this.tronWeb.fullNode.request(\"wallet/unfreezebalance\", s, \"post\").then(function (e) {\n            return it(e, i);\n          }).catch(function (e) {\n            return i(e);\n          });\n        }\n      }\n    }, {\n      key: \"withdrawBlockRewards\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 ? arguments[1] : void 0,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Le.isFunction(t) && (n = t, t = {}), Le.isFunction(e) ? (n = e, e = this.tronWeb.defaultAddress.hex) : Le.isObject(e) && (t = e, e = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.withdrawBlockRewards, e, t);\n\n        if (!this.validator.notValid([{\n          name: \"origin\",\n          type: \"address\",\n          value: e\n        }], n)) {\n          var r = {\n            owner_address: nt(e)\n          };\n          t && t.permissionId && (r.Permission_id = t.permissionId), this.tronWeb.fullNode.request(\"wallet/withdrawbalance\", r, \"post\").then(function (e) {\n            return it(e, n);\n          }).catch(function (e) {\n            return n(e);\n          });\n        }\n      }\n    }, {\n      key: \"applyForSR\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 ? arguments[2] : void 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (console.log(nt(e), Le.isObject(t)), Le.isFunction(n) && (r = n, n = {}), Le.isObject(t) && Le.isValidURL(e) && (n = t, t = e, e = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.applyForSR, e, t, n);\n\n        if (!this.validator.notValid([{\n          name: \"origin\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"url\",\n          type: \"url\",\n          value: t,\n          msg: \"Invalid url provided\"\n        }], r)) {\n          console.log(nt(e));\n          var i = {\n            owner_address: nt(e),\n            url: rt(t)\n          };\n          n && n.permissionId && (i.Permission_id = n.permissionId), this.tronWeb.fullNode.request(\"wallet/createwitness\", i, \"post\").then(function (e) {\n            return it(e, r);\n          }).catch(function (e) {\n            return r(e);\n          });\n        }\n      }\n    }, {\n      key: \"vote\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 2 ? arguments[2] : void 0,\n            i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (Le.isFunction(r) && (i = r, r = {}), Le.isFunction(n) ? (i = n, n = this.tronWeb.defaultAddress.hex) : Le.isObject(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.vote, t, n, r);\n\n        if (!this.validator.notValid([{\n          name: \"voter\",\n          type: \"address\",\n          value: n\n        }, {\n          name: \"votes\",\n          type: \"notEmptyObject\",\n          value: t\n        }], i)) {\n          var s = !1;\n\n          if (t = Object.entries(t).map(function (t) {\n            var n = et()(t, 2),\n                r = n[0],\n                i = n[1];\n            if (!s) return e.validator.notValid([{\n              name: \"SR\",\n              type: \"address\",\n              value: r\n            }, {\n              name: \"vote count\",\n              type: \"integer\",\n              gt: 0,\n              value: i,\n              msg: \"Invalid vote count provided for SR: \" + r\n            }]) ? s = !0 : {\n              vote_address: nt(r),\n              vote_count: parseInt(i)\n            };\n          }), !s) {\n            var o = {\n              owner_address: nt(n),\n              votes: t\n            };\n            r && r.permissionId && (o.Permission_id = r.permissionId), this.tronWeb.fullNode.request(\"wallet/votewitnessaccount\", o, \"post\").then(function (e) {\n              return it(e, i);\n            }).catch(function (e) {\n              return i(e);\n            });\n          }\n        }\n      }\n    }, {\n      key: \"createSmartContract\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Le.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.createSmartContract, e, t);\n        var r = e.feeLimit || 1e9,\n            i = e.userFeePercentage;\n        \"number\" == typeof i || i || (i = 100);\n        var s = e.originEnergyLimit || 1e7,\n            o = e.callValue || 0,\n            a = e.tokenValue,\n            u = e.tokenId || e.token_id,\n            c = e.abi,\n            d = void 0 !== c && c,\n            l = e.bytecode,\n            h = void 0 !== l && l,\n            f = e.parameters,\n            v = void 0 === f ? [] : f,\n            p = e.name,\n            g = void 0 === p ? \"\" : p;\n        if (d && Le.isString(d)) try {\n          d = JSON.parse(d);\n        } catch (e) {\n          return n(\"Invalid options.abi provided\");\n        }\n        if (d.entrys && (d = d.entrys), !Le.isArray(d)) return n(\"Invalid options.abi provided\");\n        var b = d.some(function (e) {\n          return \"constructor\" == e.type && e.payable;\n        });\n\n        if (!this.validator.notValid([{\n          name: \"bytecode\",\n          type: \"hex\",\n          value: h\n        }, {\n          name: \"feeLimit\",\n          type: \"integer\",\n          value: r,\n          gt: 0,\n          lte: 1e9\n        }, {\n          name: \"callValue\",\n          type: \"integer\",\n          value: o,\n          gte: 0\n        }, {\n          name: \"userFeePercentage\",\n          type: \"integer\",\n          value: i,\n          gte: 0,\n          lte: 100\n        }, {\n          name: \"originEnergyLimit\",\n          type: \"integer\",\n          value: s,\n          gte: 0,\n          lte: 1e7\n        }, {\n          name: \"parameters\",\n          type: \"array\",\n          value: v\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"tokenValue\",\n          type: \"integer\",\n          value: a,\n          gte: 0,\n          optional: !0\n        }, {\n          name: \"tokenId\",\n          type: \"integer\",\n          value: u,\n          gte: 0,\n          optional: !0\n        }], n)) {\n          if (b && 0 == o && 0 == a) return n(\"When contract is payable, options.callValue or options.tokenValue must be a positive integer\");\n          if (!b && (o > 0 || a > 0)) return n(\"When contract is not payable, options.callValue and options.tokenValue must be 0\");\n          var m = d.find(function (e) {\n            return \"constructor\" === e.type;\n          });\n\n          if (void 0 !== m && m) {\n            var y = new fe(),\n                k = [],\n                x = [];\n            if (m = m.inputs, v.length != m.length) return n(\"constructor needs \".concat(m.length, \" but \").concat(v.length, \" provided\"));\n\n            for (var w = 0; w < v.length; w++) {\n              var I = m[w].type,\n                  W = v[w];\n              if (!I || !Le.isString(I) || !I.length) return n(\"Invalid parameter type provided: \" + I);\n              \"address\" == I ? W = nt(W).replace(L, \"0x\") : \"address[]\" == I && (W = W.map(function (e) {\n                return nt(e).replace(L, \"0x\");\n              })), k.push(I), x.push(W);\n            }\n\n            try {\n              v = y.encode(k, x).replace(/^(0x)/, \"\");\n            } catch (e) {\n              return n(e);\n            }\n          } else v = \"\";\n\n          var A = {\n            owner_address: nt(t),\n            fee_limit: parseInt(r),\n            call_value: parseInt(o),\n            consume_user_resource_percent: i,\n            origin_energy_limit: s,\n            abi: JSON.stringify(d),\n            bytecode: h,\n            parameter: v,\n            name: g\n          };\n          Le.isNotNullOrUndefined(a) && (A.call_token_value = parseInt(a)), Le.isNotNullOrUndefined(u) && (A.token_id = parseInt(u)), e && e.permissionId && (A.Permission_id = e.permissionId), this.tronWeb.fullNode.request(\"wallet/deploycontract\", A, \"post\").then(function (e) {\n            return it(e, n);\n          }).catch(function (e) {\n            return n(e);\n          });\n        }\n      }\n    }, {\n      key: \"triggerSmartContract\",\n      value: function value() {\n        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n          t[n] = arguments[n];\n        }\n\n        return \"object\" !== p()(t[2]) && (t[2] = {\n          feeLimit: t[2],\n          callValue: t[3]\n        }, t.splice(3, 1)), this._triggerSmartContract.apply(this, t);\n      }\n    }, {\n      key: \"triggerConstantContract\",\n      value: function value() {\n        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n          t[n] = arguments[n];\n        }\n\n        return t[2]._isConstant = !0, this.triggerSmartContract.apply(this, t);\n      }\n    }, {\n      key: \"triggerConfirmedConstantContract\",\n      value: function value() {\n        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n          t[n] = arguments[n];\n        }\n\n        return t[2]._isConstant = !0, t[2].confirmed = !0, this.triggerSmartContract.apply(this, t);\n      }\n    }, {\n      key: \"_triggerSmartContract\",\n      value: function value(e, t) {\n        var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [],\n            i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Le.isFunction(i) && (s = i, i = this.tronWeb.defaultAddress.hex), Le.isFunction(r) && (s = r, r = []), !s) return this.injectPromise(this._triggerSmartContract, e, t, n, r, i);\n        var o = Object.assign({\n          callValue: 0,\n          feeLimit: 1e9\n        }, n),\n            a = o.tokenValue,\n            u = o.tokenId,\n            c = o.callValue,\n            d = o.feeLimit;\n\n        if (!this.validator.notValid([{\n          name: \"feeLimit\",\n          type: \"integer\",\n          value: d,\n          gt: 0,\n          lte: 1e9\n        }, {\n          name: \"callValue\",\n          type: \"integer\",\n          value: c,\n          gte: 0\n        }, {\n          name: \"parameters\",\n          type: \"array\",\n          value: r\n        }, {\n          name: \"contract\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: i,\n          optional: !0\n        }, {\n          name: \"tokenValue\",\n          type: \"integer\",\n          value: a,\n          gte: 0,\n          optional: !0\n        }, {\n          name: \"tokenId\",\n          type: \"integer\",\n          value: u,\n          gte: 0,\n          optional: !0\n        }, {\n          name: \"function selector\",\n          type: \"not-empty-string\",\n          value: t\n        }], s)) {\n          if (t = t.replace(\"/s*/g\", \"\"), r.length) {\n            for (var l = new fe(), h = [], f = [], v = 0; v < r.length; v++) {\n              var p = r[v],\n                  g = p.type,\n                  b = p.value;\n              if (!g || !Le.isString(g) || !g.length) return s(\"Invalid parameter type provided: \" + g);\n              \"address\" == g ? b = nt(b).replace(L, \"0x\") : \"address[]\" == g && (b = b.map(function (e) {\n                return nt(e).replace(L, \"0x\");\n              })), h.push(g), f.push(b);\n            }\n\n            try {\n              h = h.map(function (e) {\n                return /trcToken/.test(e) && (e = e.replace(/trcToken/, \"uint256\")), e;\n              }), r = l.encode(h, f).replace(/^(0x)/, \"\");\n            } catch (e) {\n              return s(e);\n            }\n          } else r = \"\";\n\n          var m = {\n            contract_address: nt(e),\n            owner_address: nt(i),\n            function_selector: t,\n            parameter: r\n          };\n          n._isConstant || (m.call_value = parseInt(c), m.fee_limit = parseInt(d), Le.isNotNullOrUndefined(a) && (m.call_token_value = parseInt(a)), Le.isNotNullOrUndefined(u) && (m.token_id = parseInt(u))), n.permissionId && (m.Permission_id = n.permissionId), this.tronWeb[n.confirmed ? \"solidityNode\" : \"fullNode\"].request(\"wallet\".concat(n.confirmed ? \"solidity\" : \"\", \"/trigger\").concat(n._isConstant ? \"constant\" : \"smart\", \"contract\"), m, \"post\").then(function (e) {\n            return it(e, s);\n          }).catch(function (e) {\n            return s(e);\n          });\n        }\n      }\n    }, {\n      key: \"clearABI\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (!n) return this.injectPromise(this.clearABI, e, t);\n        if (!this.tronWeb.isAddress(e)) return n(\"Invalid contract address provided\");\n        if (!this.tronWeb.isAddress(t)) return n(\"Invalid owner address provided\");\n        var r = {\n          contract_address: nt(e),\n          owner_address: nt(t)\n        };\n        this.tronWeb.trx.cache.contracts[e] && delete this.tronWeb.trx.cache.contracts[e], this.tronWeb.fullNode.request(\"wallet/clearabi\", r, \"post\").then(function (e) {\n          return it(e, n);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"updateBrokerage\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (!n) return this.injectPromise(this.updateBrokerage, e, t);\n        if (!Le.isNotNullOrUndefined(e)) return n(\"Invalid brokerage provided\");\n        if (!Le.isInteger(e) || e < 0 || e > 100) return n(\"Brokerage must be an integer between 0 and 100\");\n        if (!this.tronWeb.isAddress(t)) return n(\"Invalid owner address provided\");\n        var r = {\n          brokerage: parseInt(e),\n          owner_address: nt(t)\n        };\n        this.tronWeb.fullNode.request(\"wallet/updateBrokerage\", r, \"post\").then(function (e) {\n          return it(e, n);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"createToken\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Le.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.createToken, e, t);\n        var r = e.name,\n            i = void 0 !== r && r,\n            s = e.abbreviation,\n            o = void 0 !== s && s,\n            a = e.description,\n            u = void 0 !== a && a,\n            c = e.url,\n            d = void 0 !== c && c,\n            l = e.totalSupply,\n            h = void 0 === l ? 0 : l,\n            f = e.trxRatio,\n            v = void 0 === f ? 1 : f,\n            p = e.tokenRatio,\n            g = void 0 === p ? 1 : p,\n            b = e.saleStart,\n            m = void 0 === b ? Date.now() : b,\n            y = e.saleEnd,\n            k = void 0 !== y && y,\n            x = e.freeBandwidth,\n            w = void 0 === x ? 0 : x,\n            I = e.freeBandwidthLimit,\n            W = void 0 === I ? 0 : I,\n            A = e.frozenAmount,\n            P = void 0 === A ? 0 : A,\n            _ = e.frozenDuration,\n            N = void 0 === _ ? 0 : _,\n            S = e.voteScore,\n            j = e.precision;\n\n        if (!this.validator.notValid([{\n          name: \"Supply amount\",\n          type: \"positive-integer\",\n          value: h\n        }, {\n          name: \"TRX ratio\",\n          type: \"positive-integer\",\n          value: v\n        }, {\n          name: \"Token ratio\",\n          type: \"positive-integer\",\n          value: g\n        }, {\n          name: \"token abbreviation\",\n          type: \"not-empty-string\",\n          value: o\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: i\n        }, {\n          name: \"token description\",\n          type: \"not-empty-string\",\n          value: u\n        }, {\n          name: \"token url\",\n          type: \"url\",\n          value: d\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"sale start timestamp\",\n          type: \"integer\",\n          value: m,\n          gte: Date.now()\n        }, {\n          name: \"sale end timestamp\",\n          type: \"integer\",\n          value: k,\n          gt: m\n        }, {\n          name: \"Free bandwidth amount\",\n          type: \"integer\",\n          value: w,\n          gte: 0\n        }, {\n          name: \"Free bandwidth limit\",\n          type: \"integer\",\n          value: W,\n          gte: 0\n        }, {\n          name: \"Frozen supply\",\n          type: \"integer\",\n          value: P,\n          gte: 0\n        }, {\n          name: \"Frozen duration\",\n          type: \"integer\",\n          value: N,\n          gte: 0\n        }], n)) {\n          if (Le.isNotNullOrUndefined(S) && (!Le.isInteger(S) || S <= 0)) return n(\"voteScore must be a positive integer greater than 0\");\n          if (Le.isNotNullOrUndefined(j) && (!Le.isInteger(j) || j <= 0 || j > 6)) return n(\"precision must be a positive integer > 0 and <= 6\");\n          var T = {\n            owner_address: nt(t),\n            name: rt(i),\n            abbr: rt(o),\n            description: rt(u),\n            url: rt(d),\n            total_supply: parseInt(h),\n            trx_num: parseInt(v),\n            num: parseInt(g),\n            start_time: parseInt(m),\n            end_time: parseInt(k),\n            free_asset_net_limit: parseInt(w),\n            public_free_asset_net_limit: parseInt(W),\n            frozen_supply: {\n              frozen_amount: parseInt(P),\n              frozen_days: parseInt(N)\n            }\n          };\n          !this.tronWeb.fullnodeSatisfies(\">=3.5.0\") || parseInt(P) > 0 || delete T.frozen_supply, j && !isNaN(parseInt(j)) && (T.precision = parseInt(j)), S && !isNaN(parseInt(S)) && (T.vote_score = parseInt(S)), e && e.permissionId && (T.Permission_id = e.permissionId), this.tronWeb.fullNode.request(\"wallet/createassetissue\", T, \"post\").then(function (e) {\n            return it(e, n);\n          }).catch(function (e) {\n            return n(e);\n          });\n        }\n      }\n    }, {\n      key: \"updateAccount\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 ? arguments[2] : void 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (Le.isFunction(n) && (r = n, n = {}), Le.isFunction(t) ? (r = t, t = this.tronWeb.defaultAddress.hex) : Le.isObject(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.updateAccount, e, t, n);\n\n        if (!this.validator.notValid([{\n          name: \"Name\",\n          type: \"not-empty-string\",\n          value: e\n        }, {\n          name: \"origin\",\n          type: \"address\",\n          value: t\n        }], r)) {\n          var i = {\n            account_name: rt(e),\n            owner_address: nt(t)\n          };\n          n && n.permissionId && (i.Permission_id = n.permissionId), this.tronWeb.fullNode.request(\"wallet/updateaccount\", i, \"post\").then(function (e) {\n            return it(e, r);\n          }).catch(function (e) {\n            return r(e);\n          });\n        }\n      }\n    }, {\n      key: \"setAccountId\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Le.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.setAccountId, e, t);\n        e && Le.isString(e) && e.startsWith(\"0x\") && (e = e.slice(2)), this.validator.notValid([{\n          name: \"accountId\",\n          type: \"hex\",\n          value: e\n        }, {\n          name: \"accountId\",\n          type: \"string\",\n          lte: 32,\n          gte: 8,\n          value: e\n        }, {\n          name: \"origin\",\n          type: \"address\",\n          value: t\n        }], n) || this.tronWeb.fullNode.request(\"wallet/setaccountid\", {\n          account_id: e,\n          owner_address: nt(t)\n        }, \"post\").then(function (e) {\n          return it(e, n);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"updateToken\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Le.isFunction(t) ? (n = t, t = this.tronWeb.defaultAddress.hex) : Le.isObject(t) && (e = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.updateToken, e, t);\n        var r = e,\n            i = r.description,\n            s = void 0 !== i && i,\n            o = r.url,\n            a = void 0 !== o && o,\n            u = r.freeBandwidth,\n            c = void 0 === u ? 0 : u,\n            d = r.freeBandwidthLimit,\n            l = void 0 === d ? 0 : d;\n\n        if (!this.validator.notValid([{\n          name: \"token description\",\n          type: \"not-empty-string\",\n          value: s\n        }, {\n          name: \"token url\",\n          type: \"url\",\n          value: a\n        }, {\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"Free bandwidth amount\",\n          type: \"positive-integer\",\n          value: c\n        }, {\n          name: \"Free bandwidth limit\",\n          type: \"positive-integer\",\n          value: l\n        }], n)) {\n          var h = {\n            owner_address: nt(t),\n            description: rt(s),\n            url: rt(a),\n            new_limit: parseInt(c),\n            new_public_limit: parseInt(l)\n          };\n          e && e.permissionId && (h.Permission_id = e.permissionId), this.tronWeb.fullNode.request(\"wallet/updateasset\", h, \"post\").then(function (e) {\n            return it(e, n);\n          }).catch(function (e) {\n            return n(e);\n          });\n        }\n      }\n    }, {\n      key: \"sendAsset\",\n      value: function value() {\n        return this.sendToken.apply(this, arguments);\n      }\n    }, {\n      key: \"purchaseAsset\",\n      value: function value() {\n        return this.purchaseToken.apply(this, arguments);\n      }\n    }, {\n      key: \"createAsset\",\n      value: function value() {\n        return this.createToken.apply(this, arguments);\n      }\n    }, {\n      key: \"updateAsset\",\n      value: function value() {\n        return this.updateToken.apply(this, arguments);\n      }\n    }, {\n      key: \"createProposal\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 ? arguments[2] : void 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (Le.isFunction(n) && (r = n, n = {}), Le.isFunction(t) ? (r = t, t = this.tronWeb.defaultAddress.hex) : Le.isObject(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.createProposal, e, t, n);\n\n        if (!this.validator.notValid([{\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }], r)) {\n          var i = \"Invalid proposal parameters provided\";\n          if (!e) return r(i);\n          Le.isArray(e) || (e = [e]);\n          var s = !0,\n              o = !1,\n              a = void 0;\n\n          try {\n            for (var u, c = e[Symbol.iterator](); !(s = (u = c.next()).done); s = !0) {\n              var d = u.value;\n              if (!Le.isObject(d)) return r(i);\n            }\n          } catch (e) {\n            o = !0, a = e;\n          } finally {\n            try {\n              s || null == c.return || c.return();\n            } finally {\n              if (o) throw a;\n            }\n          }\n\n          var l = {\n            owner_address: nt(t),\n            parameters: e\n          };\n          n && n.permissionId && (l.Permission_id = n.permissionId), this.tronWeb.fullNode.request(\"wallet/proposalcreate\", l, \"post\").then(function (e) {\n            return it(e, r);\n          }).catch(function (e) {\n            return r(e);\n          });\n        }\n      }\n    }, {\n      key: \"deleteProposal\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 2 ? arguments[2] : void 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        if (Le.isFunction(n) && (r = n, n = {}), Le.isFunction(t) ? (r = t, t = this.tronWeb.defaultAddress.hex) : Le.isObject(t) && (n = t, t = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.deleteProposal, e, t, n);\n\n        if (!this.validator.notValid([{\n          name: \"issuer\",\n          type: \"address\",\n          value: t\n        }, {\n          name: \"proposalID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }], r)) {\n          var i = {\n            owner_address: nt(t),\n            proposal_id: parseInt(e)\n          };\n          n && n.permissionId && (i.Permission_id = n.permissionId), this.tronWeb.fullNode.request(\"wallet/proposaldelete\", i, \"post\").then(function (e) {\n            return it(e, r);\n          }).catch(function (e) {\n            return r(e);\n          });\n        }\n      }\n    }, {\n      key: \"voteProposal\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 3 ? arguments[3] : void 0,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Le.isFunction(r) && (i = r, r = {}), Le.isFunction(n) ? (i = n, n = this.tronWeb.defaultAddress.hex) : Le.isObject(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.voteProposal, e, t, n, r);\n\n        if (!this.validator.notValid([{\n          name: \"voter\",\n          type: \"address\",\n          value: n\n        }, {\n          name: \"proposalID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }, {\n          name: \"has approval\",\n          type: \"boolean\",\n          value: t\n        }], i)) {\n          var s = {\n            owner_address: nt(n),\n            proposal_id: parseInt(e),\n            is_add_approval: t\n          };\n          r && r.permissionId && (s.Permission_id = r.permissionId), this.tronWeb.fullNode.request(\"wallet/proposalapprove\", s, \"post\").then(function (e) {\n            return it(e, i);\n          }).catch(function (e) {\n            return i(e);\n          });\n        }\n      }\n    }, {\n      key: \"createTRXExchange\",\n      value: function value(e, t, n) {\n        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 ? arguments[4] : void 0,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Le.isFunction(i) && (s = i, i = {}), Le.isFunction(r) ? (s = r, r = this.tronWeb.defaultAddress.hex) : Le.isObject(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.createTRXExchange, e, t, n, r, i);\n\n        if (!this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: e\n        }, {\n          name: \"token balance\",\n          type: \"positive-integer\",\n          value: t\n        }, {\n          name: \"trx balance\",\n          type: \"positive-integer\",\n          value: n\n        }], s)) {\n          var o = {\n            owner_address: nt(r),\n            first_token_id: rt(e),\n            first_token_balance: t,\n            second_token_id: \"5f\",\n            second_token_balance: n\n          };\n          i && i.permissionId && (o.Permission_id = i.permissionId), this.tronWeb.fullNode.request(\"wallet/exchangecreate\", o, \"post\").then(function (e) {\n            s(null, e);\n          }).catch(function (e) {\n            return s(e);\n          });\n        }\n      }\n    }, {\n      key: \"createTokenExchange\",\n      value: function value(e, t, n, r) {\n        var i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex,\n            s = arguments.length > 5 ? arguments[5] : void 0,\n            o = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];\n        if (Le.isFunction(s) && (o = s, s = {}), Le.isFunction(i) ? (o = i, i = this.tronWeb.defaultAddress.hex) : Le.isObject(i) && (s = i, i = this.tronWeb.defaultAddress.hex), !o) return this.injectPromise(this.createTokenExchange, e, t, n, r, i, s);\n\n        if (!this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: i\n        }, {\n          name: \"first token name\",\n          type: \"not-empty-string\",\n          value: e\n        }, {\n          name: \"second token name\",\n          type: \"not-empty-string\",\n          value: n\n        }, {\n          name: \"first token balance\",\n          type: \"positive-integer\",\n          value: t\n        }, {\n          name: \"second token balance\",\n          type: \"positive-integer\",\n          value: r\n        }], o)) {\n          var a = {\n            owner_address: nt(i),\n            first_token_id: rt(e),\n            first_token_balance: t,\n            second_token_id: rt(n),\n            second_token_balance: r\n          };\n          s && s.permissionId && (a.Permission_id = s.permissionId), this.tronWeb.fullNode.request(\"wallet/exchangecreate\", a, \"post\").then(function (e) {\n            o(null, e);\n          }).catch(function (e) {\n            return o(e);\n          });\n        }\n      }\n    }, {\n      key: \"injectExchangeTokens\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 ? arguments[4] : void 0,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Le.isFunction(i) && (s = i, i = {}), Le.isFunction(r) ? (s = r, r = this.tronWeb.defaultAddress.hex) : Le.isObject(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.injectExchangeTokens, e, t, n, r, i);\n\n        if (!this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: t\n        }, {\n          name: \"token amount\",\n          type: \"integer\",\n          value: n,\n          gte: 1\n        }, {\n          name: \"exchangeID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }], s)) {\n          var o = {\n            owner_address: nt(r),\n            exchange_id: parseInt(e),\n            token_id: rt(t),\n            quant: parseInt(n)\n          };\n          i && i.permissionId && (o.Permission_id = i.permissionId), this.tronWeb.fullNode.request(\"wallet/exchangeinject\", o, \"post\").then(function (e) {\n            return it(e, s);\n          }).catch(function (e) {\n            return s(e);\n          });\n        }\n      }\n    }, {\n      key: \"withdrawExchangeTokens\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,\n            i = arguments.length > 4 ? arguments[4] : void 0,\n            s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n        if (Le.isFunction(i) && (s = i, i = {}), Le.isFunction(r) ? (s = r, r = this.tronWeb.defaultAddress.hex) : Le.isObject(r) && (i = r, r = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.withdrawExchangeTokens, e, t, n, r, i);\n\n        if (!this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: r\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: t\n        }, {\n          name: \"token amount\",\n          type: \"integer\",\n          value: n,\n          gte: 1\n        }, {\n          name: \"exchangeID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }], s)) {\n          var o = {\n            owner_address: nt(r),\n            exchange_id: parseInt(e),\n            token_id: rt(t),\n            quant: parseInt(n)\n          };\n          i && i.permissionId && (o.Permission_id = i.permissionId), this.tronWeb.fullNode.request(\"wallet/exchangewithdraw\", o, \"post\").then(function (e) {\n            return it(e, s);\n          }).catch(function (e) {\n            return s(e);\n          });\n        }\n      }\n    }, {\n      key: \"tradeExchangeTokens\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,\n            i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex,\n            s = arguments.length > 5 ? arguments[5] : void 0,\n            o = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];\n        if (Le.isFunction(s) && (o = s, s = {}), Le.isFunction(i) ? (o = i, i = this.tronWeb.defaultAddress.hex) : Le.isObject(i) && (s = i, i = this.tronWeb.defaultAddress.hex), !o) return this.injectPromise(this.tradeExchangeTokens, e, t, n, r, i, s);\n\n        if (!this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: i\n        }, {\n          name: \"token name\",\n          type: \"not-empty-string\",\n          value: t\n        }, {\n          name: \"tokenAmountSold\",\n          type: \"integer\",\n          value: n,\n          gte: 1\n        }, {\n          name: \"tokenAmountExpected\",\n          type: \"integer\",\n          value: r,\n          gte: 1\n        }, {\n          name: \"exchangeID\",\n          type: \"integer\",\n          value: e,\n          gte: 0\n        }], o)) {\n          var a = {\n            owner_address: nt(i),\n            exchange_id: parseInt(e),\n            token_id: this.tronWeb.fromAscii(t),\n            quant: parseInt(n),\n            expected: parseInt(r)\n          };\n          s && s.permissionId && (a.Permission_id = s.permissionId), this.tronWeb.fullNode.request(\"wallet/exchangetransaction\", a, \"post\").then(function (e) {\n            return it(e, o);\n          }).catch(function (e) {\n            return o(e);\n          });\n        }\n      }\n    }, {\n      key: \"updateSetting\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 3 ? arguments[3] : void 0,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Le.isFunction(r) && (i = r, r = {}), Le.isFunction(n) ? (i = n, n = this.tronWeb.defaultAddress.hex) : Le.isObject(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.updateSetting, e, t, n, r);\n\n        if (!this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: n\n        }, {\n          name: \"contract\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"userFeePercentage\",\n          type: \"integer\",\n          value: t,\n          gte: 0,\n          lte: 100\n        }], i)) {\n          var s = {\n            owner_address: nt(n),\n            contract_address: nt(e),\n            consume_user_resource_percent: t\n          };\n          r && r.permissionId && (s.Permission_id = r.permissionId), this.tronWeb.fullNode.request(\"wallet/updatesetting\", s, \"post\").then(function (e) {\n            return it(e, i);\n          }).catch(function (e) {\n            return i(e);\n          });\n        }\n      }\n    }, {\n      key: \"updateEnergyLimit\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,\n            r = arguments.length > 3 ? arguments[3] : void 0,\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Le.isFunction(r) && (i = r, r = {}), Le.isFunction(n) ? (i = n, n = this.tronWeb.defaultAddress.hex) : Le.isObject(n) && (r = n, n = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.updateEnergyLimit, e, t, n, r);\n\n        if (!this.validator.notValid([{\n          name: \"owner\",\n          type: \"address\",\n          value: n\n        }, {\n          name: \"contract\",\n          type: \"address\",\n          value: e\n        }, {\n          name: \"originEnergyLimit\",\n          type: \"integer\",\n          value: t,\n          gte: 0,\n          lte: 1e7\n        }], i)) {\n          var s = {\n            owner_address: nt(n),\n            contract_address: nt(e),\n            origin_energy_limit: t\n          };\n          r && r.permissionId && (s.Permission_id = r.permissionId), this.tronWeb.fullNode.request(\"wallet/updateenergylimit\", s, \"post\").then(function (e) {\n            return it(e, i);\n          }).catch(function (e) {\n            return i(e);\n          });\n        }\n      }\n    }, {\n      key: \"checkPermissions\",\n      value: function value(e, t) {\n        if (e) {\n          if (e.type !== t || !e.permission_name || !Le.isString(e.permission_name) || !Le.isInteger(e.threshold) || e.threshold < 1 || !e.keys) return !1;\n          var n = !0,\n              r = !1,\n              i = void 0;\n\n          try {\n            for (var s, o = e.keys[Symbol.iterator](); !(n = (s = o.next()).done); n = !0) {\n              var a = s.value;\n              if (!this.tronWeb.isAddress(a.address) || !Le.isInteger(a.weight) || a.weight > e.threshold || a.weight < 1 || 2 === t && !e.operations) return !1;\n            }\n          } catch (e) {\n            r = !0, i = e;\n          } finally {\n            try {\n              n || null == o.return || o.return();\n            } finally {\n              if (r) throw i;\n            }\n          }\n        }\n\n        return !0;\n      }\n    }, {\n      key: \"updateAccountPermissions\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],\n            i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        if (Le.isFunction(r) && (i = r, r = !1), Le.isFunction(n) && (i = n, n = r = !1), Le.isFunction(t) && (i = t, t = n = r = !1), !i) return this.injectPromise(this.updateAccountPermissions, e, t, n, r);\n        if (!this.tronWeb.isAddress(e)) return i(\"Invalid ownerAddress provided\");\n        if (!this.checkPermissions(t, 0)) return i(\"Invalid ownerPermissions provided\");\n        if (!this.checkPermissions(n, 1)) return i(\"Invalid witnessPermissions provided\");\n        Array.isArray(r) || (r = [r]);\n        var s = !0,\n            o = !1,\n            a = void 0;\n\n        try {\n          for (var u, c = r[Symbol.iterator](); !(s = (u = c.next()).done); s = !0) {\n            var d = u.value;\n            if (!this.checkPermissions(d, 2)) return i(\"Invalid activesPermissions provided\");\n          }\n        } catch (e) {\n          o = !0, a = e;\n        } finally {\n          try {\n            s || null == c.return || c.return();\n          } finally {\n            if (o) throw a;\n          }\n        }\n\n        var l = {\n          owner_address: e\n        };\n        t && (l.owner = t), n && (l.witness = n), r && (l.actives = 1 === r.length ? r[0] : r), this.tronWeb.fullNode.request(\"wallet/accountpermissionupdate\", l, \"post\").then(function (e) {\n          return it(e, i);\n        }).catch(function (e) {\n          return i(e);\n        });\n      }\n    }, {\n      key: \"newTxID\",\n      value: (i = f()(l.a.mark(function e(t, n) {\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (n) {\n                  e.next = 2;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.newTxID, t));\n\n              case 2:\n                this.tronWeb.fullNode.request(\"wallet/getsignweight\", t, \"post\").then(function (e) {\n                  e = e.transaction.transaction, \"boolean\" == typeof t.visible && (e.visible = t.visible), n(null, e);\n                }).catch(function (e) {\n                  return n(\"Error generating a new transaction id.\");\n                });\n\n              case 3:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e, t) {\n        return i.apply(this, arguments);\n      })\n    }, {\n      key: \"alterTransaction\",\n      value: (r = f()(l.a.mark(function e(t) {\n        var n,\n            r,\n            i = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (n = i.length > 1 && void 0 !== i[1] ? i[1] : {}, r = i.length > 2 && void 0 !== i[2] && i[2]) {\n                  e.next = 4;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.alterTransaction, t, n));\n\n              case 4:\n                if (!t.signature) {\n                  e.next = 6;\n                  break;\n                }\n\n                return e.abrupt(\"return\", r(\"You can not extend the expiration of a signed transaction.\"));\n\n              case 6:\n                if (!n.data) {\n                  e.next = 12;\n                  break;\n                }\n\n                if (\"hex\" !== n.dataFormat && (n.data = this.tronWeb.toHex(n.data)), n.data = n.data.replace(/^0x/, \"\"), 0 !== n.data.length) {\n                  e.next = 11;\n                  break;\n                }\n\n                return e.abrupt(\"return\", r(\"Invalid data provided\"));\n\n              case 11:\n                t.raw_data.data = n.data;\n\n              case 12:\n                if (!n.extension) {\n                  e.next = 17;\n                  break;\n                }\n\n                if (n.extension = parseInt(1e3 * n.extension), !(isNaN(n.extension) || t.raw_data.expiration + n.extension <= Date.now() + 3e3)) {\n                  e.next = 16;\n                  break;\n                }\n\n                return e.abrupt(\"return\", r(\"Invalid extension provided\"));\n\n              case 16:\n                t.raw_data.expiration += n.extension;\n\n              case 17:\n                this.newTxID(t, r);\n\n              case 18:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e) {\n        return r.apply(this, arguments);\n      })\n    }, {\n      key: \"extendExpiration\",\n      value: (n = f()(l.a.mark(function e(t, n) {\n        var r,\n            i = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (r = i.length > 2 && void 0 !== i[2] && i[2]) {\n                  e.next = 3;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.extendExpiration, t, n));\n\n              case 3:\n                this.alterTransaction(t, {\n                  extension: n\n                }, r);\n\n              case 4:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e, t) {\n        return n.apply(this, arguments);\n      })\n    }, {\n      key: \"addUpdateData\",\n      value: (t = f()(l.a.mark(function e(t, n) {\n        var r,\n            i,\n            s = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (r = s.length > 2 && void 0 !== s[2] ? s[2] : \"utf8\", i = s.length > 3 && void 0 !== s[3] && s[3], Le.isFunction(r) && (i = r, r = \"utf8\"), i) {\n                  e.next = 5;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.addUpdateData, t, n, r));\n\n              case 5:\n                this.alterTransaction(t, {\n                  data: n,\n                  dataFormat: r\n                }, i);\n\n              case 6:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e, n) {\n        return t.apply(this, arguments);\n      })\n    }]), e;\n  }();\n\n  function ot(e, t) {\n    var n = Object.keys(e);\n\n    if (Object.getOwnPropertySymbols) {\n      var r = Object.getOwnPropertySymbols(e);\n      t && (r = r.filter(function (t) {\n        return Object.getOwnPropertyDescriptor(e, t).enumerable;\n      })), n.push.apply(n, r);\n    }\n\n    return n;\n  }\n\n  function at(e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = null != arguments[t] ? arguments[t] : {};\n      t % 2 ? ot(n, !0).forEach(function (t) {\n        S()(e, t, n[t]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : ot(n).forEach(function (t) {\n        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));\n      });\n    }\n\n    return e;\n  }\n\n  var ut = \"\u0019Ethereum Signed Message:\\n32\";\n\n  function ct(e) {\n    return It.address.toHex(e);\n  }\n\n  var dt = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (b()(this, e), !t || !t instanceof It) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t, this.injectPromise = $e()(this), this.cache = {\n        contracts: {}\n      }, this.validator = new tt(t);\n    }\n\n    var t, n, r, i, s, o, a, u, c, d, h, v, p, g, m, k, x;\n    return y()(e, [{\n      key: \"_parseToken\",\n      value: function value(e) {\n        return at({}, e, {\n          name: this.tronWeb.toUtf8(e.name),\n          abbr: e.abbr && this.tronWeb.toUtf8(e.abbr),\n          description: e.description && this.tronWeb.toUtf8(e.description),\n          url: e.url && this.tronWeb.toUtf8(e.url)\n        });\n      }\n    }, {\n      key: \"getCurrentBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.getCurrentBlock);\n        this.tronWeb.fullNode.request(\"wallet/getnowblock\").then(function (t) {\n          e(null, t);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getConfirmedCurrentBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.getConfirmedCurrentBlock);\n        this.tronWeb.solidityNode.request(\"walletsolidity/getnowblock\").then(function (t) {\n          e(null, t);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Le.isFunction(e) && (t = e, e = this.tronWeb.defaultBlock), t ? !1 === e ? t(\"No block identifier provided\") : (\"earliest\" == e && (e = 0), \"latest\" == e ? this.getCurrentBlock(t) : isNaN(e) && Le.isHex(e) ? this.getBlockByHash(e, t) : void this.getBlockByNumber(e, t)) : this.injectPromise(this.getBlock, e);\n      }\n    }, {\n      key: \"getBlockByHash\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (!t) return this.injectPromise(this.getBlockByHash, e);\n        this.tronWeb.fullNode.request(\"wallet/getblockbyid\", {\n          value: e\n        }, \"post\").then(function (e) {\n          if (!Object.keys(e).length) return t(\"Block not found\");\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getBlockByNumber\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return t ? !Le.isInteger(e) || e < 0 ? t(\"Invalid block number provided\") : void this.tronWeb.fullNode.request(\"wallet/getblockbynum\", {\n          num: parseInt(e)\n        }, \"post\").then(function (e) {\n          if (!Object.keys(e).length) return t(\"Block not found\");\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        }) : this.injectPromise(this.getBlockByNumber, e);\n      }\n    }, {\n      key: \"getBlockTransactionCount\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (Le.isFunction(e) && (t = e, e = this.tronWeb.defaultBlock), !t) return this.injectPromise(this.getBlockTransactionCount, e);\n        this.getBlock(e).then(function (e) {\n          var n = e.transactions;\n          t(null, (void 0 === n ? [] : n).length);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getTransactionFromBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock,\n            t = arguments.length > 1 ? arguments[1] : void 0,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Le.isFunction(t) && (n = t, t = 0), Le.isFunction(e) && (n = e, e = this.tronWeb.defaultBlock), !n) return this.injectPromise(this.getTransactionFromBlock, e, t);\n        this.getBlock(e).then(function (e) {\n          var r = e.transactions,\n              i = void 0 !== r && r;\n          i ? \"number\" == typeof t ? t >= 0 && t < i.length ? n(null, i[t]) : n(\"Invalid transaction index provided\") : n(null, i) : n(\"Transaction not found in block\");\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"getTransaction\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (!t) return this.injectPromise(this.getTransaction, e);\n        this.tronWeb.fullNode.request(\"wallet/gettransactionbyid\", {\n          value: e\n        }, \"post\").then(function (e) {\n          if (!Object.keys(e).length) return t(\"Transaction not found\");\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getConfirmedTransaction\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (!t) return this.injectPromise(this.getConfirmedTransaction, e);\n        this.tronWeb.solidityNode.request(\"walletsolidity/gettransactionbyid\", {\n          value: e\n        }, \"post\").then(function (e) {\n          if (!Object.keys(e).length) return t(\"Transaction not found\");\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getUnconfirmedTransactionInfo\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return this._getTransactionInfoById(e, {\n          confirmed: !1\n        }, t);\n      }\n    }, {\n      key: \"getTransactionInfo\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return this._getTransactionInfoById(e, {\n          confirmed: !0\n        }, t);\n      }\n    }, {\n      key: \"_getTransactionInfoById\",\n      value: function value(e, t) {\n        var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (!n) return this.injectPromise(this._getTransactionInfoById, e, t);\n        this.tronWeb[t.confirmed ? \"solidityNode\" : \"fullNode\"].request(\"wallet\".concat(t.confirmed ? \"solidity\" : \"\", \"/gettransactioninfobyid\"), {\n          value: e\n        }, \"post\").then(function (e) {\n          n(null, e);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"getTransactionsToAddress\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        return Le.isFunction(n) && (r = n, n = 0), Le.isFunction(t) && (r = t, t = 30), r ? (e = this.tronWeb.address.toHex(e), this.getTransactionsRelated(e, \"to\", t, n, r)) : this.injectPromise(this.getTransactionsToAddress, e, t, n);\n      }\n    }, {\n      key: \"getTransactionsFromAddress\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        return Le.isFunction(n) && (r = n, n = 0), Le.isFunction(t) && (r = t, t = 30), r ? (e = this.tronWeb.address.toHex(e), this.getTransactionsRelated(e, \"from\", t, n, r)) : this.injectPromise(this.getTransactionsFromAddress, e, t, n);\n      }\n    }, {\n      key: \"getTransactionsRelated\",\n      value: (x = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u,\n            c,\n            d = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = d.length > 0 && void 0 !== d[0] ? d[0] : this.tronWeb.defaultAddress.hex, n = d.length > 1 && void 0 !== d[1] ? d[1] : \"all\", r = d.length > 2 && void 0 !== d[2] ? d[2] : 30, i = d.length > 3 && void 0 !== d[3] ? d[3] : 0, s = d.length > 4 && void 0 !== d[4] && d[4], Le.isFunction(i) && (s = i, i = 0), Le.isFunction(r) && (s = r, r = 30), Le.isFunction(n) && (s = n, n = \"all\"), Le.isFunction(t) && (s = t, t = this.tronWeb.defaultAddress.hex), s) {\n                  e.next = 11;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.getTransactionsRelated, t, n, r, i));\n\n              case 11:\n                if ([\"to\", \"from\", \"all\"].includes(n)) {\n                  e.next = 13;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s('Invalid direction provided: Expected \"to\", \"from\" or \"all\"'));\n\n              case 13:\n                if (\"all\" != n) {\n                  e.next = 27;\n                  break;\n                }\n\n                return e.prev = 14, e.next = 17, Promise.all([this.getTransactionsRelated(t, \"from\", r, i), this.getTransactionsRelated(t, \"to\", r, i)]);\n\n              case 17:\n                return o = e.sent, a = et()(o, 2), u = a[0], c = a[1], e.abrupt(\"return\", s(null, [].concat(R()(u.map(function (e) {\n                  return e.direction = \"from\", e;\n                })), R()(c.map(function (e) {\n                  return e.direction = \"to\", e;\n                }))).sort(function (e, t) {\n                  return t.raw_data.timestamp - e.raw_data.timestamp;\n                })));\n\n              case 24:\n                return e.prev = 24, e.t0 = e.catch(14), e.abrupt(\"return\", s(e.t0));\n\n              case 27:\n                if (this.tronWeb.isAddress(t)) {\n                  e.next = 29;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Invalid address provided\"));\n\n              case 29:\n                if (!(!Le.isInteger(r) || r < 0 || i && r < 1)) {\n                  e.next = 31;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Invalid limit provided\"));\n\n              case 31:\n                if (Le.isInteger(i) && !(i < 0)) {\n                  e.next = 33;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Invalid offset provided\"));\n\n              case 33:\n                t = this.tronWeb.address.toHex(t), this.tronWeb.solidityNode.request(\"walletextension/gettransactions\".concat(n, \"this\"), {\n                  account: {\n                    address: t\n                  },\n                  offset: i,\n                  limit: r\n                }, \"post\").then(function (e) {\n                  var t = e.transaction;\n                  s(null, t);\n                }).catch(function (e) {\n                  return s(e);\n                });\n\n              case 35:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[14, 24]]);\n      })), function () {\n        return x.apply(this, arguments);\n      })\n    }, {\n      key: \"getAccount\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Le.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.solidityNode.request(\"walletsolidity/getaccount\", {\n          address: e\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        })) : t(\"Invalid address provided\") : this.injectPromise(this.getAccount, e);\n      }\n    }, {\n      key: \"getAccountById\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (!t) return this.injectPromise(this.getAccountById, e);\n        this.getAccountInfoById(e, {\n          confirmed: !0\n        }, t);\n      }\n    }, {\n      key: \"getAccountInfoById\",\n      value: function value(e, t, n) {\n        this.validator.notValid([{\n          name: \"accountId\",\n          type: \"hex\",\n          value: e\n        }, {\n          name: \"accountId\",\n          type: \"string\",\n          lte: 32,\n          gte: 8,\n          value: e\n        }], n) || (e.startsWith(\"0x\") && (e = e.slice(2)), this.tronWeb[t.confirmed ? \"solidityNode\" : \"fullNode\"].request(\"wallet\".concat(t.confirmed ? \"solidity\" : \"\", \"/getaccountbyid\"), {\n          account_id: e\n        }, \"post\").then(function (e) {\n          n(null, e);\n        }).catch(function (e) {\n          return n(e);\n        }));\n      }\n    }, {\n      key: \"getBalance\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (Le.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), !t) return this.injectPromise(this.getBalance, e);\n        this.getAccount(e).then(function (e) {\n          var n = e.balance;\n          t(null, void 0 === n ? 0 : n);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getUnconfirmedAccount\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Le.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.fullNode.request(\"wallet/getaccount\", {\n          address: e\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        })) : t(\"Invalid address provided\") : this.injectPromise(this.getUnconfirmedAccount, e);\n      }\n    }, {\n      key: \"getUnconfirmedAccountById\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (!t) return this.injectPromise(this.getUnconfirmedAccountById, e);\n        this.getAccountInfoById(e, {\n          confirmed: !1\n        }, t);\n      }\n    }, {\n      key: \"getUnconfirmedBalance\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (Le.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), !t) return this.injectPromise(this.getUnconfirmedBalance, e);\n        this.getUnconfirmedAccount(e).then(function (e) {\n          var n = e.balance;\n          t(null, void 0 === n ? 0 : n);\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getBandwidth\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Le.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.fullNode.request(\"wallet/getaccountnet\", {\n          address: e\n        }, \"post\").then(function (e) {\n          var n = e.freeNetUsed,\n              r = void 0 === n ? 0 : n,\n              i = e.freeNetLimit,\n              s = void 0 === i ? 0 : i,\n              o = e.NetUsed,\n              a = void 0 === o ? 0 : o,\n              u = e.NetLimit;\n          t(null, s - r + ((void 0 === u ? 0 : u) - a));\n        }).catch(function (e) {\n          return t(e);\n        })) : t(\"Invalid address provided\") : this.injectPromise(this.getBandwidth, e);\n      }\n    }, {\n      key: \"getTokensIssuedByAddress\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return Le.isFunction(t) && (n = t, t = this.tronWeb.defaultAddress.hex), n ? this.tronWeb.isAddress(t) ? (t = this.tronWeb.address.toHex(t), void this.tronWeb.fullNode.request(\"wallet/getassetissuebyaccount\", {\n          address: t\n        }, \"post\").then(function (t) {\n          var r = t.assetIssue,\n              i = void 0 !== r && r;\n          if (!i) return n(null, {});\n          var s = i.map(function (t) {\n            return e._parseToken(t);\n          }).reduce(function (e, t) {\n            return e[t.name] = t, e;\n          }, {});\n          n(null, s);\n        }).catch(function (e) {\n          return n(e);\n        })) : n(\"Invalid address provided\") : this.injectPromise(this.getTokensIssuedByAddress, t);\n      }\n    }, {\n      key: \"getTokenFromID\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return n ? (Le.isInteger(t) && (t = t.toString()), Le.isString(t) && t.length ? void this.tronWeb.fullNode.request(\"wallet/getassetissuebyname\", {\n          value: this.tronWeb.fromUtf8(t)\n        }, \"post\").then(function (t) {\n          if (!t.name) return n(\"Token does not exist\");\n          n(null, e._parseToken(t));\n        }).catch(function (e) {\n          return n(e);\n        }) : n(\"Invalid token ID provided\")) : this.injectPromise(this.getTokenFromID, t);\n      }\n    }, {\n      key: \"listNodes\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!t) return this.injectPromise(this.listNodes);\n        this.tronWeb.fullNode.request(\"wallet/listnodes\").then(function (n) {\n          var r = n.nodes;\n          t(null, (void 0 === r ? [] : r).map(function (t) {\n            var n = t.address,\n                r = n.host,\n                i = n.port;\n            return \"\".concat(e.tronWeb.toUtf8(r), \":\").concat(i);\n          }));\n        }).catch(function (e) {\n          return t(e);\n        });\n      }\n    }, {\n      key: \"getBlockRange\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return Le.isFunction(t) && (n = t, t = 30), Le.isFunction(e) && (n = e, e = 0), n ? !Le.isInteger(e) || e < 0 ? n(\"Invalid start of range provided\") : !Le.isInteger(t) || t <= e ? n(\"Invalid end of range provided\") : void this.tronWeb.fullNode.request(\"wallet/getblockbylimitnext\", {\n          startNum: parseInt(e),\n          endNum: parseInt(t) + 1\n        }, \"post\").then(function (e) {\n          var t = e.block;\n          n(null, void 0 === t ? [] : t);\n        }).catch(function (e) {\n          return n(e);\n        }) : this.injectPromise(this.getBlockRange, e, t);\n      }\n    }, {\n      key: \"listSuperRepresentatives\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.listSuperRepresentatives);\n        this.tronWeb.fullNode.request(\"wallet/listwitnesses\").then(function (t) {\n          var n = t.witnesses;\n          e(null, void 0 === n ? [] : n);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"listTokens\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return Le.isFunction(n) && (r = n, n = 0), Le.isFunction(t) && (r = t, t = 0), r ? !Le.isInteger(t) || t < 0 || n && t < 1 ? r(\"Invalid limit provided\") : !Le.isInteger(n) || n < 0 ? r(\"Invalid offset provided\") : t ? void this.tronWeb.fullNode.request(\"wallet/getpaginatedassetissuelist\", {\n          offset: parseInt(n),\n          limit: parseInt(t)\n        }, \"post\").then(function (t) {\n          var n = t.assetIssue;\n          r(null, (void 0 === n ? [] : n).map(function (t) {\n            return e._parseToken(t);\n          }));\n        }).catch(function (e) {\n          return r(e);\n        }) : this.tronWeb.fullNode.request(\"wallet/getassetissuelist\").then(function (t) {\n          var n = t.assetIssue;\n          r(null, (void 0 === n ? [] : n).map(function (t) {\n            return e._parseToken(t);\n          }));\n        }).catch(function (e) {\n          return r(e);\n        }) : this.injectPromise(this.listTokens, t, n);\n      }\n    }, {\n      key: \"timeUntilNextVoteCycle\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.timeUntilNextVoteCycle);\n        this.tronWeb.fullNode.request(\"wallet/getnextmaintenancetime\").then(function (t) {\n          var n = t.num,\n              r = void 0 === n ? -1 : n;\n          if (-1 == r) return e(\"Failed to get time until next vote cycle\");\n          e(null, Math.floor(r / 1e3));\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getContract\",\n      value: function value(e) {\n        var t = this,\n            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return n ? this.tronWeb.isAddress(e) ? void (this.cache.contracts[e] ? n(null, this.cache.contracts[e]) : (e = this.tronWeb.address.toHex(e), this.tronWeb.fullNode.request(\"wallet/getcontract\", {\n          value: e\n        }).then(function (r) {\n          if (r.Error) return n(\"Contract does not exist\");\n          t.cache.contracts[e] = r, n(null, r);\n        }).catch(function (e) {\n          return n(e);\n        }))) : n(\"Invalid contract address provided\") : this.injectPromise(this.getContract, e);\n      }\n    }, {\n      key: \"verifyMessage\",\n      value: (k = f()(l.a.mark(function t() {\n        var n,\n            r,\n            i,\n            s,\n            o,\n            a = arguments;\n        return l.a.wrap(function (t) {\n          for (;;) {\n            switch (t.prev = t.next) {\n              case 0:\n                if (n = a.length > 0 && void 0 !== a[0] && a[0], r = a.length > 1 && void 0 !== a[1] && a[1], i = a.length > 2 && void 0 !== a[2] ? a[2] : this.tronWeb.defaultAddress.base58, s = !(a.length > 3 && void 0 !== a[3]) || a[3], o = a.length > 4 && void 0 !== a[4] && a[4], Le.isFunction(i) && (o = i, i = this.tronWeb.defaultAddress.base58, s = !0), Le.isFunction(s) && (o = s, s = !0), o) {\n                  t.next = 9;\n                  break;\n                }\n\n                return t.abrupt(\"return\", this.injectPromise(this.verifyMessage, n, r, i, s));\n\n              case 9:\n                if (Le.isHex(n)) {\n                  t.next = 11;\n                  break;\n                }\n\n                return t.abrupt(\"return\", o(\"Expected hex message input\"));\n\n              case 11:\n                if (!e.verifySignature(n, i, r, s)) {\n                  t.next = 13;\n                  break;\n                }\n\n                return t.abrupt(\"return\", o(null, !0));\n\n              case 13:\n                o(\"Signature does not match\");\n\n              case 14:\n              case \"end\":\n                return t.stop();\n            }\n          }\n        }, t, this);\n      })), function () {\n        return k.apply(this, arguments);\n      })\n    }, {\n      key: \"sign\",\n      value: (m = f()(l.a.mark(function t() {\n        var n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u = arguments;\n        return l.a.wrap(function (t) {\n          for (;;) {\n            switch (t.prev = t.next) {\n              case 0:\n                if (n = u.length > 0 && void 0 !== u[0] && u[0], r = u.length > 1 && void 0 !== u[1] ? u[1] : this.tronWeb.defaultPrivateKey, i = !(u.length > 2 && void 0 !== u[2]) || u[2], s = u.length > 3 && void 0 !== u[3] && u[3], o = u.length > 4 && void 0 !== u[4] && u[4], Le.isFunction(s) && (o = s, s = !1), Le.isFunction(i) && (o = i, i = !0, s = !1), Le.isFunction(r) && (o = r, r = this.tronWeb.defaultPrivateKey, i = !0, s = !1), o) {\n                  t.next = 10;\n                  break;\n                }\n\n                return t.abrupt(\"return\", this.injectPromise(this.sign, n, r, i, s));\n\n              case 10:\n                if (!Le.isString(n)) {\n                  t.next = 21;\n                  break;\n                }\n\n                if (Le.isHex(n)) {\n                  t.next = 13;\n                  break;\n                }\n\n                return t.abrupt(\"return\", o(\"Expected hex message input\"));\n\n              case 13:\n                return t.prev = 13, a = e.signString(n, r, i), t.abrupt(\"return\", o(null, a));\n\n              case 18:\n                t.prev = 18, t.t0 = t.catch(13), o(t.t0);\n\n              case 21:\n                if (Le.isObject(n)) {\n                  t.next = 23;\n                  break;\n                }\n\n                return t.abrupt(\"return\", o(\"Invalid transaction provided\"));\n\n              case 23:\n                if (s || !n.signature) {\n                  t.next = 25;\n                  break;\n                }\n\n                return t.abrupt(\"return\", o(\"Transaction is already signed\"));\n\n              case 25:\n                if (t.prev = 25, s) {\n                  t.next = 30;\n                  break;\n                }\n\n                if (this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(r)).toLowerCase() === n.raw_data.contract[0].parameter.value.owner_address.toLowerCase()) {\n                  t.next = 30;\n                  break;\n                }\n\n                return t.abrupt(\"return\", o(\"Private key does not match address in transaction\"));\n\n              case 30:\n                return t.abrupt(\"return\", o(null, Le.crypto.signTransaction(r, n)));\n\n              case 33:\n                t.prev = 33, t.t1 = t.catch(25), o(t.t1);\n\n              case 36:\n              case \"end\":\n                return t.stop();\n            }\n          }\n        }, t, this, [[13, 18], [25, 33]]);\n      })), function () {\n        return m.apply(this, arguments);\n      })\n    }, {\n      key: \"multiSign\",\n      value: (g = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = u.length > 0 && void 0 !== u[0] && u[0], n = u.length > 1 && void 0 !== u[1] ? u[1] : this.tronWeb.defaultPrivateKey, r = u.length > 2 && void 0 !== u[2] && u[2], i = u.length > 3 && void 0 !== u[3] && u[3], Le.isFunction(r) && (i = r, r = 0), Le.isFunction(n) && (i = n, n = this.tronWeb.defaultPrivateKey, r = 0), i) {\n                  e.next = 8;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.multiSign, t, n, r));\n\n              case 8:\n                if (Le.isObject(t) && t.raw_data && t.raw_data.contract) {\n                  e.next = 10;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(\"Invalid transaction provided\"));\n\n              case 10:\n                if (t.raw_data.contract[0].Permission_id || !(r > 0)) {\n                  e.next = 30;\n                  break;\n                }\n\n                return t.raw_data.contract[0].Permission_id = r, s = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(n)).toLowerCase(), e.next = 15, this.getSignWeight(t, r);\n\n              case 15:\n                if (\"PERMISSION_ERROR\" !== (o = e.sent).result.code) {\n                  e.next = 18;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(o.result.message));\n\n              case 18:\n                if (a = !1, o.permission.keys.map(function (e) {\n                  e.address === s && (a = !0);\n                }), a) {\n                  e.next = 22;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(n + \" has no permission to sign\"));\n\n              case 22:\n                if (!o.approved_list || -1 == o.approved_list.indexOf(s)) {\n                  e.next = 24;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(n + \" already sign transaction\"));\n\n              case 24:\n                if (!o.transaction || !o.transaction.transaction) {\n                  e.next = 29;\n                  break;\n                }\n\n                t = o.transaction.transaction, r > 0 && (t.raw_data.contract[0].Permission_id = r), e.next = 30;\n                break;\n\n              case 29:\n                return e.abrupt(\"return\", i(\"Invalid transaction provided\"));\n\n              case 30:\n                return e.prev = 30, e.abrupt(\"return\", i(null, Le.crypto.signTransaction(n, t)));\n\n              case 34:\n                e.prev = 34, e.t0 = e.catch(30), i(e.t0);\n\n              case 37:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[30, 34]]);\n      })), function () {\n        return g.apply(this, arguments);\n      })\n    }, {\n      key: \"getApprovedList\",\n      value: (p = f()(l.a.mark(function e(t) {\n        var n,\n            r = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (n = r.length > 1 && void 0 !== r[1] && r[1]) {\n                  e.next = 3;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.getApprovedList, t));\n\n              case 3:\n                if (Le.isObject(t)) {\n                  e.next = 5;\n                  break;\n                }\n\n                return e.abrupt(\"return\", n(\"Invalid transaction provided\"));\n\n              case 5:\n                this.tronWeb.fullNode.request(\"wallet/getapprovedlist\", t, \"post\").then(function (e) {\n                  n(null, e);\n                }).catch(function (e) {\n                  return n(e);\n                });\n\n              case 6:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e) {\n        return p.apply(this, arguments);\n      })\n    }, {\n      key: \"getSignWeight\",\n      value: (v = f()(l.a.mark(function e(t, n) {\n        var r,\n            i = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (r = i.length > 2 && void 0 !== i[2] && i[2], Le.isFunction(n) && (r = n, n = void 0), r) {\n                  e.next = 4;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.getSignWeight, t, n));\n\n              case 4:\n                if (Le.isObject(t) && t.raw_data && t.raw_data.contract) {\n                  e.next = 6;\n                  break;\n                }\n\n                return e.abrupt(\"return\", r(\"Invalid transaction provided\"));\n\n              case 6:\n                if (Le.isInteger(n) ? t.raw_data.contract[0].Permission_id = parseInt(n) : \"number\" != typeof t.raw_data.contract[0].Permission_id && (t.raw_data.contract[0].Permission_id = 0), Le.isObject(t)) {\n                  e.next = 9;\n                  break;\n                }\n\n                return e.abrupt(\"return\", r(\"Invalid transaction provided\"));\n\n              case 9:\n                this.tronWeb.fullNode.request(\"wallet/getsignweight\", t, \"post\").then(function (e) {\n                  r(null, e);\n                }).catch(function (e) {\n                  return r(e);\n                });\n\n              case 10:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e, t) {\n        return v.apply(this, arguments);\n      })\n    }, {\n      key: \"sendRawTransaction\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return Le.isFunction(t) && (n = t, t = {}), n ? Le.isObject(e) ? Le.isObject(t) ? e.signature && Le.isArray(e.signature) ? void this.tronWeb.fullNode.request(\"wallet/broadcasttransaction\", e, \"post\").then(function (t) {\n          t.result && (t.transaction = e), n(null, t);\n        }).catch(function (e) {\n          return n(e);\n        }) : n(\"Transaction is not signed\") : n(\"Invalid options provided\") : n(\"Invalid transaction provided\") : this.injectPromise(this.sendRawTransaction, e, t);\n      }\n    }, {\n      key: \"sendTransaction\",\n      value: (h = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u,\n            c = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = c.length > 0 && void 0 !== c[0] && c[0], n = c.length > 1 && void 0 !== c[1] && c[1], r = c.length > 2 && void 0 !== c[2] ? c[2] : {}, i = c.length > 3 && void 0 !== c[3] && c[3], Le.isFunction(r) && (i = r, r = {}), \"string\" == typeof r && (r = {\n                  privateKey: r\n                }), i) {\n                  e.next = 8;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.sendTransaction, t, n, r));\n\n              case 8:\n                if (this.tronWeb.isAddress(t)) {\n                  e.next = 10;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(\"Invalid recipient provided\"));\n\n              case 10:\n                if (Le.isInteger(n) && !(n <= 0)) {\n                  e.next = 12;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(\"Invalid amount provided\"));\n\n              case 12:\n                if ((r = at({\n                  privateKey: this.tronWeb.defaultPrivateKey,\n                  address: this.tronWeb.defaultAddress.hex\n                }, r)).privateKey || r.address) {\n                  e.next = 15;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(\"Function requires either a private key or address to be set\"));\n\n              case 15:\n                return e.prev = 15, s = r.privateKey ? this.tronWeb.address.fromPrivateKey(r.privateKey) : r.address, e.next = 19, this.tronWeb.transactionBuilder.sendTrx(t, n, s);\n\n              case 19:\n                return o = e.sent, e.next = 22, this.sign(o, r.privateKey || void 0);\n\n              case 22:\n                return a = e.sent, e.next = 25, this.sendRawTransaction(a);\n\n              case 25:\n                return u = e.sent, e.abrupt(\"return\", i(null, u));\n\n              case 29:\n                return e.prev = 29, e.t0 = e.catch(15), e.abrupt(\"return\", i(e.t0));\n\n              case 32:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[15, 29]]);\n      })), function () {\n        return h.apply(this, arguments);\n      })\n    }, {\n      key: \"sendToken\",\n      value: (d = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u,\n            c,\n            d = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = d.length > 0 && void 0 !== d[0] && d[0], n = d.length > 1 && void 0 !== d[1] && d[1], r = d.length > 2 && void 0 !== d[2] && d[2], i = d.length > 3 && void 0 !== d[3] ? d[3] : {}, s = d.length > 4 && void 0 !== d[4] && d[4], Le.isFunction(i) && (s = i, i = {}), \"string\" == typeof i && (i = {\n                  privateKey: i\n                }), s) {\n                  e.next = 9;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.sendToken, t, n, r, i));\n\n              case 9:\n                if (this.tronWeb.isAddress(t)) {\n                  e.next = 11;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Invalid recipient provided\"));\n\n              case 11:\n                if (Le.isInteger(n) && !(n <= 0)) {\n                  e.next = 13;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Invalid amount provided\"));\n\n              case 13:\n                if (Le.isInteger(r) && (r = r.toString()), Le.isString(r)) {\n                  e.next = 16;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Invalid token ID provided\"));\n\n              case 16:\n                if ((i = at({\n                  privateKey: this.tronWeb.defaultPrivateKey,\n                  address: this.tronWeb.defaultAddress.hex\n                }, i)).privateKey || i.address) {\n                  e.next = 19;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Function requires either a private key or address to be set\"));\n\n              case 19:\n                return e.prev = 19, o = i.privateKey ? this.tronWeb.address.fromPrivateKey(i.privateKey) : i.address, e.next = 23, this.tronWeb.transactionBuilder.sendToken(t, n, r, o);\n\n              case 23:\n                return a = e.sent, e.next = 26, this.sign(a, i.privateKey || void 0);\n\n              case 26:\n                return u = e.sent, e.next = 29, this.sendRawTransaction(u);\n\n              case 29:\n                return c = e.sent, e.abrupt(\"return\", s(null, c));\n\n              case 33:\n                return e.prev = 33, e.t0 = e.catch(19), e.abrupt(\"return\", s(e.t0));\n\n              case 36:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[19, 33]]);\n      })), function () {\n        return d.apply(this, arguments);\n      })\n    }, {\n      key: \"freezeBalance\",\n      value: (c = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u,\n            c,\n            d,\n            h = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = h.length > 0 && void 0 !== h[0] ? h[0] : 0, n = h.length > 1 && void 0 !== h[1] ? h[1] : 3, r = h.length > 2 && void 0 !== h[2] ? h[2] : \"BANDWIDTH\", i = h.length > 3 && void 0 !== h[3] ? h[3] : {}, s = h.length > 4 && void 0 !== h[4] ? h[4] : void 0, o = h.length > 5 && void 0 !== h[5] && h[5], Le.isFunction(s) && (o = s, s = void 0), Le.isFunction(n) && (o = n, n = 3), Le.isFunction(r) && (o = r, r = \"BANDWIDTH\"), Le.isFunction(i) && (o = i, i = {}), \"string\" == typeof i && (i = {\n                  privateKey: i\n                }), o) {\n                  e.next = 13;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.freezeBalance, t, n, r, i, s));\n\n              case 13:\n                if ([\"BANDWIDTH\", \"ENERGY\"].includes(r)) {\n                  e.next = 15;\n                  break;\n                }\n\n                return e.abrupt(\"return\", o('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"'));\n\n              case 15:\n                if (Le.isInteger(t) && !(t <= 0)) {\n                  e.next = 17;\n                  break;\n                }\n\n                return e.abrupt(\"return\", o(\"Invalid amount provided\"));\n\n              case 17:\n                if (Le.isInteger(n) && !(n < 3)) {\n                  e.next = 19;\n                  break;\n                }\n\n                return e.abrupt(\"return\", o(\"Invalid duration provided, minimum of 3 days\"));\n\n              case 19:\n                if ((i = at({\n                  privateKey: this.tronWeb.defaultPrivateKey,\n                  address: this.tronWeb.defaultAddress.hex\n                }, i)).privateKey || i.address) {\n                  e.next = 22;\n                  break;\n                }\n\n                return e.abrupt(\"return\", o(\"Function requires either a private key or address to be set\"));\n\n              case 22:\n                return e.prev = 22, a = i.privateKey ? this.tronWeb.address.fromPrivateKey(i.privateKey) : i.address, e.next = 26, this.tronWeb.transactionBuilder.freezeBalance(t, n, r, a, s);\n\n              case 26:\n                return u = e.sent, e.next = 29, this.sign(u, i.privateKey || void 0);\n\n              case 29:\n                return c = e.sent, e.next = 32, this.sendRawTransaction(c);\n\n              case 32:\n                return d = e.sent, e.abrupt(\"return\", o(null, d));\n\n              case 36:\n                return e.prev = 36, e.t0 = e.catch(22), e.abrupt(\"return\", o(e.t0));\n\n              case 39:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[22, 36]]);\n      })), function () {\n        return c.apply(this, arguments);\n      })\n    }, {\n      key: \"unfreezeBalance\",\n      value: (u = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u,\n            c = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = c.length > 0 && void 0 !== c[0] ? c[0] : \"BANDWIDTH\", n = c.length > 1 && void 0 !== c[1] ? c[1] : {}, r = c.length > 2 && void 0 !== c[2] ? c[2] : void 0, i = c.length > 3 && void 0 !== c[3] && c[3], Le.isFunction(r) && (i = r, r = void 0), Le.isFunction(t) && (i = t, t = \"BANDWIDTH\"), Le.isFunction(n) && (i = n, n = {}), \"string\" == typeof n && (n = {\n                  privateKey: n\n                }), i) {\n                  e.next = 10;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.unfreezeBalance, t, n, r));\n\n              case 10:\n                if ([\"BANDWIDTH\", \"ENERGY\"].includes(t)) {\n                  e.next = 12;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"'));\n\n              case 12:\n                if ((n = at({\n                  privateKey: this.tronWeb.defaultPrivateKey,\n                  address: this.tronWeb.defaultAddress.hex\n                }, n)).privateKey || n.address) {\n                  e.next = 15;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(\"Function requires either a private key or address to be set\"));\n\n              case 15:\n                return e.prev = 15, s = n.privateKey ? this.tronWeb.address.fromPrivateKey(n.privateKey) : n.address, e.next = 19, this.tronWeb.transactionBuilder.unfreezeBalance(t, s, r);\n\n              case 19:\n                return o = e.sent, e.next = 22, this.sign(o, n.privateKey || void 0);\n\n              case 22:\n                return a = e.sent, e.next = 25, this.sendRawTransaction(a);\n\n              case 25:\n                return u = e.sent, e.abrupt(\"return\", i(null, u));\n\n              case 29:\n                return e.prev = 29, e.t0 = e.catch(15), e.abrupt(\"return\", i(e.t0));\n\n              case 32:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[15, 29]]);\n      })), function () {\n        return u.apply(this, arguments);\n      })\n    }, {\n      key: \"updateAccount\",\n      value: (a = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = u.length > 0 && void 0 !== u[0] && u[0], n = u.length > 1 && void 0 !== u[1] ? u[1] : {}, r = u.length > 2 && void 0 !== u[2] && u[2], Le.isFunction(n) && (r = n, n = {}), \"string\" == typeof n && (n = {\n                  privateKey: n\n                }), r) {\n                  e.next = 7;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.updateAccount, t, n));\n\n              case 7:\n                if (Le.isString(t) && t.length) {\n                  e.next = 9;\n                  break;\n                }\n\n                return e.abrupt(\"return\", r(\"Name must be a string\"));\n\n              case 9:\n                if ((n = at({\n                  privateKey: this.tronWeb.defaultPrivateKey,\n                  address: this.tronWeb.defaultAddress.hex\n                }, n)).privateKey || n.address) {\n                  e.next = 12;\n                  break;\n                }\n\n                return e.abrupt(\"return\", r(\"Function requires either a private key or address to be set\"));\n\n              case 12:\n                return e.prev = 12, i = n.privateKey ? this.tronWeb.address.fromPrivateKey(n.privateKey) : n.address, e.next = 16, this.tronWeb.transactionBuilder.updateAccount(t, i);\n\n              case 16:\n                return s = e.sent, e.next = 19, this.sign(s, n.privateKey || void 0);\n\n              case 19:\n                return o = e.sent, e.next = 22, this.sendRawTransaction(o);\n\n              case 22:\n                return a = e.sent, e.abrupt(\"return\", r(null, a));\n\n              case 26:\n                return e.prev = 26, e.t0 = e.catch(12), e.abrupt(\"return\", r(e.t0));\n\n              case 29:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[12, 26]]);\n      })), function () {\n        return a.apply(this, arguments);\n      })\n    }, {\n      key: \"signMessage\",\n      value: function value() {\n        return this.sign.apply(this, arguments);\n      }\n    }, {\n      key: \"sendAsset\",\n      value: function value() {\n        return this.sendToken.apply(this, arguments);\n      }\n    }, {\n      key: \"send\",\n      value: function value() {\n        return this.sendTransaction.apply(this, arguments);\n      }\n    }, {\n      key: \"sendTrx\",\n      value: function value() {\n        return this.sendTransaction.apply(this, arguments);\n      }\n    }, {\n      key: \"broadcast\",\n      value: function value() {\n        return this.sendRawTransaction.apply(this, arguments);\n      }\n    }, {\n      key: \"signTransaction\",\n      value: function value() {\n        return this.sign.apply(this, arguments);\n      }\n    }, {\n      key: \"getProposal\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return t ? !Le.isInteger(e) || e < 0 ? t(\"Invalid proposalID provided\") : void this.tronWeb.fullNode.request(\"wallet/getproposalbyid\", {\n          id: parseInt(e)\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        }) : this.injectPromise(this.getProposal, e);\n      }\n    }, {\n      key: \"listProposals\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.listProposals);\n        this.tronWeb.fullNode.request(\"wallet/listproposals\", {}, \"post\").then(function (t) {\n          var n = t.proposals;\n          e(null, void 0 === n ? [] : n);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getChainParameters\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.getChainParameters);\n        this.tronWeb.fullNode.request(\"wallet/getchainparameters\", {}, \"post\").then(function (t) {\n          var n = t.chainParameter;\n          e(null, void 0 === n ? [] : n);\n        }).catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getAccountResources\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return t ? this.tronWeb.isAddress(e) ? void this.tronWeb.fullNode.request(\"wallet/getaccountresource\", {\n          address: this.tronWeb.address.toHex(e)\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        }) : t(\"Invalid address provided\") : this.injectPromise(this.getAccountResources, e);\n      }\n    }, {\n      key: \"getExchangeByID\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return t ? !Le.isInteger(e) || e < 0 ? t(\"Invalid exchangeID provided\") : void this.tronWeb.fullNode.request(\"wallet/getexchangebyid\", {\n          id: e\n        }, \"post\").then(function (e) {\n          t(null, e);\n        }).catch(function (e) {\n          return t(e);\n        }) : this.injectPromise(this.getExchangeByID, e);\n      }\n    }, {\n      key: \"listExchanges\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.listExchanges);\n        this.tronWeb.fullNode.request(\"wallet/listexchanges\", {}, \"post\").then(function (t) {\n          var n = t.exchanges;\n          e(null, void 0 === n ? [] : n);\n        }, \"post\").catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"listExchangesPaginated\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10,\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (Le.isFunction(t) && (n = t, t = 0), Le.isFunction(e) && (n = e, e = 10), !n) return this.injectPromise(this.listExchangesPaginated, e, t);\n        this.tronWeb.fullNode.request(\"wallet/getpaginatedexchangelist\", {\n          limit: e,\n          offset: t\n        }, \"post\").then(function (e) {\n          var t = e.exchanges;\n          n(null, void 0 === t ? [] : t);\n        }).catch(function (e) {\n          return n(e);\n        });\n      }\n    }, {\n      key: \"getNodeInfo\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!e) return this.injectPromise(this.getNodeInfo);\n        this.tronWeb.fullNode.request(\"wallet/getnodeinfo\", {}, \"post\").then(function (t) {\n          e(null, t);\n        }, \"post\").catch(function (t) {\n          return e(t);\n        });\n      }\n    }, {\n      key: \"getTokenListByName\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return n ? (Le.isInteger(t) && (t = t.toString()), Le.isString(t) && t.length ? void this.tronWeb.fullNode.request(\"wallet/getassetissuelistbyname\", {\n          value: this.tronWeb.fromUtf8(t)\n        }, \"post\").then(function (t) {\n          if (Array.isArray(t.assetIssue)) n(null, t.assetIssue.map(function (t) {\n            return e._parseToken(t);\n          }));else if (!t.name) return n(\"Token does not exist\");\n          n(null, e._parseToken(t));\n        }).catch(function (e) {\n          return n(e);\n        }) : n(\"Invalid token ID provided\")) : this.injectPromise(this.getTokenListByName, t);\n      }\n    }, {\n      key: \"getTokenByID\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return n ? (Le.isInteger(t) && (t = t.toString()), Le.isString(t) && t.length ? void this.tronWeb.fullNode.request(\"wallet/getassetissuebyid\", {\n          value: t\n        }, \"post\").then(function (t) {\n          if (!t.name) return n(\"Token does not exist\");\n          n(null, e._parseToken(t));\n        }).catch(function (e) {\n          return n(e);\n        }) : n(\"Invalid token ID provided\")) : this.injectPromise(this.getTokenByID, t);\n      }\n    }, {\n      key: \"getReward\",\n      value: (o = f()(l.a.mark(function e(t) {\n        var n,\n            r,\n            i = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                return n = i.length > 1 && void 0 !== i[1] ? i[1] : {}, r = i.length > 2 && void 0 !== i[2] && i[2], n.confirmed = !0, e.abrupt(\"return\", this._getReward(t, n, r));\n\n              case 4:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e) {\n        return o.apply(this, arguments);\n      })\n    }, {\n      key: \"getUnconfirmedReward\",\n      value: (s = f()(l.a.mark(function e(t) {\n        var n,\n            r,\n            i = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                return n = i.length > 1 && void 0 !== i[1] ? i[1] : {}, r = i.length > 2 && void 0 !== i[2] && i[2], n.confirmed = !1, e.abrupt(\"return\", this._getReward(t, n, r));\n\n              case 4:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e) {\n        return s.apply(this, arguments);\n      })\n    }, {\n      key: \"getBrokerage\",\n      value: (i = f()(l.a.mark(function e(t) {\n        var n,\n            r,\n            i = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                return n = i.length > 1 && void 0 !== i[1] ? i[1] : {}, r = i.length > 2 && void 0 !== i[2] && i[2], n.confirmed = !0, e.abrupt(\"return\", this._getBrokerage(t, n, r));\n\n              case 4:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e) {\n        return i.apply(this, arguments);\n      })\n    }, {\n      key: \"getUnconfirmedBrokerage\",\n      value: (r = f()(l.a.mark(function e(t) {\n        var n,\n            r,\n            i = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                return n = i.length > 1 && void 0 !== i[1] ? i[1] : {}, r = i.length > 2 && void 0 !== i[2] && i[2], n.confirmed = !1, e.abrupt(\"return\", this._getBrokerage(t, n, r));\n\n              case 4:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e) {\n        return r.apply(this, arguments);\n      })\n    }, {\n      key: \"_getReward\",\n      value: (n = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = s.length > 0 && void 0 !== s[0] ? s[0] : this.tronWeb.defaultAddress.hex, n = s.length > 1 ? s[1] : void 0, r = s.length > 2 && void 0 !== s[2] && s[2], Le.isFunction(n) && (r = n, n = {}), Le.isFunction(t) ? (r = t, t = this.tronWeb.defaultAddress.hex) : Le.isObject(t) && (n = t, t = this.tronWeb.defaultAddress.hex), r) {\n                  e.next = 7;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this._getReward, t, n));\n\n              case 7:\n                if (!this.validator.notValid([{\n                  name: \"origin\",\n                  type: \"address\",\n                  value: t\n                }], r)) {\n                  e.next = 9;\n                  break;\n                }\n\n                return e.abrupt(\"return\");\n\n              case 9:\n                i = {\n                  address: ct(t)\n                }, this.tronWeb[n.confirmed ? \"solidityNode\" : \"fullNode\"].request(\"wallet\".concat(n.confirmed ? \"solidity\" : \"\", \"/getReward\"), i, \"post\").then(function () {\n                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n                  if (void 0 === e.reward) return r(\"Not found.\");\n                  r(null, e.reward);\n                }).catch(function (e) {\n                  return r(e);\n                });\n\n              case 11:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function () {\n        return n.apply(this, arguments);\n      })\n    }, {\n      key: \"_getBrokerage\",\n      value: (t = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = s.length > 0 && void 0 !== s[0] ? s[0] : this.tronWeb.defaultAddress.hex, n = s.length > 1 ? s[1] : void 0, r = s.length > 2 && void 0 !== s[2] && s[2], Le.isFunction(n) && (r = n, n = {}), Le.isFunction(t) ? (r = t, t = this.tronWeb.defaultAddress.hex) : Le.isObject(t) && (n = t, t = this.tronWeb.defaultAddress.hex), r) {\n                  e.next = 7;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this._getBrokerage, t, n));\n\n              case 7:\n                if (!this.validator.notValid([{\n                  name: \"origin\",\n                  type: \"address\",\n                  value: t\n                }], r)) {\n                  e.next = 9;\n                  break;\n                }\n\n                return e.abrupt(\"return\");\n\n              case 9:\n                i = {\n                  address: ct(t)\n                }, this.tronWeb[n.confirmed ? \"solidityNode\" : \"fullNode\"].request(\"wallet\".concat(n.confirmed ? \"solidity\" : \"\", \"/getBrokerage\"), i, \"post\").then(function () {\n                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n                  if (void 0 === e.brokerage) return r(\"Not found.\");\n                  r(null, e.brokerage);\n                }).catch(function (e) {\n                  return r(e);\n                });\n\n              case 11:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function () {\n        return t.apply(this, arguments);\n      })\n    }], [{\n      key: \"verifySignature\",\n      value: function value(e, t, n) {\n        var r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];\n        e = e.replace(/^0x/, \"\"), n = n.replace(/^0x/, \"\");\n        var i = [].concat(R()(de(r ? \"\u0019TRON Signed Message:\\n32\" : ut)), R()(Le.code.hexStr2byteArray(e))),\n            s = ue(i),\n            o = le(s, {\n          recoveryParam: \"1c\" == n.substring(128, 130) ? 1 : 0,\n          r: \"0x\" + n.substring(0, 64),\n          s: \"0x\" + n.substring(64, 128)\n        }),\n            a = U + o.substr(2),\n            u = It.address.fromHex(a);\n        return u == It.address.fromHex(t);\n      }\n    }, {\n      key: \"signString\",\n      value: function value(e, t) {\n        var n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n        e = e.replace(/^0x/, \"\");\n        var r = new he(t),\n            i = [].concat(R()(de(n ? \"\u0019TRON Signed Message:\\n32\" : ut)), R()(Le.code.hexStr2byteArray(e))),\n            s = ue(i),\n            o = r.signDigest(s),\n            a = [\"0x\", o.r.substring(2), o.s.substring(2), Number(o.v).toString(16)].join(\"\");\n        return a;\n      }\n    }]), e;\n  }();\n\n  function lt(e, t) {\n    var n = Object.keys(e);\n\n    if (Object.getOwnPropertySymbols) {\n      var r = Object.getOwnPropertySymbols(e);\n      t && (r = r.filter(function (t) {\n        return Object.getOwnPropertyDescriptor(e, t).enumerable;\n      })), n.push.apply(n, r);\n    }\n\n    return n;\n  }\n\n  function ht(e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = null != arguments[t] ? arguments[t] : {};\n      t % 2 ? lt(n, !0).forEach(function (t) {\n        S()(e, t, n[t]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : lt(n).forEach(function (t) {\n        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));\n      });\n    }\n\n    return e;\n  }\n\n  var ft = function ft(e) {\n    return e.name + \"(\" + vt(e.inputs || []).join(\",\") + \")\";\n  },\n      vt = function vt(e) {\n    return e.map(function (e) {\n      return e.type;\n    });\n  },\n      pt = function pt(e, t) {\n    var n = e.map(function (e) {\n      return e.name;\n    }).filter(function (e) {\n      return !!e;\n    }),\n        r = e.map(function (e) {\n      return e.type;\n    });\n    return Le.abi.decodeParams(n, r, t);\n  },\n      gt = function () {\n    function e(t, n) {\n      b()(this, e), this.tronWeb = t.tronWeb, this.contract = t, this.abi = n, this.name = n.name || (n.name = n.type), this.inputs = n.inputs || [], this.outputs = n.outputs || [], this.functionSelector = ft(n), this.signature = this.tronWeb.sha3(this.functionSelector, !1).slice(0, 8), this.injectPromise = $e()(this), this.defaultOptions = {\n        feeLimit: 1e9,\n        callValue: 0,\n        userFeePercentage: 100,\n        shouldPollResponse: !1\n      };\n    }\n\n    var t, n, r;\n    return y()(e, [{\n      key: \"decodeInput\",\n      value: function value(e) {\n        return pt(this.inputs, \"0x\" + e);\n      }\n    }, {\n      key: \"onMethod\",\n      value: function value() {\n        for (var e = this, t = arguments.length, n = new Array(t), r = 0; r < t; r++) {\n          n[r] = arguments[r];\n        }\n\n        var i = vt(this.inputs);\n        return n.forEach(function (t, r) {\n          \"address\" == i[r] && (n[r] = e.tronWeb.address.toHex(t).replace(L, \"0x\")), \"address[]\" == i[r] && (n[r] = n[r].map(function (t) {\n            return e.tronWeb.address.toHex(t).replace(L, \"0x\");\n          }));\n        }), {\n          call: function call() {\n            for (var t = arguments.length, r = new Array(t), s = 0; s < t; s++) {\n              r[s] = arguments[s];\n            }\n\n            return e._call.apply(e, [i, n].concat(r));\n          },\n          send: function send() {\n            for (var t = arguments.length, r = new Array(t), s = 0; s < t; s++) {\n              r[s] = arguments[s];\n            }\n\n            return e._send.apply(e, [i, n].concat(r));\n          },\n          watch: function watch() {\n            return e._watch.apply(e, arguments);\n          }\n        };\n      }\n    }, {\n      key: \"_call\",\n      value: (r = f()(l.a.mark(function e(t, n) {\n        var r,\n            i,\n            s,\n            o,\n            a = this,\n            u = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (r = u.length > 2 && void 0 !== u[2] ? u[2] : {}, i = u.length > 3 && void 0 !== u[3] && u[3], Le.isFunction(r) && (i = r, r = {}), i) {\n                  e.next = 5;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this._call, t, n, r));\n\n              case 5:\n                if (t.length === n.length) {\n                  e.next = 7;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(\"Invalid argument count provided\"));\n\n              case 7:\n                if (this.contract.address) {\n                  e.next = 9;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(\"Smart contract is missing address\"));\n\n              case 9:\n                if (this.contract.deployed) {\n                  e.next = 11;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i(\"Calling smart contracts requires you to load the contract first\"));\n\n              case 11:\n                if (s = this.abi.stateMutability, [\"pure\", \"view\"].includes(s.toLowerCase())) {\n                  e.next = 14;\n                  break;\n                }\n\n                return e.abrupt(\"return\", i('Methods with state mutability \"'.concat(s, '\" must use send()')));\n\n              case 14:\n                r = ht({}, this.defaultOptions, {\n                  from: this.tronWeb.defaultAddress.hex\n                }, r), o = n.map(function (e, n) {\n                  return {\n                    type: t[n],\n                    value: e\n                  };\n                }), this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address, this.functionSelector, r, o, !!r.from && this.tronWeb.address.toHex(r.from), function (e, t) {\n                  if (e) return i(e);\n                  if (!Le.hasProperty(t, \"constant_result\")) return i(\"Failed to execute\");\n\n                  try {\n                    var n = t.constant_result[0].length;\n\n                    if (0 === n || n % 64 == 8) {\n                      var r = \"The call has been reverted or has thrown an error.\";\n\n                      if (0 !== n) {\n                        r += \" Error message: \";\n\n                        for (var s = \"\", o = t.constant_result[0].substring(8), u = 0; u < n - 8; u += 64) {\n                          s += a.tronWeb.toUtf8(o.substring(u, u + 64));\n                        }\n\n                        r += s.replace(/(\\u0000|\\u000b|\\f)+/g, \" \").replace(/ +/g, \" \").replace(/\\s+$/g, \"\");\n                      }\n\n                      return i(r);\n                    }\n\n                    var c = pt(a.outputs, \"0x\" + t.constant_result[0]);\n                    return 1 === c.length && (c = c[0]), i(null, c);\n                  } catch (e) {\n                    return i(e);\n                  }\n                });\n\n              case 17:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function (e, t) {\n        return r.apply(this, arguments);\n      })\n    }, {\n      key: \"_send\",\n      value: (n = f()(l.a.mark(function e(t, n) {\n        var r,\n            i,\n            s,\n            o,\n            a,\n            u,\n            c,\n            d,\n            h,\n            v,\n            p,\n            g = this,\n            b = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (r = b.length > 2 && void 0 !== b[2] ? b[2] : {}, i = b.length > 3 && void 0 !== b[3] ? b[3] : this.tronWeb.defaultPrivateKey, s = b.length > 4 && void 0 !== b[4] && b[4], Le.isFunction(i) && (s = i, i = this.tronWeb.defaultPrivateKey), Le.isFunction(r) && (s = r, r = {}), s) {\n                  e.next = 7;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this._send, t, n, r, i));\n\n              case 7:\n                if (t.length === n.length) {\n                  e.next = 9;\n                  break;\n                }\n\n                throw new Error(\"Invalid argument count provided\");\n\n              case 9:\n                if (this.contract.address) {\n                  e.next = 11;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Smart contract is missing address\"));\n\n              case 11:\n                if (this.contract.deployed) {\n                  e.next = 13;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Calling smart contracts requires you to load the contract first\"));\n\n              case 13:\n                if (o = this.abi.stateMutability, ![\"pure\", \"view\"].includes(o.toLowerCase())) {\n                  e.next = 16;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s('Methods with state mutability \"'.concat(o, '\" must use call()')));\n\n              case 16:\n                return [\"payable\"].includes(o.toLowerCase()) || (r.callValue = 0), r = ht({}, this.defaultOptions, {\n                  from: this.tronWeb.defaultAddress.hex\n                }, r), a = n.map(function (e, n) {\n                  return {\n                    type: t[n],\n                    value: e\n                  };\n                }), e.prev = 19, u = i ? this.tronWeb.address.fromPrivateKey(i) : this.tronWeb.defaultAddress.base58, e.next = 23, this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address, this.functionSelector, r, a, this.tronWeb.address.toHex(u));\n\n              case 23:\n                if ((c = e.sent).result && c.result.result) {\n                  e.next = 26;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Unknown error: \" + JSON.stringify(c, null, 2)));\n\n              case 26:\n                return e.next = 28, this.tronWeb.trx.sign(c.transaction, i);\n\n              case 28:\n                if ((d = e.sent).signature) {\n                  e.next = 33;\n                  break;\n                }\n\n                if (i) {\n                  e.next = 32;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(\"Transaction was not signed properly\"));\n\n              case 32:\n                return e.abrupt(\"return\", s(\"Invalid private key provided\"));\n\n              case 33:\n                return e.next = 35, this.tronWeb.trx.sendRawTransaction(d);\n\n              case 35:\n                if (!(h = e.sent).code) {\n                  e.next = 40;\n                  break;\n                }\n\n                return v = {\n                  error: h.code,\n                  message: h.code\n                }, h.message && (v.message = this.tronWeb.toUtf8(h.message)), e.abrupt(\"return\", s(v));\n\n              case 40:\n                if (r.shouldPollResponse) {\n                  e.next = 42;\n                  break;\n                }\n\n                return e.abrupt(\"return\", s(null, d.txID));\n\n              case 42:\n                (p = function () {\n                  var e = f()(l.a.mark(function e() {\n                    var t,\n                        n,\n                        i,\n                        o = arguments;\n                    return l.a.wrap(function (e) {\n                      for (;;) {\n                        switch (e.prev = e.next) {\n                          case 0:\n                            if (20 !== (t = o.length > 0 && void 0 !== o[0] ? o[0] : 0)) {\n                              e.next = 3;\n                              break;\n                            }\n\n                            return e.abrupt(\"return\", s({\n                              error: \"Cannot find result in solidity node\",\n                              transaction: d\n                            }));\n\n                          case 3:\n                            return e.next = 5, g.tronWeb.trx.getTransactionInfo(d.txID);\n\n                          case 5:\n                            if (n = e.sent, Object.keys(n).length) {\n                              e.next = 8;\n                              break;\n                            }\n\n                            return e.abrupt(\"return\", setTimeout(function () {\n                              p(t + 1);\n                            }, 3e3));\n\n                          case 8:\n                            if (!n.result || \"FAILED\" !== n.result) {\n                              e.next = 10;\n                              break;\n                            }\n\n                            return e.abrupt(\"return\", s({\n                              error: g.tronWeb.toUtf8(n.resMessage),\n                              transaction: d,\n                              output: n\n                            }));\n\n                          case 10:\n                            if (Le.hasProperty(n, \"contractResult\")) {\n                              e.next = 12;\n                              break;\n                            }\n\n                            return e.abrupt(\"return\", s({\n                              error: \"Failed to execute: \" + JSON.stringify(n, null, 2),\n                              transaction: d,\n                              output: n\n                            }));\n\n                          case 12:\n                            if (!r.rawResponse) {\n                              e.next = 14;\n                              break;\n                            }\n\n                            return e.abrupt(\"return\", s(null, n));\n\n                          case 14:\n                            if (1 === (i = pt(g.outputs, \"0x\" + n.contractResult[0])).length && (i = i[0]), !r.keepTxID) {\n                              e.next = 18;\n                              break;\n                            }\n\n                            return e.abrupt(\"return\", s(null, [d.txID, i]));\n\n                          case 18:\n                            return e.abrupt(\"return\", s(null, i));\n\n                          case 19:\n                          case \"end\":\n                            return e.stop();\n                        }\n                      }\n                    }, e);\n                  }));\n                  return function () {\n                    return e.apply(this, arguments);\n                  };\n                }())(), e.next = 49;\n                break;\n\n              case 46:\n                return e.prev = 46, e.t0 = e.catch(19), e.abrupt(\"return\", s(e.t0));\n\n              case 49:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[19, 46]]);\n      })), function (e, t) {\n        return n.apply(this, arguments);\n      })\n    }, {\n      key: \"_watch\",\n      value: (t = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u = this,\n            c = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = c.length > 0 && void 0 !== c[0] ? c[0] : {}, n = c.length > 1 && void 0 !== c[1] && c[1], Le.isFunction(t) && (n = t, t = {}), Le.isFunction(n)) {\n                  e.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Expected callback to be provided\");\n\n              case 5:\n                if (this.contract.address) {\n                  e.next = 7;\n                  break;\n                }\n\n                return e.abrupt(\"return\", n(\"Smart contract is missing address\"));\n\n              case 7:\n                if (this.abi.type && /event/i.test(this.abi.type)) {\n                  e.next = 9;\n                  break;\n                }\n\n                return e.abrupt(\"return\", n(\"Invalid method type for event watching\"));\n\n              case 9:\n                if (this.tronWeb.eventServer) {\n                  e.next = 11;\n                  break;\n                }\n\n                return e.abrupt(\"return\", n(\"No event server configured\"));\n\n              case 11:\n                return r = !1, i = !1, s = Date.now() - 1e3, o = function () {\n                  var e = f()(l.a.mark(function e() {\n                    var n, r, o, a, c, d;\n                    return l.a.wrap(function (e) {\n                      for (;;) {\n                        switch (e.prev = e.next) {\n                          case 0:\n                            return e.prev = 0, n = {\n                              since: s,\n                              eventName: u.name,\n                              sort: \"block_timestamp\",\n                              blockNumber: \"latest\",\n                              filters: t.filters\n                            }, t.resourceNode && (/full/i.test(t.resourceNode) ? n.onlyUnconfirmed = !0 : n.onlyConfirmed = !0), e.next = 5, u.tronWeb.event.getEventsByContractAddress(u.contract.address, n);\n\n                          case 5:\n                            return r = e.sent, o = r.sort(function (e, t) {\n                              return t.block - e.block;\n                            }), a = et()(o, 1), c = a[0], d = r.filter(function (e, n) {\n                              return (!t.resourceNode || !e.resourceNode || t.resourceNode.toLowerCase() === e.resourceNode.toLowerCase()) && !r.slice(0, n).some(function (t) {\n                                return JSON.stringify(t) == JSON.stringify(e);\n                              }) && (!i || e.block > i);\n                            }), c && (i = c.block), e.abrupt(\"return\", d);\n\n                          case 12:\n                            return e.prev = 12, e.t0 = e.catch(0), e.abrupt(\"return\", Promise.reject(e.t0));\n\n                          case 15:\n                          case \"end\":\n                            return e.stop();\n                        }\n                      }\n                    }, e, null, [[0, 12]]);\n                  }));\n                  return function () {\n                    return e.apply(this, arguments);\n                  };\n                }(), a = function a() {\n                  r && clearInterval(r), r = setInterval(function () {\n                    o().then(function (e) {\n                      return e.forEach(function (e) {\n                        n(null, Le.parseEvent(e, u.abi));\n                      });\n                    }).catch(function (e) {\n                      return n(e);\n                    });\n                  }, 3e3);\n                }, e.next = 18, o();\n\n              case 18:\n                return a(), e.abrupt(\"return\", {\n                  start: a(),\n                  stop: function stop() {\n                    r && (clearInterval(r), r = !1);\n                  }\n                });\n\n              case 20:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function () {\n        return t.apply(this, arguments);\n      })\n    }]), e;\n  }(),\n      bt = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n          n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],\n          r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n      if (b()(this, e), !t || !t instanceof It) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t, this.injectPromise = $e()(this), this.address = r, this.abi = n, this.eventListener = !1, this.bytecode = !1, this.deployed = !1, this.lastBlock = !1, this.methods = {}, this.methodInstances = {}, this.props = [], this.tronWeb.isAddress(r) ? this.deployed = !0 : this.address = !1, this.loadAbi(n);\n    }\n\n    var t, n, r, i;\n    return y()(e, [{\n      key: \"_getEvents\",\n      value: (i = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r,\n            i,\n            s,\n            o,\n            a = this,\n            u = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                return t = u.length > 0 && void 0 !== u[0] ? u[0] : {}, e.next = 3, this.tronWeb.event.getEventsByContractAddress(this.address, t);\n\n              case 3:\n                return n = e.sent, r = n.sort(function (e, t) {\n                  return t.block - e.block;\n                }), i = et()(r, 1), s = i[0], o = n.filter(function (e, r) {\n                  return (!t.resourceNode || !e.resourceNode || t.resourceNode.toLowerCase() === e.resourceNode.toLowerCase()) && !n.slice(0, r).some(function (t) {\n                    return JSON.stringify(t) == JSON.stringify(e);\n                  }) && (!a.lastBlock || e.block > a.lastBlock);\n                }), s && (this.lastBlock = s.block), e.abrupt(\"return\", o);\n\n              case 8:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function () {\n        return i.apply(this, arguments);\n      })\n    }, {\n      key: \"_startEventListener\",\n      value: (r = f()(l.a.mark(function e() {\n        var t,\n            n,\n            r = this,\n            i = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = i.length > 0 && void 0 !== i[0] ? i[0] : {}, n = i.length > 1 ? i[1] : void 0, Le.isFunction(t) && (n = t, t = {}), this.eventListener && clearInterval(this.eventListener), this.tronWeb.eventServer) {\n                  e.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Event server is not configured\");\n\n              case 6:\n                if (this.address) {\n                  e.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Contract is not configured with an address\");\n\n              case 8:\n                return this.eventCallback = n, e.next = 11, this._getEvents(t);\n\n              case 11:\n                this.eventListener = setInterval(function () {\n                  r._getEvents(t).then(function (e) {\n                    return e.forEach(function (e) {\n                      r.eventCallback && r.eventCallback(e);\n                    });\n                  }).catch(function (e) {\n                    console.error(\"Failed to get event list\", e);\n                  });\n                }, 3e3);\n\n              case 12:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function () {\n        return r.apply(this, arguments);\n      })\n    }, {\n      key: \"_stopEventListener\",\n      value: function value() {\n        this.eventListener && (clearInterval(this.eventListener), this.eventListener = !1, this.eventCallback = !1);\n      }\n    }, {\n      key: \"hasProperty\",\n      value: function value(e) {\n        return this.hasOwnProperty(e) || this.__proto__.hasOwnProperty(e);\n      }\n    }, {\n      key: \"loadAbi\",\n      value: function value(e) {\n        var t = this;\n        this.abi = e, this.methods = {}, this.props.forEach(function (e) {\n          return delete t[e];\n        }), e.forEach(function (e) {\n          if (e.type && !/constructor/i.test(e.type)) {\n            var n = new gt(t, e),\n                r = n.onMethod.bind(n),\n                i = n.name,\n                s = n.functionSelector,\n                o = n.signature;\n            t.methods[i] = r, t.methods[s] = r, t.methods[o] = r, t.methodInstances[i] = n, t.methodInstances[s] = n, t.methodInstances[o] = n, t.hasProperty(i) || (t[i] = r, t.props.push(i)), t.hasProperty(s) || (t[s] = r, t.props.push(s)), t.hasProperty(o) || (t[o] = r, t.props.push(o));\n          }\n        });\n      }\n    }, {\n      key: \"decodeInput\",\n      value: function value(e) {\n        var t = e.substring(0, 8),\n            n = e.substring(8);\n        if (!this.methodInstances[t]) throw new Error(\"Contract method \" + t + \" not found\");\n        return {\n          name: this.methodInstances[t].name,\n          params: this.methodInstances[t].decodeInput(n)\n        };\n      }\n    }, {\n      key: \"new\",\n      value: (n = f()(l.a.mark(function e(t) {\n        var n,\n            r,\n            i,\n            s,\n            o,\n            a,\n            u = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (n = u.length > 1 && void 0 !== u[1] ? u[1] : this.tronWeb.defaultPrivateKey, r = u.length > 2 && void 0 !== u[2] && u[2], Le.isFunction(n) && (r = n, n = this.tronWeb.defaultPrivateKey), r) {\n                  e.next = 5;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.new, t, n));\n\n              case 5:\n                return e.prev = 5, i = this.tronWeb.address.fromPrivateKey(n), e.next = 9, this.tronWeb.transactionBuilder.createSmartContract(t, i);\n\n              case 9:\n                return s = e.sent, e.next = 12, this.tronWeb.trx.sign(s, n);\n\n              case 12:\n                return o = e.sent, e.next = 15, this.tronWeb.trx.sendRawTransaction(o);\n\n              case 15:\n                if (!(a = e.sent).code) {\n                  e.next = 18;\n                  break;\n                }\n\n                return e.abrupt(\"return\", r({\n                  error: a.code,\n                  message: this.tronWeb.toUtf8(a.message)\n                }));\n\n              case 18:\n                return e.next = 20, Le.sleep(3e3);\n\n              case 20:\n                return e.abrupt(\"return\", this.at(o.contract_address, r));\n\n              case 23:\n                return e.prev = 23, e.t0 = e.catch(5), e.abrupt(\"return\", r(e.t0));\n\n              case 26:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[5, 23]]);\n      })), function (e) {\n        return n.apply(this, arguments);\n      })\n    }, {\n      key: \"at\",\n      value: (t = f()(l.a.mark(function e(t) {\n        var n,\n            r,\n            i = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (n = i.length > 1 && void 0 !== i[1] && i[1]) {\n                  e.next = 3;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.at, t));\n\n              case 3:\n                return e.prev = 3, e.next = 6, this.tronWeb.trx.getContract(t);\n\n              case 6:\n                if ((r = e.sent).contract_address) {\n                  e.next = 9;\n                  break;\n                }\n\n                return e.abrupt(\"return\", n(\"Unknown error: \" + JSON.stringify(r, null, 2)));\n\n              case 9:\n                return this.address = r.contract_address, this.bytecode = r.bytecode, this.deployed = !0, this.loadAbi(r.abi ? r.abi.entrys : []), e.abrupt(\"return\", n(null, this));\n\n              case 16:\n                if (e.prev = 16, e.t0 = e.catch(3), !e.t0.toString().includes(\"does not exist\")) {\n                  e.next = 20;\n                  break;\n                }\n\n                return e.abrupt(\"return\", n(\"Contract has not been deployed on the network\"));\n\n              case 20:\n                return e.abrupt(\"return\", n(e.t0));\n\n              case 21:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[3, 16]]);\n      })), function (e) {\n        return t.apply(this, arguments);\n      })\n    }, {\n      key: \"events\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        if (Le.isFunction(e) && (t = e, e = {}), !Le.isFunction(t)) throw new Error(\"Callback function expected\");\n        var n = this;\n        return {\n          start: function start() {\n            var r = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n            return r ? (n._startEventListener(e, t).then(function () {\n              r();\n            }).catch(function (e) {\n              r(e);\n            }), this) : (n._startEventListener(e, t), this);\n          },\n          stop: function stop() {\n            n._stopEventListener();\n          }\n        };\n      }\n    }]), e;\n  }(),\n      mt = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n          n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      if (b()(this, e), !t || !t instanceof It) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t, this.pluginNoOverride = [\"register\"], this.disablePlugins = n.disablePlugins;\n    }\n\n    return y()(e, [{\n      key: \"register\",\n      value: function value(e, t) {\n        var n = {\n          requires: \"0.0.0\",\n          components: {}\n        },\n            r = {\n          libs: [],\n          plugged: [],\n          skipped: []\n        };\n        if (this.disablePlugins) return r.error = \"This instance of TronWeb has plugins disabled.\", r;\n        var i = new e(this.tronWeb);\n        if (Le.isFunction(i.pluginInterface) && (n = i.pluginInterface(t)), !Xe.a.satisfies(It.version, n.requires)) throw new Error(\"The plugin is not compatible with this version of TronWeb\");\n\n        if (n.fullClass) {\n          var s = i.constructor.name,\n              o = s.substring(0, 1).toLowerCase() + s.substring(1);\n          s !== o && (It[s] = e, this.tronWeb[o] = i, r.libs.push(s));\n        } else for (var a in n.components) {\n          if (this.tronWeb.hasOwnProperty(a)) {\n            var u = n.components[a],\n                c = this.tronWeb[a].pluginNoOverride || [];\n\n            for (var d in u) {\n              \"constructor\" === d || this.tronWeb[a][d] && (c.includes(d) || /^_/.test(d)) ? r.skipped.push(d) : (this.tronWeb[a][d] = u[d].bind(this.tronWeb[a]), r.plugged.push(d));\n            }\n          }\n        }\n\n        return r;\n      }\n    }]), e;\n  }(),\n      yt = n(21),\n      kt = n.n(yt),\n      xt = function () {\n    function e() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (b()(this, e), !(t && t instanceof It)) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = t, this.injectPromise = $e()(this);\n    }\n\n    return y()(e, [{\n      key: \"setServer\",\n      value: function value() {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"healthcheck\";\n        if (!t) return this.tronWeb.eventServer = !1;\n        if (Le.isString(t) && (t = new ze.HttpProvider(t)), !this.tronWeb.isValidProvider(t)) throw new Error(\"Invalid event server provided\");\n        this.tronWeb.eventServer = t, this.tronWeb.eventServer.isConnected = function () {\n          return e.tronWeb.eventServer.request(n).then(function () {\n            return !0;\n          }).catch(function () {\n            return !1;\n          });\n        };\n      }\n    }, {\n      key: \"getEventsByContractAddress\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n            r = Object.assign({\n          sinceTimestamp: 0,\n          eventName: !1,\n          blockNumber: !1,\n          size: 20,\n          page: 1\n        }, t),\n            i = r.sinceTimestamp,\n            s = r.since,\n            o = r.fromTimestamp,\n            a = r.eventName,\n            u = r.blockNumber,\n            c = r.size,\n            d = r.page,\n            l = r.onlyConfirmed,\n            h = r.onlyUnconfirmed,\n            f = r.previousLastEventFingerprint,\n            v = r.previousFingerprint,\n            g = r.fingerprint,\n            b = r.rawResponse,\n            m = r.sort,\n            y = r.filters;\n        if (!n) return this.injectPromise(this.getEventsByContractAddress, e, t);\n        if (o = o || i || s, !this.tronWeb.eventServer) return n(\"No event server configured\");\n        var k = [];\n        if (!this.tronWeb.isAddress(e)) return n(\"Invalid contract address provided\");\n        if (a && !e) return n(\"Usage of event name filtering requires a contract address\");\n        if (void 0 !== o && !Le.isInteger(o)) return n(\"Invalid fromTimestamp provided\");\n        if (!Le.isInteger(c)) return n(\"Invalid size provided\");\n        if (c > 200 && (console.warn(\"Defaulting to maximum accepted size: 200\"), c = 200), !Le.isInteger(d)) return n(\"Invalid page provided\");\n        if (u && !a) return n(\"Usage of block number filtering requires an event name\");\n        e && k.push(this.tronWeb.address.fromHex(e)), a && k.push(a), u && k.push(u);\n        var x = {\n          size: c,\n          page: d\n        };\n        return \"object\" === p()(y) && Object.keys(y).length > 0 && (x.filters = JSON.stringify(y)), o && (x.fromTimestamp = x.since = o), l && (x.onlyConfirmed = l), h && !l && (x.onlyUnconfirmed = h), m && (x.sort = m), (g = g || v || f) && (x.fingerprint = g), this.tronWeb.eventServer.request(\"event/contract/\".concat(k.join(\"/\"), \"?\").concat(kt.a.stringify(x))).then(function () {\n          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n          return e ? Le.isArray(e) ? n(null, !0 === b ? e : e.map(function (e) {\n            return Le.mapEvent(e);\n          })) : n(e) : n(\"Unknown error occurred\");\n        }).catch(function (e) {\n          return n(e.response && e.response.data || e);\n        });\n      }\n    }, {\n      key: \"getEventsByTransactionID\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return Le.isFunction(t) && (n = t, t = {}), n ? this.tronWeb.eventServer ? this.tronWeb.eventServer.request(\"event/transaction/\".concat(e)).then(function () {\n          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n          return e ? Le.isArray(e) ? n(null, !0 === t.rawResponse ? e : e.map(function (e) {\n            return Le.mapEvent(e);\n          })) : n(e) : n(\"Unknown error occurred\");\n        }).catch(function (e) {\n          return n(e.response && e.response.data || e);\n        }) : n(\"No event server configured\") : this.injectPromise(this.getEventsByTransactionID, e, t);\n      }\n    }]), e;\n  }();\n\n  n.d(t, \"default\", function () {\n    return It;\n  });\n\n  var wt = \"3.5.0\",\n      It = function (e) {\n    function t() {\n      var e,\n          n,\n          r = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n          i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n          s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n          o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n      return b()(this, t), e = x()(this, I()(t).call(this)), \"object\" === p()(r) && (r.fullNode || r.fullHost) ? (n = r.fullNode || r.fullHost, i = r.solidityNode || r.fullHost, s = r.eventServer || r.fullHost, o = r.privateKey) : n = r, Le.isString(n) && (n = new ze.HttpProvider(n)), Le.isString(i) && (i = new ze.HttpProvider(i)), Le.isString(s) && (s = new ze.HttpProvider(s)), e.event = new xt(A()(e)), e.transactionBuilder = new st(A()(e)), e.trx = new dt(A()(e)), e.plugin = new mt(A()(e), r), e.utils = Le, e.setFullNode(n), e.setSolidityNode(i), e.setEventServer(s), e.providers = ze, e.BigNumber = Re.a, e.defaultBlock = !1, e.defaultPrivateKey = !1, e.defaultAddress = {\n        hex: !1,\n        base58: !1\n      }, [\"sha3\", \"toHex\", \"toUtf8\", \"fromUtf8\", \"toAscii\", \"fromAscii\", \"toDecimal\", \"fromDecimal\", \"toSun\", \"fromSun\", \"toBigNumber\", \"isAddress\", \"createAccount\", \"address\", \"version\"].forEach(function (n) {\n        e[n] = t[n];\n      }), o && e.setPrivateKey(o), e.fullnodeVersion = wt, e.injectPromise = $e()(A()(e)), e;\n    }\n\n    var n, r, i;\n    return _()(t, e), y()(t, [{\n      key: \"getFullnodeVersion\",\n      value: (i = f()(l.a.mark(function e() {\n        var t;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                return e.prev = 0, e.next = 3, this.trx.getNodeInfo();\n\n              case 3:\n                t = e.sent, this.fullnodeVersion = t.configNodeInfo.codeVersion, 2 === this.fullnodeVersion.split(\".\").length && (this.fullnodeVersion += \".0\"), e.next = 11;\n                break;\n\n              case 8:\n                e.prev = 8, e.t0 = e.catch(0), this.fullnodeVersion = wt;\n\n              case 11:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this, [[0, 8]]);\n      })), function () {\n        return i.apply(this, arguments);\n      })\n    }, {\n      key: \"setDefaultBlock\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if ([!1, \"latest\", \"earliest\", 0].includes(e)) return this.defaultBlock = e;\n        if (!Le.isInteger(e) || !e) throw new Error(\"Invalid block ID provided\");\n        this.defaultBlock = Math.abs(e);\n      }\n    }, {\n      key: \"setPrivateKey\",\n      value: function value(e) {\n        try {\n          this.setAddress(this.address.fromPrivateKey(e));\n        } catch (e) {\n          throw new Error(\"Invalid private key provided\");\n        }\n\n        this.defaultPrivateKey = e, this.emit(\"privateKeyChanged\", e);\n      }\n    }, {\n      key: \"setAddress\",\n      value: function value(e) {\n        if (!this.isAddress(e)) throw new Error(\"Invalid address provided\");\n        var t = this.address.toHex(e),\n            n = this.address.fromHex(e);\n        this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== n && (this.defaultPrivateKey = !1), this.defaultAddress = {\n          hex: t,\n          base58: n\n        }, this.emit(\"addressChanged\", {\n          hex: t,\n          base58: n\n        });\n      }\n    }, {\n      key: \"fullnodeSatisfies\",\n      value: function value(e) {\n        return Xe.a.satisfies(this.fullnodeVersion, e);\n      }\n    }, {\n      key: \"isValidProvider\",\n      value: function value(e) {\n        return Object.values(ze).some(function (t) {\n          return e instanceof t;\n        });\n      }\n    }, {\n      key: \"setFullNode\",\n      value: function value(e) {\n        if (Le.isString(e) && (e = new ze.HttpProvider(e)), !this.isValidProvider(e)) throw new Error(\"Invalid full node provided\");\n        this.fullNode = e, this.fullNode.setStatusPage(\"wallet/getnowblock\"), this.getFullnodeVersion();\n      }\n    }, {\n      key: \"setSolidityNode\",\n      value: function value(e) {\n        if (Le.isString(e) && (e = new ze.HttpProvider(e)), !this.isValidProvider(e)) throw new Error(\"Invalid solidity node provided\");\n        this.solidityNode = e, this.solidityNode.setStatusPage(\"walletsolidity/getnowblock\");\n      }\n    }, {\n      key: \"setEventServer\",\n      value: function value() {\n        var e;\n        (e = this.event).setServer.apply(e, arguments);\n      }\n    }, {\n      key: \"currentProviders\",\n      value: function value() {\n        return {\n          fullNode: this.fullNode,\n          solidityNode: this.solidityNode,\n          eventServer: this.eventServer\n        };\n      }\n    }, {\n      key: \"currentProvider\",\n      value: function value() {\n        return this.currentProviders();\n      }\n    }, {\n      key: \"getEventResult\",\n      value: function value() {\n        for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++) {\n          n[r] = arguments[r];\n        }\n\n        return \"object\" !== p()(n[1]) && (n[1] = {\n          sinceTimestamp: n[1] || 0,\n          eventName: n[2] || !1,\n          blockNumber: n[3] || !1,\n          size: n[4] || 20,\n          page: n[5] || 1\n        }, n.splice(2, 4), Le.isFunction(n[2]) || (Le.isFunction(n[1].page) ? (n[2] = n[1].page, n[1].page = 1) : Le.isFunction(n[1].size) && (n[2] = n[1].size, n[1].size = 20, n[1].page = 1))), (e = this.event).getEventsByContractAddress.apply(e, n);\n      }\n    }, {\n      key: \"getEventByTransactionID\",\n      value: function value() {\n        var e;\n        return (e = this.event).getEventsByTransactionID.apply(e, arguments);\n      }\n    }, {\n      key: \"contract\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return new bt(this, e, t);\n      }\n    }, {\n      key: \"isConnected\",\n      value: (r = f()(l.a.mark(function e() {\n        var t,\n            n = arguments;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                if (t = n.length > 0 && void 0 !== n[0] && n[0]) {\n                  e.next = 3;\n                  break;\n                }\n\n                return e.abrupt(\"return\", this.injectPromise(this.isConnected));\n\n              case 3:\n                return e.t0 = t, e.next = 6, this.fullNode.isConnected();\n\n              case 6:\n                return e.t1 = e.sent, e.next = 9, this.solidityNode.isConnected();\n\n              case 9:\n                if (e.t2 = e.sent, e.t3 = this.eventServer, !e.t3) {\n                  e.next = 15;\n                  break;\n                }\n\n                return e.next = 14, this.eventServer.isConnected();\n\n              case 14:\n                e.t3 = e.sent;\n\n              case 15:\n                return e.t4 = e.t3, e.t5 = {\n                  fullNode: e.t1,\n                  solidityNode: e.t2,\n                  eventServer: e.t4\n                }, e.abrupt(\"return\", (0, e.t0)(null, e.t5));\n\n              case 18:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e, this);\n      })), function () {\n        return r.apply(this, arguments);\n      })\n    }], [{\n      key: \"sha3\",\n      value: function value(e) {\n        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n        return (t ? \"0x\" : \"\") + ue(Buffer.from(e, \"utf-8\")).toString().substring(2);\n      }\n    }, {\n      key: \"toHex\",\n      value: function value(e) {\n        if (Le.isBoolean(e)) return t.fromDecimal(+e);\n        if (Le.isBigNumber(e)) return t.fromDecimal(e);\n        if (\"object\" === p()(e)) return t.fromUtf8(JSON.stringify(e));\n\n        if (Le.isString(e)) {\n          if (/^(-|)0x/.test(e)) return e;\n          if (!isFinite(e)) return t.fromUtf8(e);\n        }\n\n        var n = t.fromDecimal(e);\n        if (\"0xNaN\" === n) throw new Error(\"The passed value is not convertible to a hex string\");\n        return n;\n      }\n    }, {\n      key: \"toUtf8\",\n      value: function value(e) {\n        if (Le.isHex(e)) return e = e.replace(/^0x/, \"\"), Buffer.from(e, \"hex\").toString(\"utf8\");\n        throw new Error(\"The passed value is not a valid hex string\");\n      }\n    }, {\n      key: \"fromUtf8\",\n      value: function value(e) {\n        if (!Le.isString(e)) throw new Error(\"The passed value is not a valid utf-8 string\");\n        return \"0x\" + Buffer.from(e, \"utf8\").toString(\"hex\");\n      }\n    }, {\n      key: \"toAscii\",\n      value: function value(e) {\n        if (Le.isHex(e)) {\n          var t = \"\",\n              n = 0,\n              r = e.length;\n\n          for (\"0x\" === e.substring(0, 2) && (n = 2); n < r; n += 2) {\n            var i = parseInt(e.substr(n, 2), 16);\n            t += String.fromCharCode(i);\n          }\n\n          return t;\n        }\n\n        throw new Error(\"The passed value is not a valid hex string\");\n      }\n    }, {\n      key: \"fromAscii\",\n      value: function value(e, t) {\n        if (!Le.isString(e)) throw new Error(\"The passed value is not a valid utf-8 string\");\n        return \"0x\" + Buffer.from(e, \"ascii\").toString(\"hex\").padEnd(t, \"0\");\n      }\n    }, {\n      key: \"toDecimal\",\n      value: function value(e) {\n        return t.toBigNumber(e).toNumber();\n      }\n    }, {\n      key: \"fromDecimal\",\n      value: function value(e) {\n        var n = t.toBigNumber(e),\n            r = n.toString(16);\n        return n.isLessThan(0) ? \"-0x\" + r.substr(1) : \"0x\" + r;\n      }\n    }, {\n      key: \"fromSun\",\n      value: function value(e) {\n        var n = t.toBigNumber(e).div(1e6);\n        return Le.isBigNumber(e) ? n : n.toString(10);\n      }\n    }, {\n      key: \"toSun\",\n      value: function value(e) {\n        var n = t.toBigNumber(e).times(1e6);\n        return Le.isBigNumber(e) ? n : n.toString(10);\n      }\n    }, {\n      key: \"toBigNumber\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n        return Le.isBigNumber(e) ? e : Le.isString(e) && /^(-|)0x/.test(e) ? new Re.a(e.replace(\"0x\", \"\"), 16) : new Re.a(e.toString(10), 10);\n      }\n    }, {\n      key: \"isAddress\",\n      value: function value() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n        if (!Le.isString(e)) return !1;\n        if (42 === e.length) try {\n          return t.isAddress(Le.crypto.getBase58CheckAddress(Le.code.hexStr2byteArray(e)));\n        } catch (e) {\n          return !1;\n        }\n\n        try {\n          return Le.crypto.isAddressValid(e);\n        } catch (e) {\n          return !1;\n        }\n      }\n    }, {\n      key: \"createAccount\",\n      value: (n = f()(l.a.mark(function e() {\n        var t;\n        return l.a.wrap(function (e) {\n          for (;;) {\n            switch (e.prev = e.next) {\n              case 0:\n                return t = Le.accounts.generateAccount(), e.abrupt(\"return\", t);\n\n              case 2:\n              case \"end\":\n                return e.stop();\n            }\n          }\n        }, e);\n      })), function () {\n        return n.apply(this, arguments);\n      })\n    }, {\n      key: \"address\",\n      get: function get() {\n        return {\n          fromHex: function fromHex(e) {\n            return Le.isHex(e) ? Le.crypto.getBase58CheckAddress(Le.code.hexStr2byteArray(e.replace(/^0x/, U))) : e;\n          },\n          toHex: function toHex(e) {\n            return Le.isHex(e) ? e.toLowerCase().replace(/^0x/, U) : Le.code.byteArray2hexStr(Le.crypto.decodeBase58Address(e)).toLowerCase();\n          },\n          fromPrivateKey: function fromPrivateKey(e) {\n            try {\n              return Le.crypto.pkToAddress(e);\n            } catch (e) {\n              return !1;\n            }\n          }\n        };\n      }\n    }]), t;\n  }(Je.a);\n\n  S()(It, \"providers\", ze), S()(It, \"BigNumber\", Re.a), S()(It, \"TransactionBuilder\", st), S()(It, \"Trx\", dt), S()(It, \"Contract\", bt), S()(It, \"Plugin\", mt), S()(It, \"Event\", xt), S()(It, \"version\", Ge.a), S()(It, \"utils\", Le);\n}]).default;","map":{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:/external \"@babel/runtime/regenerator\"","webpack:///src/utils/base64.js","webpack:///src/utils/bytes.js","webpack:///src/utils/address.js","webpack:///src/utils/code.js","webpack:///src/utils/base58.js","webpack:///src/utils/ethersUtils.js","webpack:///src/utils/crypto.js","webpack:///src/utils/accounts.js","webpack:///src/utils/abi.js","webpack:///src/utils/index.js","webpack:///src/lib/transactionBuilder.js","webpack:///src/lib/providers/index.js","webpack:///src/lib/providers/HttpProvider.js","webpack:///src/paramValidator/index.js","webpack:///src/lib/trx.js","webpack:///src/lib/contract/method.js","webpack:///src/lib/contract/index.js","webpack:///src/lib/plugin.js","webpack:///src/lib/event.js","webpack:///src/index.js"],"names":["i","l","exports","modules","module","__webpack_require__","Object","enumerable","value","bind","Base64","this","_keyStr","encode","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","input","length","charCodeAt","isNaN","_this","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","byteArray","Array","utftext","c","_utf8_encode","string","n","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","d","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","recoverAddress","SigningKey","AbiCoder","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","concat","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","txID","signature","ECKeySign","isArray","includes","arrayToBase64String","a","btoa","toConsumableArray_default","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","EC","genKeyPair","getPrivate","priKeyHex","computeAddress","pubBytes","hash","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","keyFromPrivate","pubkey","getPublic","x","y","xHex","yHex","hashBytes","sign","r","s","id","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","decodeParams","names","types","ignoreMethodHash","type","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","_sleep","isValidURL","url","validator","isURL","protocols","require_tld","isObject","prototype","call","isJson","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","name","isString","isFunction","isHex","isInteger","Number","hasProperty","property","hasOwnProperty","hasProperties","properties","mapEvent","event","data","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","inputs","abi","padLeft","padding","amount","res","isNotNullOrUndefined","val","sleep","millis","Promise","setTimeout","resolve","src_utils","code","accounts","crypto","ethersUtils","self","fromUtf8","tronWeb","resultManager","callback","message","toUtf8","TransactionBuilder","injectPromise","injectpromise","Validator","to","from","defaultAddress","options","sendTrx","notValid","msg","gt","to_address","owner_address","permissionId","Permission_id","fullNode","request","then","err","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","undefined","freezeBalance","optional","gte","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","console","log","applyForSR","votes","voterAddress","vote","invalid","entries","srAddress","voteCount","vote_address","vote_count","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","bytecode","parameters","entrys","payable","some","func","lte","constructorParams","find","it","args","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","params","typeof_default","splice","_triggerSmartContract","_isConstant","triggerSmartContract","confirmed","contractAddress","functionSelector","assign","function_selector","ownerAddress","clearABI","isAddress","trx","cache","contracts","brokerage","updateBrokerage","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","fullnodeSatisfies","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","startsWith","account_id","updateToken","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","keys","key","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","raw_data","extension","expiration","extendExpiration","addUpdateData","providers","HttpProvider","host","timeout","user","headers","statusPage","instance","axios","create","baseURL","auth","payload","method","param","Function","normalized","no","lt","se","notPositive","notEqual","ETH_MESSAGE_HEADER","Trx","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlock","getBlockByHash","getBlockByNumber","blockHash","blockID","getBlockTransactionCount","transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","_getTransactionInfoById","limit","getTransactionsToAddress","getTransactionsRelated","getTransactionsFromAddress","direction","all","tx","sort","b","_context","account","getAccount","getAccountById","getAccountInfoById","getBalance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","getBandwidth","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getTokensIssuedByAddress","assetIssue","tokens","_parseToken","getTokenFromID","_this2","listNodes","nodes","port","_this3","start","end","getBlockRange","startNum","endNum","listSuperRepresentatives","witnesses","listTokens","_this4","timeUntilNextVoteCycle","Math","floor","getContract","_this5","useTronHeader","verifyMessage","verifySignature","messageBytes","messageDigest","recovered","tronAddress","base58Address","fromHex","defaultPrivateKey","multisig","signatureHex","signString","_context3","fromPrivateKey","signingKey","signDigest","multiSign","signWeight","getSignWeight","foundKey","permission","approved_list","_context4","getApprovedList","signedTransaction","sendRawTransaction","sendTransaction","trx_objectSpread","transactionBuilder","_context7","_context8","_context9","_context10","_context11","getProposal","proposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","getExchangeByID","exchange","listExchanges","exchanges","listExchangesPaginated","getNodeInfo","info","getTokenListByName","_this6","t","getTokenByID","_this7","_getReward","_getBrokerage","reward","getFunctionSelector","getParamTypes","decodeOutput","filter","Method","classCallCheck_default","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","arguments","_watch","deployed","stateMutability","method_objectSpread","constant_result","msg2","chunk","broadcast","error","checkResult","getTransactionInfo","resMessage","rawResponse","decoded","contractResult","keepTxID","eventServer","listener","lastBlock","since","getEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","events","getEventsByContractAddress","latestEvent","newEvents","priorEvent","reject","bindListener","clearInterval","setInterval","stop","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","disablePlugins","pluginInterface","requires","components","libs","plugged","skipped","plugin","semver","satisfies","version","fullClass","className","classInstanceName","component","Event","healthcheck","isValidProvider","isConnected","sinceTimestamp","fromTimestamp","size","page","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","querystring","response","getEventsByTransactionID","DEFAULT_VERSION","EventEmitter","fullHost","setFullNode","setSolidityNode","setEventServer","setPrivateKey","fullnodeVersion","assertThisInitialized_default","nodeInfo","configNodeInfo","codeVersion","abs","setAddress","emit","provider","knownProvider","setStatusPage","getFullnodeVersion","_this$event","setServer","currentProviders","_this$event2","_this$event3","prefix","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times"],"mappings":"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YAAAA;AAAAA,WAAAA,EAAAA;AAAAA,GAAAA,CAAAA;;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA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","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","\nimport {utils} from 'ethers';\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    recoverAddress,\n    SigningKey,\n    AbiCoder\n}\n","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256} from './ethersUtils';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\nimport * as ethersUtils from './ethersUtils';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    ethersUtils\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        console.log(toHex(address), utils.isObject(url))\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n        console.log(toHex(address))\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || 1_000_000_000;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if (typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if (parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for (let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                else if (type == 'address[]')\n                    value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    triggerConfirmedConstantContract(...params) {\n        params[2]._isConstant = true\n        params[2].confirmed = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: 1_000_000_000\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'function selector',\n                type: 'not-empty-string',\n                value: functionSelector\n            }\n        ], callback))\n            return;\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if (parameters.length) {\n            const abiCoder = new AbiCoder();\n            let types = [];\n            const values = [];\n\n            for (let i = 0; i < parameters.length; i++) {\n                let {type, value} = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                else if (type == 'address[]')\n                    value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                // workaround for unsupported trcToken type\n                types = types.map(type => {\n                    if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n                    return type\n                })\n\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress),\n            function_selector: functionSelector,\n            parameter: parameters\n        };\n\n        if (!options._isConstant) {\n            args.call_value = parseInt(callValue)\n            args.fee_limit = parseInt(feeLimit)\n            if (utils.isNotNullOrUndefined(tokenValue))\n                args.call_token_value = parseInt(tokenValue)\n            if (utils.isNotNullOrUndefined(tokenId))\n                args.token_id = parseInt(tokenId)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    updateBrokerage(brokerage, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.updateBrokerage, brokerage, ownerAddress);\n\n        if (!utils.isNotNullOrUndefined(brokerage))\n            return callback('Invalid brokerage provided');\n\n        if (!utils.isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            return callback('Brokerage must be an integer between 0 and 100');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress)\n        };\n\n        this.tronWeb.fullNode.request('wallet/updateBrokerage', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision <= 0 || precision > 6))\n            return callback('precision must be a positive integer > 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (this.tronWeb.fullnodeSatisfies('>=3.5.0') && !(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n}\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\nimport Validator from \"../paramValidator\";\nimport injectpromise from 'injectpromise';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number') {\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        signature = signature.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const signingKey = new SigningKey(privateKey);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n\n        return signatureHex\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 10;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchangesPaginated, limit, offset);\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedexchangelist', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (Array.isArray(token.assetIssue)) {\n                callback(null, token.assetIssue.map(t => this._parseToken(t)));\n            } else if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    async getReward(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getReward(address, options, callback);\n    }\n\n    async getUnconfirmedReward(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getReward(address, options, callback);\n    }\n\n    async getBrokerage(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async getUnconfirmedBrokerage(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getReward, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.reward === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.reward);\n            }).catch(err => callback(err));\n    }\n\n\n    async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getBrokerage, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.brokerage === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.brokerage);\n            }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({type}) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({name}) => name).filter(name => !!name);\n    const types = abi.map(({type}) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = injectpromise(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(ADDRESS_PREFIX_REGEX, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index === 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result === 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                if (options.keepTxID) {\n                    return callback(null, [signedTransaction.txID, decoded]);\n                }\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\nimport injectpromise from 'injectpromise';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? contract.abi.entrys : []);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false, options = {}) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = options.disablePlugins;\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            libs: [],\n            plugged: [],\n            skipped: []\n        }\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.'\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                let className = plugin.constructor.name\n                let classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1)\n                if (className !== classInstanceName) {\n                    TronWeb[className] = Plugin\n                    this.tronWeb[classInstanceName] = plugin\n                    result.libs.push(className)\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (let component in pluginInterface.components) {\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue\n                    }\n                    let methods = pluginInterface.components[component]\n                    let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                    for (let method in methods) {\n                        if (method === 'constructor' || (this.tronWeb[component][method] &&\n                            (pluginNoOverride.includes(method) // blacklisted methods\n                                || /^_/.test(method)) // private methods\n                        )) {\n                            result.skipped.push(method)\n                            continue\n                        }\n                        this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                        result.plugged.push(method)\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\nimport injectpromise from 'injectpromise';\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n\n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.onlyConfirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.onlyUnconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport {version} from '../package.json';\nimport semver from 'semver';\nimport injectpromise from 'injectpromise';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport {keccak256} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n                // for retro-compatibility:\n                solidityNode = false, eventServer = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, options);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.injectPromise = injectpromise(this);\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', {hex, base58});\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if (!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}
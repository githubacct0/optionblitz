{"ast":null,"code":"module.exports = function (t) {\n  var e = {};\n\n  function n(i) {\n    if (e[i]) return e[i].exports;\n    var r = e[i] = {\n      i: i,\n      l: !1,\n      exports: {}\n    };\n    return t[i].call(r.exports, r, r.exports, n), r.l = !0, r.exports;\n  }\n\n  return n.m = t, n.c = e, n.d = function (t, e, i) {\n    n.o(t, e) || Object.defineProperty(t, e, {\n      enumerable: !0,\n      get: i\n    });\n  }, n.r = function (t) {\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {\n      value: \"Module\"\n    }), Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n  }, n.t = function (t, e) {\n    if (1 & e && (t = n(t)), 8 & e) return t;\n    if (4 & e && \"object\" == typeof t && t && t.__esModule) return t;\n    var i = Object.create(null);\n    if (n.r(i), Object.defineProperty(i, \"default\", {\n      enumerable: !0,\n      value: t\n    }), 2 & e && \"string\" != typeof t) for (var r in t) {\n      n.d(i, r, function (e) {\n        return t[e];\n      }.bind(null, r));\n    }\n    return i;\n  }, n.n = function (t) {\n    var e = t && t.__esModule ? function () {\n      return t.default;\n    } : function () {\n      return t;\n    };\n    return n.d(e, \"a\", e), e;\n  }, n.o = function (t, e) {\n    return Object.prototype.hasOwnProperty.call(t, e);\n  }, n.p = \"\", n(n.s = 10);\n}([function (t, e) {\n  t.exports = require(\"@babel/runtime/helpers/classCallCheck\");\n}, function (t, e) {\n  t.exports = require(\"@babel/runtime/helpers/createClass\");\n}, function (t, e) {\n  t.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n}, function (t, e) {\n  t.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");\n}, function (t, e) {\n  t.exports = require(\"@babel/runtime/helpers/inherits\");\n}, function (t, e) {\n  t.exports = require(\"@babel/runtime/regenerator\");\n}, function (t, e) {\n  t.exports = require(\"@babel/runtime/helpers/typeof\");\n}, function (t, e) {\n  t.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");\n}, function (t, e) {\n  t.exports = require(\"injectpromise\");\n}, function (t, e) {\n  t.exports = require(\"@babel/runtime/helpers/slicedToArray\");\n}, function (t, e, n) {\n  \"use strict\";\n\n  n.r(e);\n\n  var i,\n      r,\n      o,\n      s,\n      a,\n      l,\n      u,\n      c,\n      h,\n      d = n(6),\n      v = n.n(d),\n      f = n(0),\n      p = n.n(f),\n      m = n(1),\n      g = n.n(m),\n      b = n(2),\n      y = n.n(b),\n      k = n(3),\n      x = n.n(k),\n      w = n(4),\n      P = n.n(w),\n      I = function () {\n    function t(e) {\n      p()(this, t), this.tronGrid = e, this.apiNode = e.tronWeb.eventServer;\n    }\n\n    return g()(t, [{\n      key: \"_httpClient\",\n      value: function value(t, e, n) {\n        var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"get\";\n        !e.experimental && this.tronGrid.experimental && (e.experimental = this.tronGrid.experimental), this.apiNode.request(t, e, i).then(function (t) {\n          e.only_data_and_fingerprint ? n(null, t.data, t.meta.fingerprint) : n(null, t);\n        }).catch(function (t) {\n          return n(t);\n        });\n      }\n    }, {\n      key: \"get\",\n      value: function value(t, e, n) {\n        return this._httpClient(t, e, n, \"get\");\n      }\n    }, {\n      key: \"post\",\n      value: function value() {}\n    }, {\n      key: \"put\",\n      value: function value() {}\n    }, {\n      key: \"del\",\n      value: function value() {}\n    }]), t;\n  }(),\n      T = function () {\n    function t(e) {\n      p()(this, t), i = e.tronWeb, r = i.utils;\n    }\n\n    return g()(t, [{\n      key: \"validatePageData\",\n      value: function value(t) {\n        if (!t) throw new Error(\"Invalid data provided.\");\n        if (\"string\" != typeof t && \"object\" !== v()(t)) throw new Error(\"Invalid data format provided.\");\n        if (\"string\" == typeof t && -1 === t.indexOf(\"fingerprint\")) throw new Error(\"It's the last page or missed fingerprint in the links.\");\n        if (!(\"object\" !== v()(t) || t.meta && t.meta.fingerprint)) throw new Error(\"It's the last page or missed fingerprint in the json.\");\n      }\n    }, {\n      key: \"validateAddress\",\n      value: function value(t) {\n        if (!i.isAddress(t)) throw new Error(\"Invalid address provided.\");\n      }\n    }, {\n      key: \"validateAssetIdentifier\",\n      value: function value(t) {\n        if (!t || /[^a-zA-Z0-9_]+/.test(t)) throw new Error(\"Invalid identifier provided.\");\n      }\n    }, {\n      key: \"validateBlockNumber\",\n      value: function value(t) {\n        if (\"latest\" !== t && (!t || /[^0-9]/.test(t.toString()))) throw new Error(\"Invalid block number provided.\");\n      }\n    }, {\n      key: \"validateTransactionId\",\n      value: function value(t) {\n        if (!/^[a-z0-9]{64}/.test(t)) throw new Error(\"Invalid transaction id provided.\");\n      }\n    }, {\n      key: \"validateOptions\",\n      value: function value(t) {\n        if (t.limit && (!r.isInteger(t.limit) || t.limit < 0 || t.limit > 200)) throw new Error(\"Limit should be a number between 0 and 200.\");\n        if (t.blockNumber && !t.eventName) throw new Error(\"Usage of block number filtering requires an event name.\");\n        if (t.minBlockTimestamp && !r.isInteger(t.minBlockTimestamp)) throw new Error(\"Invalid minBlockTimestamp provided.\");\n        if (t.maxBlockTimestamp && !r.isInteger(t.maxBlockTimestamp) && \"now\" !== t.maxBlockTimestamp) throw new Error(\"Invalid maxBlockTimestamp provided.\");\n      }\n    }]), t;\n  }(),\n      E = n(8),\n      j = n.n(E),\n      A = function t(e) {\n    if (p()(this, t), !(e && e instanceof D)) throw new Error(\"Expected instance of TronGrid\");\n    this.tronGrid = e, this.tronWeb = e.tronWeb, this.injectPromise = new j.a(this), this.apiNode = this.tronWeb.eventServer, this.utils = this.tronWeb.utils, this.validator = new T(e), this.APIClient = new I(e);\n  },\n      _ = function (t) {\n    function e(t) {\n      var n;\n      return p()(this, e), n = y()(this, x()(e).call(this, t)), o = n.utils, n;\n    }\n\n    return P()(e, t), g()(e, [{\n      key: \"get\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return o.isFunction(e) && (n = e, e = {}), n ? (this.validator.validateAddress(t), 34 !== t.length && (t = this.tronWeb.address.fromHex(t)), this.APIClient.get(\"v1/accounts/\".concat(t), e, n)) : this.injectPromise(this.get, t, e);\n      }\n    }, {\n      key: \"getTransactions\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return o.isFunction(e) && (n = e, e = {}), n ? (this.validator.validateAddress(t), 34 !== t.length && (t = this.tronWeb.address.fromHex(t)), this.APIClient.get(\"v1/accounts/\".concat(t, \"/transactions\"), e, n)) : this.injectPromise(this.getTransactions, t, e);\n      }\n    }, {\n      key: \"getTrc20Transactions\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return o.isFunction(e) && (n = e, e = {}), n ? (this.validator.validateAddress(t), 34 !== t.length && (t = this.tronWeb.address.fromHex(t)), this.APIClient.get(\"v1/accounts/\".concat(t, \"/transactions/trc20\"), e, n)) : this.injectPromise(this.getTrc20Transactions, t, e);\n      }\n    }]), e;\n  }(A),\n      C = function (t) {\n    function e(t) {\n      var n;\n      return p()(this, e), n = y()(this, x()(e).call(this, t)), s = n.utils, n;\n    }\n\n    return P()(e, t), g()(e, [{\n      key: \"get\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        if (s.isFunction(e) && (n = e, e = {}), this.validator.validateAssetIdentifier(t), !n) return this.injectPromise(this.get, t, e);\n        this.tronGrid.experimental && (e.experimental = this.tronGrid.experimental), this.APIClient.get(\"v1/assets/\".concat(t), e, n);\n      }\n    }, {\n      key: \"getList\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return s.isFunction(e) && (n = e, e = {}), this.validator.validateAssetIdentifier(t), this.validator.validateOptions(e), n ? this.APIClient.get(\"v1/assets/\".concat(t, \"/list\"), e, n) : this.injectPromise(this.getList, t, e);\n      }\n    }, {\n      key: \"getAll\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n        return s.isFunction(t) && (e = t, t = {}), this.validator.validateOptions(t), e ? this.APIClient.get(\"v1/assets\", t, e) : this.injectPromise(this.getAll, t);\n      }\n    }]), e;\n  }(A),\n      O = function (t) {\n    function e(t) {\n      var n;\n      return p()(this, e), n = y()(this, x()(e).call(this, t)), a = n.utils, n;\n    }\n\n    return P()(e, t), g()(e, [{\n      key: \"getEvents\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"latest\",\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return a.isFunction(e) && (n = e, e = {}), n ? (this.validator.validateBlockNumber(t), this.APIClient.get(\"v1/blocks/\".concat(t, \"/events\"), e, n)) : this.injectPromise(this.getEvents, t, e);\n      }\n    }]), e;\n  }(A),\n      W = n(5),\n      F = n.n(W),\n      q = n(9),\n      B = n.n(q),\n      G = n(7),\n      N = n.n(G),\n      S = function (t) {\n    function e(t) {\n      var n;\n      return p()(this, e), n = y()(this, x()(e).call(this, t)), l = n.utils, n;\n    }\n\n    return P()(e, t), g()(e, [{\n      key: \"getEvents\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return l.isFunction(e) && (n = e, e = {}), n ? (this.validator.validateAddress(t), this.validator.validateOptions(e), t = this.tronWeb.address.fromHex(t), this.APIClient.get(\"v1/contracts/\".concat(t, \"/events\"), e, n)) : this.injectPromise(this.getEvents, t, e);\n      }\n    }, {\n      key: \"getTrc20Tokens\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return l.isFunction(e) && (n = e, e = {}), n ? (this.validator.validateAddress(t), t = this.tronWeb.address.fromHex(t), this.APIClient.get(\"v1/contracts/\".concat(t, \"/tokens\"), e, n)) : this.injectPromise(this.getTrc20Tokens, t, e);\n      }\n    }, {\n      key: \"watchEvent\",\n      value: function () {\n        var t = N()(F.a.mark(function t(e, n) {\n          var i,\n              r,\n              o,\n              s,\n              a,\n              l,\n              u,\n              c = this,\n              h = arguments;\n          return F.a.wrap(function (t) {\n            for (;;) {\n              switch (t.prev = t.next) {\n                case 0:\n                  return i = h.length > 2 && void 0 !== h[2] ? h[2] : {}, r = h.length > 3 && void 0 !== h[3] && h[3], o = !1, s = !1, a = Date.now() - 1e3, l = function () {\n                    var t = N()(F.a.mark(function t() {\n                      var r, o, l, u, h;\n                      return F.a.wrap(function (t) {\n                        for (;;) {\n                          switch (t.prev = t.next) {\n                            case 0:\n                              return t.prev = 0, i = Object.assign({\n                                eventName: n,\n                                minBlockTimestamp: a,\n                                orderBy: \"timestamp,desc\"\n                              }, i), t.next = 4, c.getEvents(e, i);\n\n                            case 4:\n                              return r = t.sent, o = r.sort(function (t, e) {\n                                return e.block_timestamp - t.block_timestamp;\n                              }), l = B()(o, 1), u = l[0], h = r.filter(function (t, e) {\n                                return !r.slice(0, e).some(function (e) {\n                                  return JSON.stringify(e) == JSON.stringify(t);\n                                }) && (!s || t.block_timestamp > s);\n                              }), u && (s = u.block_timestamp), t.abrupt(\"return\", h);\n\n                            case 11:\n                              return t.prev = 11, t.t0 = t.catch(0), t.abrupt(\"return\", Promise.reject(t.t0));\n\n                            case 14:\n                            case \"end\":\n                              return t.stop();\n                          }\n                        }\n                      }, t, null, [[0, 11]]);\n                    }));\n                    return function () {\n                      return t.apply(this, arguments);\n                    };\n                  }(), u = function u() {\n                    o && clearInterval(o), o = setInterval(function () {\n                      l().then(function (t) {\n                        return t.forEach(function (t) {\n                          r(null, t);\n                        });\n                      }).catch(function (t) {\n                        return r(t);\n                      });\n                    }, 3e3);\n                  }, t.next = 9, l();\n\n                case 9:\n                  return u(), t.abrupt(\"return\", {\n                    start: u(),\n                    stop: function stop() {\n                      o && (clearInterval(o), o = !1);\n                    }\n                  });\n\n                case 11:\n                case \"end\":\n                  return t.stop();\n              }\n            }\n          }, t);\n        }));\n        return function (e, n) {\n          return t.apply(this, arguments);\n        };\n      }()\n    }]), e;\n  }(A),\n      H = function (t) {\n    function e(t) {\n      var n;\n      return p()(this, e), n = y()(this, x()(e).call(this, t)), u = n.utils, n;\n    }\n\n    return P()(e, t), g()(e, [{\n      key: \"getEvents\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return u.isFunction(e) && (n = e, e = {}), n ? (this.validator.validateTransactionId(t), this.APIClient.get(\"v1/transactions/\".concat(t, \"/events\"), e, n)) : this.injectPromise(this.getEvents, t, e);\n      }\n    }]), e;\n  }(A),\n      M = function (t) {\n    function e(t) {\n      var n;\n      return p()(this, e), n = y()(this, x()(e).call(this, t)), c = n.utils, h = n.tronGrid.account, n;\n    }\n\n    return P()(e, t), g()(e, [{\n      key: \"setExperimental\",\n      value: function value(t) {\n        this.tronGrid.setExperimental(t);\n      }\n    }, {\n      key: \"getTransactions\",\n      value: function () {\n        var t = N()(F.a.mark(function t() {\n          var e,\n              n,\n              i,\n              r,\n              o,\n              s,\n              a = arguments;\n          return F.a.wrap(function (t) {\n            for (;;) {\n              switch (t.prev = t.next) {\n                case 0:\n                  return e = a.length > 0 && void 0 !== a[0] ? a[0] : this.tronWeb.defaultAddress.hex, n = a.length > 1 && void 0 !== a[1] ? a[1] : \"all\", i = a.length > 2 && void 0 !== a[2] ? a[2] : 20, r = a.length > 3 && void 0 !== a[3] ? a[3] : 0, o = a.length > 4 && void 0 !== a[4] && a[4], c.isFunction(r) && (o = r), c.isFunction(i) && (o = i, i = 20), c.isFunction(n) && (o = n, n = \"all\"), c.isFunction(e) && (o = e, e = this.tronWeb.defaultAddress.hex), s = {\n                    limit: i,\n                    only_data_and_fingerprint: !0\n                  }, \"to\" === n ? s.only_to = !0 : \"from\" === n && (s.only_from = !0), t.abrupt(\"return\", h.getTransactions(e, s, o));\n\n                case 12:\n                case \"end\":\n                  return t.stop();\n              }\n            }\n          }, t, this);\n        }));\n        return function () {\n          return t.apply(this, arguments);\n        };\n      }()\n    }]), e;\n  }(A);\n\n  n.d(e, \"default\", function () {\n    return D;\n  });\n\n  var D = function () {\n    function t() {\n      var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (p()(this, t), !e) throw new Error(\"Expected instance of TronWeb\");\n      this.tronWeb = e, this.utils = e.utils, this.account = new _(this), this.asset = new C(this), this.block = new O(this), this.contract = new S(this), this.transaction = new H(this), this.apiClient = new I(this), this.validator = new T(this), this.injectPromise = new j.a(this), this.experimental = void 0;\n    }\n\n    return g()(t, [{\n      key: \"setExperimental\",\n      value: function value(t) {\n        this.experimental = t;\n      }\n    }, {\n      key: \"pluginInterface\",\n      value: function value(t) {\n        t.experimental && t.experimental;\n        var e = new M(this);\n        return e.setExperimental(t.experimental), {\n          requires: \"^2.2.4\",\n          components: {\n            trx: {\n              getTransactionsRelated: e.getTransactions\n            }\n          }\n        };\n      }\n    }, {\n      key: \"nextPage\",\n      value: function value(t, e) {\n        return e ? (this.validator.validatePageData(t), \"string\" == typeof t ? this.apiClient.get(t, {}, e) : \"object\" === v()(t) ? this.apiClient.get(t.meta.links.next, {}, e) : void 0) : this.injectPromise(this.nextPage, t);\n      }\n    }]), t;\n  }();\n}]).default;","map":{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:/external \"@babel/runtime/helpers/classCallCheck\"","webpack:///src/utils/Validator.js","webpack:///src/lib/core/Account.js","webpack:///src/lib/core/Asset.js","webpack:///src/lib/core/Block.js","webpack:///src/lib/core/Contract.js","webpack:///src/lib/core/Transaction.js","webpack:///src/lib/plugins/TronWebPlugin.js","webpack:///src/lib/apis/APIClient.js","webpack:///src/lib/core/Base.js","webpack:///src/index.js"],"names":["i","l","exports","modules","module","__webpack_require__","Object","enumerable","value","bind","tronWeb","utils","Validator","tronGrid","classCallCheck_default","data","Error","typeof_default","indexOf","meta","fingerprint","address","isAddress","identifier","test","blockNumber","toString","transactionID","options","limit","isInteger","eventName","minBlockTimestamp","maxBlockTimestamp","Account","Base","_this","callback","isFunction","this","injectPromise","get","validator","validateAddress","length","fromHex","APIClient","getTransactions","getTrc20Transactions","Asset","validateAssetIdentifier","experimental","name","validateOptions","getList","getAll","Block","getEvents","validateBlockNumber","Contract","contractAddress","getTrc20Tokens","listener","lastBlock","since","Date","now","eventWatcher","assign","orderBy","events","_this2","latestEvent","sort","a","b","block_timestamp","newEvents","filter","event","index","slice","some","JSON","stringify","priorEvent","Promise","reject","bindListener","clearInterval","setInterval","then","forEach","catch","err","start","stop","Transaction","validateTransactionId","account","TronWebPlugin","setExperimental","defaultAddress","hex","direction","offset","only_data_and_fingerprint","only_to","only_from","apiNode","eventServer","path","method","request","response","_httpClient","TronGrid","injectpromise","asset","block","contract","transaction","apiClient","undefined","code","tronWebPlugin","requires","components","trx","getTransactionsRelated","nextPage","validatePageData","links","next"],"mappings":";AACA,MAAA,CAAA,GAAA,EAAA;;AAGA,WAAA,CAAA,CAAA,CAAA,EAAA;AAGA,QAAA,CAAA,CAAA,CAAA,CAAA,EACA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA;AAGA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA;AACAA,MAAAA,CAAAA,EAAAA,CADA;AAEAC,MAAAA,CAAAA,EAAAA,CAAAA,CAFA;AAGAC,MAAAA,OAAAA,EAAAA;AAHA,KAAA;AAaA,WANAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,OAAAA,EAAAA,CAAAA,GAGAC,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAHAD,EAMA,CAAA,CAAA,OAAA;AA0DA;;AAAA,SArDAE,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,EAGAA,CAAAA,CAAAA,CAAAA,GAAAA,CAHAA,EAMAA,CAAAA,CAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AACAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,KACAC,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAA0CC,MAAAA,UAAAA,EAAAA,CAAAA,CAA1CD;AAA0CC,MAAAA,GAAAA,EAAAA;AAA1CD,KAAAA,CADAD;AAC0CE,GAR1CF,EAaAA,CAAAA,CAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AACA,mBAAA,OAAA,MAAA,IAAA,MAAA,CAAA,WAAA,IACAC,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,WAAAA,EAAAA;AAAwDE,MAAAA,KAAAA,EAAAA;AAAxDF,KAAAA,CADA,EAGAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAiDE,MAAAA,KAAAA,EAAAA,CAAAA;AAAjDF,KAAAA,CAHA;AAGiDE,GAjBjDH,EAyBAA,CAAAA,CAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAEA,QADA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GACA,IAAA,CAAA,EAAA,OAAA,CAAA;AACA,QAAA,IAAA,CAAA,IAAA,YAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,UAAA,EAAA,OAAA,CAAA;AACA,QAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AAGA,QAFAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GACAC,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAAAA;AAAyCC,MAAAA,UAAAA,EAAAA,CAAAA,CAAzCD;AAAyCC,MAAAA,KAAAA,EAAAA;AAAzCD,KAAAA,CADAD,EAEA,IAAA,CAAA,IAAA,YAAA,OAAA,CAAA,EAAA,KAAA,IAAA,CAAA,IAAA,CAAA;AAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA;AAAgH,eAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAAhH,CAAqII,IAArI,CAAqIA,IAArI,EAAqIA,CAArI,CAAA;AAAA;AACA,WAAA,CAAA;AAAA,GAjCAJ,EAqCAA,CAAAA,CAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AACA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,UAAA,GACA,YAAA;AAA2B,aAAA,CAAA,CAAA,OAAA;AAAA,KAD3B,GAEA,YAAA;AAAiC,aAAA,CAAA;AAAA,KAFjC;AAIA,WADAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAAA,CAAAA,GACA,CAAA;AAAA,GA1CAA,EA8CAA,CAAAA,CAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAsD,WAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAA,GA9CtDA,EAiDAA,CAAAA,CAAAA,CAAAA,GAAAA,EAjDAA,EAqDA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA;AAAA,C,CAAA,CAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AClFAD,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,uCAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,oCAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,kDAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,uCAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,iCAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,4BAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,+BAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,yCAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,eAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,EAAAA,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,sCAAAA,CAAAA;AAAAA,CDkFA,EClFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,MCAIM,CDAJN;AAAAA,MCCIO,CDDJP;AAAAA,MEEIO,CFFJP;AAAAA,MGEIO,CHFJP;AAAAA,MIEIO,CJFJP;AAAAA,MKEIO,CLFJP;AAAAA,MMEIO,CNFJP;AAAAA,MOEIO,CPFJP;AAAAA,MOGI+F,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MOGI+F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CPHJ/F;AAAAA,MQCqB0C,CAAAA,GAAAA,YAAAA;AAEjB,aAAA,CAAA,CAAYjC,CAAZ,EAAYA;AAAUC,MAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,CAAAA,EAClByB,KAAK1B,QAAL0B,GAAgB1B,CADEC,EAElByB,KAAKsE,OAALtE,GAAe1B,CAAAA,CAASH,OAATG,CAAiBiG,WAFdhG;AAEcgG;;AAAAA,WAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,GAAAA,EAAAA,aAAAA;AAAAA,MAAAA,KAAAA,EAAAA,eAGxBC,CAHwBD,EAGlBlF,CAHkBkF,EAGTzE,CAHSyE,EAGTzE;AAA0B,YAAhB2E,CAAAA,GAAgB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO;AAAP,SAErCpF,CAAAA,CAAQuB,YAF6B,IAEbZ,KAAK1B,QAAL0B,CAAcY,YAFD,KAGtCvB,CAAAA,CAAQuB,YAARvB,GAAuBW,KAAK1B,QAAL0B,CAAcY,YAHC,GAM1CZ,KAAKsE,OAALtE,CAAa0E,OAAb1E,CAAqBwE,CAArBxE,EAA2BX,CAA3BW,EAAoCyE,CAApCzE,EAA4CoD,IAA5CpD,CAAiD,UAAA,CAAA,EAAA;AACzCX,UAAAA,CAAAA,CAAQ8E,yBAAR9E,GACAS,CAAAA,CAAS,IAATA,EAAe6E,CAAAA,CAASnG,IAAxBsB,EAA8B6E,CAAAA,CAAS/F,IAAT+F,CAAc9F,WAA5CiB,CADAT,GAGAS,CAAAA,CAAS,IAATA,EAAe6E,CAAf7E,CAHAT;AAGesF,SAJvB3E,EAMGsD,KANHtD,CAMS,UAAA,CAAA,EAAA;AAAG,iBAAIF,CAAAA,CAASyD,CAATzD,CAAJ;AAAayD,SANzBvD,CAN0C;AAYjBuD;AAfOgB,KAAAA,EAePhB;AAAAA,MAAAA,GAAAA,EAAAA,KAAAA;AAAAA,MAAAA,KAAAA,EAAAA,eAIzBiB,CAJyBjB,EAInBlE,CAJmBkE,EAIVzD,CAJUyD,EAIVzD;AACf,eAAOE,KAAK4E,WAAL5E,CAAiBwE,CAAjBxE,EAAuBX,CAAvBW,EAAgCF,CAAhCE,EAA0C,KAA1CA,CAAP;AAAiD;AALxBuD,KAfOgB,EAoBiB;AAAA,MAAA,GAAA,EAAA,MAAA;AAAA,MAAA,KAAA,EAAA,iBAAA,CAAA;AAAA,KApBjBA,EAoBiB;AAAA,MAAA,GAAA,EAAA,KAAA;AAAA,MAAA,KAAA,EAAA,iBAAA,CAAA;AAAA,KApBjBA,EAoBiB;AAAA,MAAA,GAAA,EAAA,KAAA;AAAA,MAAA,KAAA,EAAA,iBAAA,CAAA;AAAA,KApBjBA,CAAAA,CAAAA,EAoBiB,CApBjBA;AAoBiB,GAxBpChE,ERDrB1C;AAAAA,MCGqBQ,CAAAA,GAAAA,YAAAA;AAEjB,aAAA,CAAA,CAAYC,CAAZ,EAAYA;AAAUC,MAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,CAAAA,EAClBJ,CAAAA,GAAUG,CAAAA,CAASH,OADDI,EAElBH,CAAAA,GAAQD,CAAAA,CAAQC,KAFEG;AAEFH;;AAAAA,WAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,GAAAA,EAAAA,kBAAAA;AAAAA,MAAAA,KAAAA,EAAAA,eAGHI,CAHGJ,EAGHI;AACb,YAAA,CAAKA,CAAL,EACI,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACG,YAAoB,YAAA,OAATD,CAAS,IAA4B,aAAhBE,CAAAA,GAAOF,CAAPE,CAAhC,EACH,MAAM,IAAID,KAAJ,CAAU,+BAAV,CAAN;AACG,YAAoB,YAAA,OAATD,CAAS,IAATA,CAAsD,CAAtDA,KAAqBA,CAAAA,CAAKG,OAALH,CAAa,aAAbA,CAAhC,EACH,MAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACG,YAAA,EAAoB,aAAhBC,CAAAA,GAAOF,CAAPE,CAAgB,IAAcF,CAAAA,CAAKI,IAALJ,IAAcA,CAAAA,CAAKI,IAALJ,CAAUK,WAA1D,CAAA,EACH,MAAM,IAAIJ,KAAJ,CAAU,uDAAV,CAAN;AAAgB;AAXJL,KAAAA,EAWI;AAAA,MAAA,GAAA,EAAA,iBAAA;AAAA,MAAA,KAAA,EAAA,eAIRU,CAJQ,EAIRA;AACZ,YAAA,CAAKX,CAAAA,CAAQY,SAARZ,CAAkBW,CAAlBX,CAAL,EACI,MAAM,IAAIM,KAAJ,CAAU,2BAAV,CAAN;AAAgB;AANA,KAXJL,EAiBI;AAAA,MAAA,GAAA,EAAA,yBAAA;AAAA,MAAA,KAAA,EAAA,eAGAY,CAHA,EAGAA;AACpB,YAAA,CAAKA,CAAL,IAAmB,iBAAiBC,IAAjB,CAAsBD,CAAtB,CAAnB,EACI,MAAM,IAAIP,KAAJ,CAAU,8BAAV,CAAN;AAAgB;AALA,KAjBJL,EAsBI;AAAA,MAAA,GAAA,EAAA,qBAAA;AAAA,MAAA,KAAA,EAAA,eAGJc,CAHI,EAGJA;AAChB,YAAoB,aAAhBA,CAAgB,KAAhBA,CAGCA,CAHDA,IAGgB,SAASD,IAAT,CAAcC,CAAAA,CAAYC,QAAZD,EAAd,CAHA,CAApB,EAII,MAAM,IAAIT,KAAJ,CAAU,gCAAV,CAAN;AAAgB;AARA,KAtBJL,EA8BI;AAAA,MAAA,GAAA,EAAA,uBAAA;AAAA,MAAA,KAAA,EAAA,eAIFgB,CAJE,EAIFA;AAClB,YAAA,CAAK,gBAAgBH,IAAhB,CAAqBG,CAArB,CAAL,EACI,MAAM,IAAIX,KAAJ,CAAU,kCAAV,CAAN;AAAgB;AANA,KA9BJL,EAoCI;AAAA,MAAA,GAAA,EAAA,iBAAA;AAAA,MAAA,KAAA,EAAA,eAIRiB,CAJQ,EAIRA;AACZ,YAAIA,CAAAA,CAAQC,KAARD,KAAQC,CACHlB,CAAAA,CAAMmB,SAANnB,CAAgBiB,CAAAA,CAAQC,KAAxBlB,CADGkB,IAC+BD,CAAAA,CAAQC,KAARD,GAAgB,CAD/CC,IACoDD,CAAAA,CAAQC,KAARD,GAAgB,GAD5EA,CAAJ,EAEQ,MAAM,IAAIZ,KAAJ,CAAU,6CAAV,CAAN;AAGR,YAAIY,CAAAA,CAAQH,WAARG,IAAQH,CAAgBG,CAAAA,CAAQG,SAApC,EACI,MAAM,IAAIf,KAAJ,CAAU,yDAAV,CAAN;AAEJ,YAAIY,CAAAA,CAAQI,iBAARJ,IAAQI,CAAsBrB,CAAAA,CAAMmB,SAANnB,CAAgBiB,CAAAA,CAAQI,iBAAxBrB,CAAlC,EACI,MAAM,IAAIK,KAAJ,CAAU,qCAAV,CAAN;AAEJ,YAAIY,CAAAA,CAAQK,iBAARL,IAAQK,CAAuBtB,CAAAA,CAAMmB,SAANnB,CAAgBiB,CAAAA,CAAQK,iBAAxBtB,CAA/BiB,IAA2G,UAA9BA,CAAAA,CAAQK,iBAAzF,EACI,MAAM,IAAIjB,KAAJ,CAAU,qCAAV,CAAN;AAAgB;AAjBA,KApCJL,CAAAA,CAAAA,EAqDI,CArDJA;AAqDI,GAzDPC,EDHrBR;AAAAA,MC4D4B,CAAA,GAAA,CAAA,CAAA,CAAA,CD5D5BA;AAAAA,MC4D4B,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CD5D5BA;AAAAA,MSsBe+B,CAAAA,GAfX,SAAA,CAAA,CAAYtB,CAAZ,EAAYA;AACR,QADkBC,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,CAAAA,EAAAA,EACbD,CAAAA,IAAcA,CAAAA,YAAoBuG,CADrBtG,CAClB,EACI,MAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AAEJuB,SAAK1B,QAAL0B,GAAgB1B,CAAhB0B,EACAA,KAAK7B,OAAL6B,GAAe1B,CAAAA,CAASH,OADxB6B,EAEAA,KAAKC,aAALD,GAAqB,IAAI8E,CAAAA,CAAAA,CAAJ,CAAkB9E,IAAlB,CAFrBA,EAGAA,KAAKsE,OAALtE,GAAeA,KAAK7B,OAAL6B,CAAauE,WAH5BvE,EAIAA,KAAK5B,KAAL4B,GAAaA,KAAK7B,OAAL6B,CAAa5B,KAJ1B4B,EAKAA,KAAKG,SAALH,GAAiB,IAAIG,CAAJ,CAAc7B,CAAd,CALjB0B,EAMAA,KAAKO,SAALP,GAAiB,IAAIO,CAAJ,CAAcjC,CAAd,CANjB0B;AAM+B1B,GTjBvCT;AAAAA,MEIqB8B,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAEjB,aAAA,CAAA,CAAYrB,CAAZ,EAAYA;AAAU,UAAA,CAAA;AAAA,aAAA,CAAA,GAAA,IAAA,EAAA,CAAA,CAAA,EAClBuB,CAAAA,GAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAMvB,CAANuB,CAAAA,CADkB,EAElBzB,CAAAA,GAAQyB,CAAAA,CAAKzB,KAFK,EAAA,CAAA;AAAA;;AAAA,WAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,KAAA;AAAA,MAAA,KAAA,EAAA,eAYlBU,CAZkB,EAYlBA;AAAyC,YAAhCO,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAOzC,eALI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKC0B,CAAAA,IAGLE,KAAKG,SAALH,CAAeI,eAAfJ,CAA+BlB,CAA/BkB,GAEuB,OAAnBlB,CAAAA,CAAQuB,MAAW,KACnBvB,CAAAA,GAAUkB,KAAK7B,OAAL6B,CAAalB,OAAbkB,CAAqBM,OAArBN,CAA6BlB,CAA7BkB,CADS,CAFvBA,EAKOA,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,eAAAA,MAAAA,CAAkClB,CAAlCkB,CAAAA,EAA6CX,CAA7CW,EAAsDF,CAAtDE,CARFF,IACME,KAAKC,aAALD,CAAmBA,KAAKE,GAAxBF,EAA6BlB,CAA7BkB,EAAsCX,CAAtCW,CADX;AACiDX;AApB/B,KAAA,EAoB+BA;AAAAA,MAAAA,GAAAA,EAAAA,iBAAAA;AAAAA,MAAAA,KAAAA,EAAAA,eAiBrCP,CAjBqCO,EAiBrCP;AAAyC,YAAhCO,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAMrD,eALI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKC0B,CAAAA,IAGLE,KAAKG,SAALH,CAAeI,eAAfJ,CAA+BlB,CAA/BkB,GAEuB,OAAnBlB,CAAAA,CAAQuB,MAAW,KACnBvB,CAAAA,GAAUkB,KAAK7B,OAAL6B,CAAalB,OAAbkB,CAAqBM,OAArBN,CAA6BlB,CAA7BkB,CADS,CAFvBA,EAKOA,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,eAAAA,MAAAA,CAAkClB,CAAlCkB,EAAAA,eAAAA,CAAAA,EAA0DX,CAA1DW,EAAmEF,CAAnEE,CARFF,IACME,KAAKC,aAALD,CAAmBA,KAAKQ,eAAxBR,EAAyClB,CAAzCkB,EAAkDX,CAAlDW,CADX;AAC6DX;AAxBZA,KApB/B,EA4C2CA;AAAAA,MAAAA,GAAAA,EAAAA,sBAAAA;AAAAA,MAAAA,KAAAA,EAAAA,eAiB5CP,CAjB4CO,EAiB5CP;AAAyC,YAAhCO,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAM1D,eALI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKC0B,CAAAA,IAGLE,KAAKG,SAALH,CAAeI,eAAfJ,CAA+BlB,CAA/BkB,GAEuB,OAAnBlB,CAAAA,CAAQuB,MAAW,KACnBvB,CAAAA,GAAUkB,KAAK7B,OAAL6B,CAAalB,OAAbkB,CAAqBM,OAArBN,CAA6BlB,CAA7BkB,CADS,CAFvBA,EAKOA,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,eAAAA,MAAAA,CAAkClB,CAAlCkB,EAAAA,qBAAAA,CAAAA,EAAgEX,CAAhEW,EAAyEF,CAAzEE,CARFF,IACME,KAAKC,aAALD,CAAmBA,KAAKS,oBAAxBT,EAA8ClB,CAA9CkB,EAAuDX,CAAvDW,CADX;AACkEX;AAxBLA,KA5C3C,CAAA,CAAA,EAoEgDA,CApEhD;AAoEgDA,GAtErDM,CAAgBC,CAAhBD,CFJrB9B;AAAAA,MGIqB6C,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAEjB,aAAA,CAAA,CAAYpC,CAAZ,EAAYA;AAAU,UAAA,CAAA;AAAA,aAAA,CAAA,GAAA,IAAA,EAAA,CAAA,CAAA,EAClBuB,CAAAA,GAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAMvB,CAANuB,CAAAA,CADkB,EAElBzB,CAAAA,GAAQyB,CAAAA,CAAKzB,KAFK,EAAA,CAAA;AAAA;;AAAA,WAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,KAAA;AAAA,MAAA,KAAA,EAAA,iBAAA;AAWkC,YAApDY,CAAAA,GAAoD,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAAA,YAAhCK,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAQpD,YAPI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKJ4B,KAAKG,SAALH,CAAeW,uBAAfX,CAAuChB,CAAvCgB,CALI5B,EAKmCY,CAElCc,CAAL,EACI,OAAOE,KAAKC,aAALD,CAAmBA,KAAKE,GAAxBF,EAA6BhB,CAA7BgB,EAAyCX,CAAzCW,CAAP;AAEAA,aAAK1B,QAAL0B,CAAcY,YAAdZ,KACAX,CAAAA,CAAQuB,YAARvB,GAAuBW,KAAK1B,QAAL0B,CAAcY,YADrCZ,GAGJA,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,aAAAA,MAAAA,CAAgChB,CAAhCgB,CAAAA,EAA8CX,CAA9CW,EAAuDF,CAAvDE,CAHIA;AAGmDF;AAzBrC,KAAA,EAyBqCA;AAAAA,MAAAA,GAAAA,EAAAA,SAAAA;AAAAA,MAAAA,KAAAA,EAAAA,iBAAAA;AAUL,YAA9Ce,CAAAA,GAA8C,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAAA,YAAhCxB,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAUlD,eATI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKJ4B,KAAKG,SAALH,CAAeW,uBAAfX,CAAuCa,CAAvCb,CALI5B,EAOJ4B,KAAKG,SAALH,CAAec,eAAfd,CAA+BX,CAA/BW,CAPI5B,EASC0B,CAAAA,GAGEE,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,aAAAA,MAAAA,CAAgCa,CAAhCb,EAAAA,OAAAA,CAAAA,EAA6CX,CAA7CW,EAAsDF,CAAtDE,CAHFF,GACME,KAAKC,aAALD,CAAmBA,KAAKe,OAAxBf,EAAiCa,CAAjCb,EAAuCX,CAAvCW,CADX;AACkDX;AArBKS,KAzBrC,EA8CgCT;AAAAA,MAAAA,GAAAA,EAAAA,QAAAA;AAAAA,MAAAA,KAAAA,EAAAA,iBAAAA;AAYf,YAAhCA,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAQnC,eAPI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKJ4B,KAAKG,SAALH,CAAec,eAAfd,CAA+BX,CAA/BW,CALI5B,EAOC0B,CAAAA,GAGEE,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,WAAAA,EAAgCX,CAAhCW,EAAyCF,CAAzCE,CAHFF,GACME,KAAKC,aAALD,CAAmBA,KAAKgB,MAAxBhB,EAAgCX,CAAhCW,CADX;AAC2CX;AArBOA,KA9ChC,CAAA,CAAA,EAmEyBA,CAnEzB;AAmEyBA,GArE9BqB,CAAcd,CAAdc,CHJrB7C;AAAAA,MIIqBoD,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAEjB,aAAA,CAAA,CAAY3C,CAAZ,EAAYA;AAAU,UAAA,CAAA;AAAA,aAAA,CAAA,GAAA,IAAA,EAAA,CAAA,CAAA,EAClBuB,CAAAA,GAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAMvB,CAANuB,CAAAA,CADkB,EAElBzB,CAAAA,GAAQyB,CAAAA,CAAKzB,KAFK,EAAA,CAAA;AAAA;;AAAA,WAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,WAAA;AAAA,MAAA,KAAA,EAAA,iBAAA;AAW4C,YAAxDc,CAAAA,GAAwD,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA1C,QAA0C;AAAA,YAAhCG,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAO9D,eALI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKC0B,CAAAA,IAILE,KAAKG,SAALH,CAAemB,mBAAfnB,CAAmCd,CAAnCc,GAEOA,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,aAAAA,MAAAA,CAAgCd,CAAhCc,EAAAA,SAAAA,CAAAA,EAAsDX,CAAtDW,EAA+DF,CAA/DE,CANFF,IACME,KAAKC,aAALD,CAAmBA,KAAKkB,SAAxBlB,EAAmCd,CAAnCc,EAAgDX,CAAhDW,CADX;AAC2DX;AAnBzC,KAAA,CAAA,CAAA,EAmByCA,CAnBzC;AAmByCA,GArB9C4B,CAAcrB,CAAdqB,CJJrBpD;AAAAA,MIImC+B,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CJJnC/B;AAAAA,MIImC+B,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CJJnC/B;AAAAA,MIImC+B,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CJJnC/B;AAAAA,MIImC+B,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CJJnC/B;AAAAA,MIImC+B,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CJJnC/B;AAAAA,MIImC+B,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CJJnC/B;AAAAA,MKIqBuD,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAEjB,aAAA,CAAA,CAAY9C,CAAZ,EAAYA;AAAU,UAAA,CAAA;AAAA,aAAA,CAAA,GAAA,IAAA,EAAA,CAAA,CAAA,EAClBuB,CAAAA,GAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAMvB,CAANuB,CAAAA,CADkB,EAElBzB,CAAAA,GAAQyB,CAAAA,CAAKzB,KAFK,EAAA,CAAA;AAAA;;AAAA,WAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,WAAA;AAAA,MAAA,KAAA,EAAA,eAYZiD,CAZY,EAYZA;AAAiD,YAAhChC,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAOvD,eALI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKA0B,CAAAA,IAGJE,KAAKG,SAALH,CAAeI,eAAfJ,CAA+BqB,CAA/BrB,GAEAA,KAAKG,SAALH,CAAec,eAAfd,CAA+BX,CAA/BW,CAFAA,EAIAqB,CAAAA,GAAkBrB,KAAK7B,OAAL6B,CAAalB,OAAbkB,CAAqBM,OAArBN,CAA6BqB,CAA7BrB,CAJlBA,EAMOA,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,gBAAAA,MAAAA,CAAmCqB,CAAnCrB,EAAAA,SAAAA,CAAAA,EAA6DX,CAA7DW,EAAsEF,CAAtEE,CATHF,IACOE,KAAKC,aAALD,CAAmBA,KAAKkB,SAAxBlB,EAAmCqB,CAAnCrB,EAAoDX,CAApDW,CADX;AAC+DX;AApB7C,KAAA,EAoB6CA;AAAAA,MAAAA,GAAAA,EAAAA,gBAAAA;AAAAA,MAAAA,KAAAA,EAAAA,eAkBpDgC,CAlBoDhC,EAkBpDgC;AAAiD,YAAhChC,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAO5D,eALI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKA0B,CAAAA,IAGJE,KAAKG,SAALH,CAAeI,eAAfJ,CAA+BqB,CAA/BrB,GAEAqB,CAAAA,GAAkBrB,KAAK7B,OAAL6B,CAAalB,OAAbkB,CAAqBM,OAArBN,CAA6BqB,CAA7BrB,CAFlBA,EAIOA,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,gBAAAA,MAAAA,CAAmCqB,CAAnCrB,EAAAA,SAAAA,CAAAA,EAA6DX,CAA7DW,EAAsEF,CAAtEE,CAPHF,IACOE,KAAKC,aAALD,CAAmBA,KAAKsB,cAAxBtB,EAAwCqB,CAAxCrB,EAAyDX,CAAzDW,CADX;AACoEX;AA1BLA,KApB7C,EA8CkDA;AAAAA,MAAAA,GAAAA,EAAAA,YAAAA;AAAAA,MAAAA,KAAAA,EAAAA,YAAAA;AAAAA,YAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,CASvDgC,CATuDhC,EAStCG,CATsCH,EAStCG;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA,GAAAA,IAAAA;AAAAA,cAAAA,CAAAA,GAAAA,SAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,UAAAA,CAAAA,EAAAA;AAAAA;AAAAA,sBAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,yBAAWH,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAU,EAAVA,EAAcS,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAdT,EACrCkC,CAAAA,GAAAA,CAAW,CAD0BlC,EAErCmC,CAAAA,GAAAA,CAAY,CAFyBnC,EAGrCoC,CAAAA,GAAQC,IAAAA,CAAKC,GAALD,KAAa,GAHgBrC,EAKnCuC,CAAAA,GAAAA,YAAAA;AAAAA,wBAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAe,SAAA,CAAA,GAAA;AAAA,0BAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAAA,6BAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA;AAAA,kCAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AAAA,iCAAA,CAAA;AAAA,qCAAA,CAAA,CAAA,IAAA,GAAA,CAAA,EAEbvC,CAAAA,GAAUtB,MAAAA,CAAO8D,MAAP9D,CAAc;AACpByB,gCAAAA,SAAAA,EAAAA,CADoB;AAEpBC,gCAAAA,iBAAAA,EAAmBgC,CAFC;AAGpBK,gCAAAA,OAAAA,EAAS;AAHW,+BAAd/D,EAOPsB,CAPOtB,CAFG,EAAA,CAAA,CAAA,IAAA,GAAA,CAAA,EAWMiE,CAAAA,CAAKd,SAALc,CAAeX,CAAfW,EAAgC3C,CAAhC2C,CAXN;;AAAA,iCAAA,CAAA;AAAA,qCAWTD,CAAAA,GAXS,CAAA,CAAA,IAWTA,EAXS,CAAA,GAaSA,CAAAA,CAAOG,IAAPH,CAAY,UAACI,CAAD,EAAIC,CAAJ,EAAIA;AAAJ,uCAAUA,CAAAA,CAAEC,eAAFD,GAAoBD,CAAAA,CAAEE,eAAhC;AAAgCA,+BAA5CN,CAFlBA,EAXS,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAWTA,EAEGE,CAAAA,GAbM,CAAA,CAAA,CAAA,CAWTF,EAIEO,CAAAA,GAAYP,CAAAA,CAAOQ,MAAPR,CAAc,UAACS,CAAD,EAAQC,CAAR,EAAQA;AAKpC,uCAAA,CAJkBV,CAAAA,CAAOW,KAAPX,CAAa,CAAbA,EAAgBU,CAAhBV,EAAuBY,IAAvBZ,CAA4B,UAAA,CAAA,EAAA;AAAU,yCACpDa,IAAAA,CAAKC,SAALD,CAAeE,CAAfF,KAA8BA,IAAAA,CAAKC,SAALD,CAAeJ,CAAfI,CADsB;AACPJ,iCAD/BT,CAIlB,KAHiDS,CAK5ChB,CAL4CgB,IAO1CA,CAAAA,CAAMH,eAANG,GAAwBhB,CAJ/B,CAAA;AAI+BA,+BATjBO,CAJdA,EAgBAE,CAAAA,KAAaT,CAAAA,GAAYS,CAAAA,CAAYI,eAArCJ,CAhBAF,EAXS,CAAA,CAAA,MAAA,CAAA,QAAA,EA4BNO,CA5BM,CAAA;;AAAA,iCAAA,EAAA;AAAA,qCAAA,CAAA,CAAA,IAAA,GAAA,EAAA,EAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,MAAA,CAAA,QAAA,EA+BNS,OAAAA,CAAQC,MAARD,CAAAA,CAAAA,CAAAA,EAAAA,CA/BM,CAAA;;AAAA,iCAAA,EAAA;AAAA,iCAAA,KAAA;AAAA,qCAAA,CAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,uBAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAAA,qBAAfnB,CAAAA,CAAAA;AAAe,2BAAA,YAAA;AAAA,6BAAA,CAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,qBAAA;AAAA,mBAAfA,EALmCvC,EAwCnC4D,CAAAA,GAAe,aAAA;AACb1B,oBAAAA,CAAAA,IACA2B,aAAAA,CAAc3B,CAAd2B,CADA3B,EAGJA,CAAAA,GAAW4B,WAAAA,CAAY,YAAA;AACnBvB,sBAAAA,CAAAA,GAAewB,IAAfxB,CAAoB,UAAA,CAAA,EAAA;AAAM,+BAAIG,CAAAA,CAAOsB,OAAPtB,CAAe,UAAA,CAAA,EAAA;AACzCjC,0BAAAA,CAAAA,CAAS,IAATA,EAAe0C,CAAf1C,CAAAA;AAAe0C,yBADWT,CAAJ;AACPS,uBADnBZ,EAEI0B,KAFJ1B,CAEU,UAAA,CAAA,EAAA;AAAG,+BAAI9B,CAAAA,CAASyD,CAATzD,CAAJ;AAAayD,uBAF1B3B;AAE0B2B,qBAHnBJ,EAIR,GAJQA,CAHP5B;AAOD,mBAhDkClC,EAgDlC,CAAA,CAAA,IAAA,GAAA,CAhDkCA,EAmDnCuC,CAAAA,EAnDwBpC;;AAmDxBoC,qBAAAA,CAAAA;AAAAA,yBACNqB,CAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,EAEO;AACHO,oBAAAA,KAAAA,EAAOP,CAAAA,EADJ;AAEHQ,oBAAAA,IAAAA,EAAM,gBAAA;AACGlC,sBAAAA,CAAAA,KAGL2B,aAAAA,CAAc3B,CAAd2B,CAAAA,EACA3B,CAAAA,GAAAA,CAAW,CAJNA,CAAAA;AAIM;AAPZ,mBAFP0B,CADMrB;;AAUa,qBAAA,EAAA;AAAA,qBAAA,KAAA;AAAA,yBAAA,CAAA,CAAA,IAAA,EAAA;AA7DWpC;AAAAA;AA6DX,WA7DWA,EA6DX,CA7DWA,CAAAA;AA6DX,SAtEiDH,CAAAA,CAAAA;AAsEjD,eAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,SAAA;AAAA,OAtEiDA;AAAAA,KA9ClD,CAAA,CAAA,EAoHC,CApHD;AAoHC,GAtHN+B,CAAiBxB,CAAjBwB,CLJrBvD;AAAAA,MMIqB6F,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAEjB,aAAA,CAAA,CAAYpF,CAAZ,EAAYA;AAAU,UAAA,CAAA;AAAA,aAAA,CAAA,GAAA,IAAA,EAAA,CAAA,CAAA,EAClBuB,CAAAA,GAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAMvB,CAANuB,CAAAA,CADkB,EAElBzB,CAAAA,GAAQyB,CAAAA,CAAKzB,KAFK,EAAA,CAAA;AAAA;;AAAA,WAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,WAAA;AAAA,MAAA,KAAA,EAAA,iBAAA;AAW2C,YAAvDgB,CAAAA,GAAuD,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAAA,YAAhCC,CAAAA,GAAgC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,YAAlBS,CAAAA,GAAkB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AAO7D,eALI1B,CAAAA,CAAM2B,UAAN3B,CAAiBiB,CAAjBjB,MACA0B,CAAAA,GAAWT,CAAXS,EACAT,CAAAA,GAAU,EAFVjB,GAKC0B,CAAAA,IAILE,KAAKG,SAALH,CAAe2D,qBAAf3D,CAAqCZ,CAArCY,GAEOA,KAAKO,SAALP,CAAeE,GAAfF,CAAAA,mBAAAA,MAAAA,CAAsCZ,CAAtCY,EAAAA,SAAAA,CAAAA,EAA8DX,CAA9DW,EAAuEF,CAAvEE,CANFF,IACME,KAAKC,aAALD,CAAmBA,KAAKkB,SAAxBlB,EAAmCZ,CAAnCY,EAAkDX,CAAlDW,CADX;AAC6DX;AAnB3C,KAAA,CAAA,CAAA,EAmB2CA,CAnB3C;AAmB2CA,GArBhDqE,CAAoB9D,CAApB8D,CNJrB7F;AAAAA,MOKqBgG,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAEjB,aAAA,CAAA,CAAYvF,CAAZ,EAAYA;AAAU,UAAA,CAAA;AAAA,aAAA,CAAA,GAAA,IAAA,EAAA,CAAA,CAAA,EAClBuB,CAAAA,GAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAMvB,CAANuB,CAAAA,CADkB,EAElBzB,CAAAA,GAAQyB,CAAAA,CAAKzB,KAFK,EAGlBwF,CAAAA,GAAU/D,CAAAA,CAAKvB,QAALuB,CAAc+D,OAHN,EAAA,CAAA;AAAA;;AAAA,WAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,iBAAA;AAAA,MAAA,KAAA,EAAA,eAMNhD,CANM,EAMNA;AACZZ,aAAK1B,QAAL0B,CAAc8D,eAAd9D,CAA8BY,CAA9BZ;AAA8BY;AAPZ,KAAA,EAOYA;AAAAA,MAAAA,GAAAA,EAAAA,iBAAAA;AAAAA,MAAAA,KAAAA,EAAAA,YAAAA;AAAAA,YAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,GAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA;AAAAA,cAAAA,CAAAA,GAAAA,SAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,UAAAA,CAAAA,EAAAA;AAAAA;AAAAA,sBAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,yBAGZ9B,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAUkB,KAAK7B,OAAL6B,CAAa+D,cAAb/D,CAA4BgE,GAAtClF,EAA2CmF,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAY,KAAvDnF,EAA8DQ,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAQ,EAAtER,EAA0EoF,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAS,CAAnFpF,EAAsFgB,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAtFhB,EAEdV,CAAAA,CAAM2B,UAAN3B,CAAiB8F,CAAjB9F,MACA0B,CAAAA,GAAWoE,CADX9F,CAFcU,EAMdV,CAAAA,CAAM2B,UAAN3B,CAAiBkB,CAAjBlB,MACA0B,CAAAA,GAAWR,CAAXQ,EACAR,CAAAA,GAAQ,EAFRlB,CANcU,EAWdV,CAAAA,CAAM2B,UAAN3B,CAAiB6F,CAAjB7F,MACA0B,CAAAA,GAAWmE,CAAXnE,EACAmE,CAAAA,GAAY,KAFZ7F,CAXcU,EAgBdV,CAAAA,CAAM2B,UAAN3B,CAAiBU,CAAjBV,MACA0B,CAAAA,GAAWhB,CAAXgB,EACAhB,CAAAA,GAAUkB,KAAK7B,OAAL6B,CAAa+D,cAAb/D,CAA4BgE,GAFtC5F,CAhBcU,EAqBZO,CAAAA,GAAU;AACZC,oBAAAA,KAAAA,EAAAA,CADY;AAEZ6E,oBAAAA,yBAAAA,EAAAA,CAA2B;AAFf,mBArBErF,EAyBA,SAAdmF,CAAc,GACd5E,CAAAA,CAAQ+E,OAAR/E,GAAQ+E,CAAU,CADJ,GAEO,WAAdH,CAAc,KACrB5E,CAAAA,CAAQgF,SAARhF,GAAQgF,CAAY,CADC,CA3BPvF,EA4BM,CAAA,CAAA,MAAA,CAAA,QAAA,EAEjB8E,CAAAA,CAAQpD,eAARoD,CAAwB9E,CAAxB8E,EAAiCvE,CAAjCuE,EAA0C9D,CAA1C8D,CAFiB,CA/BMhD;;AAiCmBd,qBAAAA,EAAAA;AAAAA,qBAAAA,KAAAA;AAAAA,yBAAAA,CAAAA,CAAAA,IAAAA,EAAAA;AAjCnBc;AAAAA;AAiCmBd,WAjCnBc,EAiCmBd,CAjCnBc,EAiCmBd,IAjCnBc,CAAAA;AAiCmBd,SAjCnBc,CAAAA,CAAAA;AAiCmBd,eAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;AAAAA,SAAAA;AAAAA,OAjCnBc;AAAAA,KAPZ,CAAA,CAAA,EAwC+Bd,CAxC/B;AAwC+BA,GA1CpC+D,CAAsBjE,CAAtBiE,CPLrBhG;;AOK2C+B,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAAAA,YAAAA;AAAAA,WAAAA,CAAAA;AAAAA,GAAAA;;AAAAA,MGQtBiF,CAAAA,GAAAA,YAAAA;AAEjB,aAAA,CAAA,GAAA;AAA6B,UAAjB1G,CAAAA,GAAiB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA;AACzB,UADyB,CAAA,GAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CACpBA,CAAL,EACI,MAAM,IAAIM,KAAJ,CAAU,8BAAV,CAAN;AAEJuB,WAAK7B,OAAL6B,GAAe7B,CAAf6B,EACAA,KAAK5B,KAAL4B,GAAqB7B,CAAAA,CAAQC,KAD7B4B,EAEAA,KAAK4D,OAAL5D,GAAe,IAAIL,CAAJ,CAAYK,IAAZ,CAFfA,EAGAA,KAAK+E,KAAL/E,GAAa,IAAIU,CAAJ,CAAUV,IAAV,CAHbA,EAIAA,KAAKgF,KAALhF,GAAa,IAAIiB,CAAJ,CAAUjB,IAAV,CAJbA,EAKAA,KAAKiF,QAALjF,GAAgB,IAAIoB,CAAJ,CAAapB,IAAb,CALhBA,EAMAA,KAAKkF,WAALlF,GAAmB,IAAI0D,CAAJ,CAAgB1D,IAAhB,CANnBA,EAOAA,KAAKmF,SAALnF,GAAiB,IAAIO,CAAJ,CAAcP,IAAd,CAPjBA,EAQAA,KAAKG,SAALH,GAAiB,IAAIG,CAAJ,CAAcH,IAAd,CARjBA,EASAA,KAAKC,aAALD,GAAqB,IAAI8E,CAAAA,CAAAA,CAAJ,CAAkB9E,IAAlB,CATrBA,EAWAA,KAAKY,YAALZ,GAAKY,KAAewE,CAXpBpF;AAWoBoF;;AAAAA,WAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,GAAAA,EAAAA,iBAAAA;AAAAA,MAAAA,KAAAA,EAAAA,eAGRC,CAHQD,EAGRC;AACZrF,aAAKY,YAALZ,GAAoBqF,CAApBrF;AAAoBqF;AAJAD,KAAAA,EAIAC;AAAAA,MAAAA,GAAAA,EAAAA,iBAAAA;AAAAA,MAAAA,KAAAA,EAAAA,eAGRhG,CAHQgG,EAGRhG;AACRA,QAAAA,CAAAA,CAAQuB,YAARvB,IACeA,CAAAA,CAAQuB,YADvBvB;AAGJ,YAAMiG,CAAAA,GAAgB,IAAIzB,CAAJ,CAAkB7D,IAAlB,CAAtB;AAEA,eADAsF,CAAAA,CAAcxB,eAAdwB,CAA8BjG,CAAAA,CAAQuB,YAAtC0E,GACO;AACHC,UAAAA,QAAAA,EAAU,QADP;AAEHC,UAAAA,UAAAA,EAAY;AACRC,YAAAA,GAAAA,EAAK;AACDC,cAAAA,sBAAAA,EAAwBJ,CAAAA,CAAc9E;AADrC;AADG;AAFT,SAAP;AAIkDA;AAb9B6E,KAJAD,EAiB8B5E;AAAAA,MAAAA,GAAAA,EAAAA,UAAAA;AAAAA,MAAAA,KAAAA,EAAAA,eAM7ChC,CAN6CgC,EAMvCV,CANuCU,EAMvCV;AAEX,eAAKA,CAAAA,IAGLE,KAAKG,SAALH,CAAe4F,gBAAf5F,CAAgCxB,CAAhCwB,GAEoB,YAAA,OAATxB,CAAS,GACTwB,KAAKmF,SAALnF,CAAeE,GAAfF,CAAmBxB,CAAnBwB,EAAyB,EAAzBA,EAA6BF,CAA7BE,CADS,GAEO,aAAhBtB,CAAAA,GAAOF,CAAPE,CAAgB,GAChBsB,KAAKmF,SAALnF,CAAeE,GAAfF,CAAmBxB,CAAAA,CAAKI,IAALJ,CAAUqH,KAAVrH,CAAgBsH,IAAnC9F,EAAyC,EAAzCA,EAA6CF,CAA7CE,CADgB,GAC6BF,KADjD,CAPFA,IACME,KAAKC,aAALD,CAAmBA,KAAK2F,QAAxB3F,EAAkCxB,CAAlCwB,CADX;AAC6CxB;AATKgC,KAjB9B4E,CAAAA,CAAAA,EA0ByB5G,CA1BzB4G;AA0ByB5G,GA3ChCqG,EHRsBjF;AGmDUpB,CX0BrD,C,EW1BqDA,O","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","let tronWeb;\nlet utils;\n\nexport default class Validator {\n\n    constructor(tronGrid) {\n        tronWeb = tronGrid.tronWeb;\n        utils = tronWeb.utils;\n    }\n\n    validatePageData(data) {\n        if (!data) {\n            throw new Error('Invalid data provided.');\n        } else if (typeof data !== 'string' && typeof data !== 'object'){\n            throw new Error('Invalid data format provided.');\n        } else if (typeof data === 'string' && data.indexOf('fingerprint') === -1) {\n            throw new Error('It\\'s the last page or missed fingerprint in the links.');\n        } else if (typeof data === 'object' && (!data.meta || !data.meta.fingerprint)) {\n            throw new Error('It\\'s the last page or missed fingerprint in the json.');\n        }\n    }\n\n    validateAddress(address) {\n        if (!tronWeb.isAddress(address))\n            throw new Error('Invalid address provided.');\n    }\n\n    validateAssetIdentifier(identifier) {\n        if (!identifier || /[^a-zA-Z0-9_]+/.test(identifier))\n            throw new Error('Invalid identifier provided.');\n    }\n\n    validateBlockNumber(blockNumber) {\n        if (blockNumber === 'latest') {\n            return;\n        }\n        if (!blockNumber || /[^0-9]/.test(blockNumber.toString())) {\n            throw new Error('Invalid block number provided.');\n        }\n    }\n\n    validateTransactionId(transactionID) {\n        if (!/^[a-z0-9]{64}/.test(transactionID)) {\n            throw new Error('Invalid transaction id provided.');\n        }\n    }\n\n    validateOptions(options) {\n        if (options.limit) {\n            if (!utils.isInteger(options.limit) || options.limit < 0 || options.limit > 200) {\n                throw new Error('Limit should be a number between 0 and 200.');\n            }\n        }\n        if (options.blockNumber && !options.eventName) {\n            throw new Error('Usage of block number filtering requires an event name.');\n        }\n        if (options.minBlockTimestamp && !utils.isInteger(options.minBlockTimestamp)) {\n            throw new Error('Invalid minBlockTimestamp provided.');\n        }\n        if (options.maxBlockTimestamp && (!utils.isInteger(options.maxBlockTimestamp) && options.maxBlockTimestamp !== 'now')) {\n            throw new Error('Invalid maxBlockTimestamp provided.');\n        }\n    }\n\n};\n","import Base from './Base';\n\nlet utils;\n\nexport default class Account extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1/accounts/:address\n     * @param address (hex or base58 format)\n     * @param options (filters: only_confirmed)\n     * @param callback\n     * @returns account\n     */\n    get(address, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.get, address, options);\n\n        this.validator.validateAddress(address);\n\n        if (address.length !== 34)\n            address = this.tronWeb.address.fromHex(address);\n\n        return this.APIClient.get(`v1/accounts/${address}`, options, callback);\n    }\n\n    /**\n     * @name TG3 API: /v1/accounts/:address/transactions\n     * @param address\n     * @param options\n     * @param callback\n     * @returns list of transactions\n     */\n    getTransactions(address, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactions, address, options);\n\n        this.validator.validateAddress(address);\n\n        if (address.length !== 34)\n            address = this.tronWeb.address.fromHex(address);\n\n        return this.APIClient.get(`v1/accounts/${address}/transactions`, options, callback);\n    }\n\n    /**\n     * @name TG3 API: /v1/accounts/:address/transactions/trc20\n     * @param address\n     * @param options\n     * @param callback\n     * @returns list of transactions\n     */\n    getTrc20Transactions(address, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTrc20Transactions, address, options);\n\n        this.validator.validateAddress(address);\n\n        if (address.length !== 34)\n            address = this.tronWeb.address.fromHex(address);\n\n        return this.APIClient.get(`v1/accounts/${address}/transactions/trc20`, options, callback);\n    }\n\n}\n","import Base from './Base';\n\nlet utils;\n\nexport default class Asset extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1/assets/:identifier\n     * @param identifier (asset ID, or issuer address)\n     * @param callback\n     * @returns list of assets\n     */\n    get(identifier = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        this.validator.validateAssetIdentifier(identifier);\n\n        if (!callback)\n            return this.injectPromise(this.get, identifier, options);\n\n        if (this.tronGrid.experimental)\n            options.experimental = this.tronGrid.experimental;\n\n        this.APIClient.get(`v1/assets/${identifier}`, options, callback);\n    }\n\n    /**\n     * @name TG API: /v1/assets/:name/list\n     * @param name of the asset\n     * @param options (limit, fingerprint, sort, filter)\n     * @param callback\n     * @returns list of assets\n     */\n    getList(name = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        this.validator.validateAssetIdentifier(name);\n\n        this.validator.validateOptions(options);\n\n        if (!callback)\n            return this.injectPromise(this.getList, name, options);\n\n        return this.APIClient.get(`v1/assets/${name}/list`, options, callback);\n    }\n\n    /**\n     * @name TG API: /v1/assets\n     * @param lists all the assets\n     * @param options (limit, fingerprint, sort, filter)\n     * @param callback\n     * @returns list of assets\n     */\n    getAll(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        this.validator.validateOptions(options);\n\n        if (!callback)\n            return this.injectPromise(this.getAll, options);\n\n        return this.APIClient.get(`v1/assets`, options, callback);\n    }\n}\n","import Base from './Base';\n\nlet utils;\n\nexport default class Block extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1/blocks/:blockNumber/events\n     * @param blockNumber\n     * @param callback\n     * @returns list of events\n     */\n    getEvents(blockNumber = 'latest', options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.getEvents, blockNumber, options);\n        }\n\n        this.validator.validateBlockNumber(blockNumber);\n\n        return this.APIClient.get(`v1/blocks/${blockNumber}/events`, options, callback);\n\n    }\n\n}\n","import Base from './Base';\n\nlet utils;\n\nexport default class Contract extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1//contracts/:contractAddress\n     * @param contractAddress\n     * @param options(onlyConfirmed, onlyUnconfirmed, eventName, blockNumber, fromTimestamp, size, previousFingerprint, sort)\n     * @param callback\n     * @returns list of events\n     */\n    getEvents(contractAddress, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getEvents, contractAddress, options);\n\n        this.validator.validateAddress(contractAddress);\n\n        this.validator.validateOptions(options);\n\n        contractAddress = this.tronWeb.address.fromHex(contractAddress);\n\n        return this.APIClient.get(`v1/contracts/${contractAddress}/events`, options, callback);\n    }\n\n    /**\n     * @name TG API: /v1//contracts/:contractAdderss/tokens\n     * @param contractAddress\n     * @param options(onlyConfirmed, onlyUnconfirmed, previousFingerprint, orderBy, limit)\n     * @param callback\n     * @returns list of trc20 tokens\n     */\n    getTrc20Tokens(contractAddress, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTrc20Tokens, contractAddress, options);\n\n        this.validator.validateAddress(contractAddress);\n\n        contractAddress = this.tronWeb.address.fromHex(contractAddress);\n\n        return this.APIClient.get(`v1/contracts/${contractAddress}/tokens`, options, callback);\n    }\n\n    async watchEvent(contractAddress, eventName, options = {}, callback = false) {\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const eventWatcher = async () => {\n            try {\n                options = Object.assign({\n                    eventName,\n                    minBlockTimestamp: since,\n                    orderBy: 'timestamp,desc',\n                    // TODO:\n                    // add filters => eventron is already equipped for them\n                    // filters: options.filters\n                }, options)\n\n                let events = await this.getEvents(contractAddress, options);\n\n                const [latestEvent] = events.sort((a, b) => b.block_timestamp - a.block_timestamp);\n\n                const newEvents = events.filter((event, index) => {\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate) return false;\n\n                    if (!lastBlock) return true;\n\n                    return event.block_timestamp > lastBlock;\n                });\n\n                if (latestEvent) lastBlock = latestEvent.block_timestamp;\n                return newEvents;\n\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                eventWatcher().then(events => events.forEach(event => {\n                    callback(null, event)\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await eventWatcher();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n\n}\n","import Base from './Base';\n\nlet utils;\n\nexport default class Transaction extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /transaction/:id\n     * @param transactionID\n     * @param callback\n     * @returns list of events\n     */\n    getEvents(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.getEvents, transactionID, options);\n        }\n\n        this.validator.validateTransactionId(transactionID);\n\n        return this.APIClient.get(`v1/transactions/${transactionID}/events`, options, callback);\n    }\n\n}\n","import Base from '../core/Base';\n\nlet utils;\nlet account;\n\nexport default class TronWebPlugin extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n        account = this.tronGrid.account;\n    }\n\n    setExperimental(experimental) {\n        this.tronGrid.setExperimental(experimental);\n    }\n\n    async getTransactions(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 20, offset = 0, callback = false) {\n\n        if (utils.isFunction(offset)) {\n            callback = offset;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 20;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        const options = {\n            limit,\n            only_data_and_fingerprint: true\n        }\n        if (direction === 'to') {\n            options.only_to = true\n        } else if (direction === 'from') {\n            options.only_from = true\n        }\n        return account.getTransactions(address, options, callback)\n    }\n\n}\n","\nexport default class APIClient {\n\n    constructor(tronGrid) {\n        this.tronGrid = tronGrid;\n        this.apiNode = tronGrid.tronWeb.eventServer;\n    }\n\n    _httpClient(path, options, callback, method = 'get') {\n\n        if (!options.experimental && this.tronGrid.experimental) {\n            options.experimental = this.tronGrid.experimental;\n        }\n\n        this.apiNode.request(path, options, method).then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n\n    }\n\n    get(path, options, callback) {\n        return this._httpClient(path, options, callback, 'get');\n    }\n\n    //TODO\n    post(...params) {}\n\n    //TODO\n    put(...params) {}\n\n    //TODO\n    del(...params) {}\n\n}\n","import TronGrid from '../../index';\nimport APIClient from '../apis/APIClient';\nimport validator from '../../utils/Validator';\nimport injectpromise from 'injectpromise';\n\nclass Base {\n\n    constructor(tronGrid) {\n        if (!tronGrid || !(tronGrid instanceof TronGrid))\n            throw new Error('Expected instance of TronGrid');\n\n        this.tronGrid = tronGrid;\n        this.tronWeb = tronGrid.tronWeb;\n        this.injectPromise = new injectpromise(this);\n        this.apiNode = this.tronWeb.eventServer;\n        this.utils = this.tronWeb.utils;\n        this.validator = new validator(tronGrid);\n        this.APIClient = new APIClient(tronGrid);\n    }\n\n}\n\nexport default Base\n","import Account from 'lib/core/Account';\nimport Asset from 'lib/core/Asset';\nimport Block from 'lib/core/Block';\nimport Contract from 'lib/core/Contract';\nimport Transaction from 'lib/core/Transaction';\nimport TronWebPlugin from 'lib/plugins/TronWebPlugin';\nimport APIClient from 'lib/apis/APIClient';\nimport validator from 'utils/Validator';\nimport injectpromise from 'injectpromise';\n\nlet utils;\nlet experimental;\n\nexport default class TronGrid {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.utils = utils = tronWeb.utils\n        this.account = new Account(this);\n        this.asset = new Asset(this);\n        this.block = new Block(this);\n        this.contract = new Contract(this);\n        this.transaction = new Transaction(this);\n        this.apiClient = new APIClient(this);\n        this.validator = new validator(this);\n        this.injectPromise = new injectpromise(this);\n\n        this.experimental = undefined;\n    }\n\n    setExperimental(code) {\n        this.experimental = code;\n    }\n\n    pluginInterface(options) {\n        if (options.experimental) {\n            experimental = options.experimental\n        }\n        const tronWebPlugin = new TronWebPlugin(this);\n        tronWebPlugin.setExperimental(options.experimental);\n        return {\n            requires: '^2.2.4',\n            components: {\n                trx: {\n                    getTransactionsRelated: tronWebPlugin.getTransactions\n                }\n            }\n        }\n    }\n\n    nextPage(data, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.nextPage, data);\n\n        this.validator.validatePageData(data);\n\n        if (typeof data === 'string') {\n            return this.apiClient.get(data, {}, callback);\n        } else if (typeof data === 'object') {\n            return this.apiClient.get(data.meta.links.next, {}, callback);\n        }\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}
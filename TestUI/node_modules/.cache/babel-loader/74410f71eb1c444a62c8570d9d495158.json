{"ast":null,"code":"var utils = {\n  address: '',\n  shortenAddress: function shortenAddress(address) {\n    return address.length === 34 ? address.substr(0, 4) + '...' + address.substr(30, 33) : address;\n  },\n  convertTimeStamp: function convertTimeStamp(time) {\n    if (time <= 0) return \"\";\n    var d = new Date(time);\n    return Utils.twoDigit(d.getDate()) + '/' + Utils.twoDigit(d.getMonth() + 1) + '/' + d.getFullYear() + ' ' + Utils.twoDigit(d.getHours()) + ':' + Utils.twoDigit(d.getMinutes()) + ':' + Utils.twoDigit(d.getSeconds());\n  },\n  convertTimeStampNoTime: function convertTimeStampNoTime(time) {\n    if (time <= 0) return \"\";\n    var d = new Date(time);\n    return Utils.twoDigit(d.getDate()) + '/' + Utils.twoDigit(d.getMonth() + 1) + '/' + d.getFullYear();\n  },\n  twoDigit: function twoDigit(myNumber) {\n    return (\"0\" + myNumber).slice(-2);\n  },\n  TwoDigitTime: function TwoDigitTime(time) {\n    if (time < 10) return \"0\" + time;else return time + \"\";\n  },\n  truncateStr: function truncateStr(str, n) {\n    if (!str) return '';\n    return str.length > n ? str.substr(0, n - 1) + '...' + str.substr(str.length - n, str.length - 1) : str;\n  },\n  numberWithCommas: function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  },\n  delay: function delay(timeout) {\n    return new Promise(function (resolve) {\n      setTimeout(resolve, timeout);\n    });\n  }\n};\nexport default utils;","map":{"version":3,"sources":["/Volumes/SSD/Active Projects/OptionBlitz/UI-2/TestUI/src/utils/index.js"],"names":["utils","address","shortenAddress","length","substr","convertTimeStamp","time","d","Date","Utils","twoDigit","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","convertTimeStampNoTime","myNumber","slice","TwoDigitTime","truncateStr","str","n","numberWithCommas","x","toString","replace","delay","timeout","Promise","resolve","setTimeout"],"mappings":"AACA,IAAMA,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAC,EADI;AAEZC,EAAAA,cAFY,0BAEGD,OAFH,EAEW;AACnB,WAAQA,OAAO,CAACE,MAAR,KAAmB,EAApB,GAA0BF,OAAO,CAACG,MAAR,CAAe,CAAf,EAAkB,CAAlB,IAAuB,KAAvB,GAA+BH,OAAO,CAACG,MAAR,CAAe,EAAf,EAAmB,EAAnB,CAAzD,GAAiFH,OAAxF;AACH,GAJW;AAKZI,EAAAA,gBALY,4BAKKC,IALL,EAKW;AACjB,QAAIA,IAAI,IAAI,CAAZ,EAAe,OAAO,EAAP;AACf,QAAIC,CAAC,GAAG,IAAIC,IAAJ,CAASF,IAAT,CAAR;AACA,WAAOG,KAAK,CAACC,QAAN,CAAeH,CAAC,CAACI,OAAF,EAAf,IAA8B,GAA9B,GAAoCF,KAAK,CAACC,QAAN,CAAeH,CAAC,CAACK,QAAF,KAAe,CAA9B,CAApC,GAAuE,GAAvE,GAA6EL,CAAC,CAACM,WAAF,EAA7E,GAA+F,GAA/F,GAAqGJ,KAAK,CAACC,QAAN,CAAeH,CAAC,CAACO,QAAF,EAAf,CAArG,GAAoI,GAApI,GAA0IL,KAAK,CAACC,QAAN,CAAeH,CAAC,CAACQ,UAAF,EAAf,CAA1I,GAA2K,GAA3K,GAAiLN,KAAK,CAACC,QAAN,CAAeH,CAAC,CAACS,UAAF,EAAf,CAAxL;AACH,GATS;AAUVC,EAAAA,sBAVU,kCAUaX,IAVb,EAUmB;AACzB,QAAIA,IAAI,IAAI,CAAZ,EAAe,OAAO,EAAP;AACf,QAAIC,CAAC,GAAG,IAAIC,IAAJ,CAASF,IAAT,CAAR;AACA,WAAOG,KAAK,CAACC,QAAN,CAAeH,CAAC,CAACI,OAAF,EAAf,IAA8B,GAA9B,GAAoCF,KAAK,CAACC,QAAN,CAAeH,CAAC,CAACK,QAAF,KAAe,CAA9B,CAApC,GAAuE,GAAvE,GAA6EL,CAAC,CAACM,WAAF,EAApF;AACH,GAdS;AAeVH,EAAAA,QAfU,oBAeDQ,QAfC,EAeS;AACf,WAAO,CAAC,MAAMA,QAAP,EAAiBC,KAAjB,CAAuB,CAAC,CAAxB,CAAP;AACH,GAjBS;AAkBVC,EAAAA,YAlBU,wBAkBGd,IAlBH,EAkBS;AACf,QAAIA,IAAI,GAAG,EAAX,EACI,OAAO,MAAMA,IAAb,CADJ,KAEK,OAAOA,IAAI,GAAG,EAAd;AACR,GAtBS;AAuBVe,EAAAA,WAvBU,uBAuBEC,GAvBF,EAuBOC,CAvBP,EAuBU;AAChB,QAAI,CAACD,GAAL,EAAU,OAAO,EAAP;AACV,WAAQA,GAAG,CAACnB,MAAJ,GAAaoB,CAAd,GAAmBD,GAAG,CAAClB,MAAJ,CAAW,CAAX,EAAcmB,CAAC,GAAG,CAAlB,IAAuB,KAAvB,GAA+BD,GAAG,CAAClB,MAAJ,CAAWkB,GAAG,CAACnB,MAAJ,GAAaoB,CAAxB,EAA2BD,GAAG,CAACnB,MAAJ,GAAa,CAAxC,CAAlD,GAA+FmB,GAAtG;AACH,GA1BS;AA2BVE,EAAAA,gBA3BU,4BA2BOC,CA3BP,EA2BU;AAChB,WAAOA,CAAC,CAACC,QAAF,GAAaC,OAAb,CAAqB,uBAArB,EAA8C,GAA9C,CAAP;AACH,GA7BS;AA8BVC,EAAAA,KA9BU,iBA8BJC,OA9BI,EA8BK;AACX,WAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC1BC,MAAAA,UAAU,CAACD,OAAD,EAAUF,OAAV,CAAV;AACH,KAFM,CAAP;AAGH;AAlCS,CAAd;AAsCA,eAAe7B,KAAf","sourcesContent":["\nconst utils = {\n  address:'',\n  shortenAddress(address){\n      return (address.length === 34) ? address.substr(0, 4) + '...' + address.substr(30, 33): address;\n  },\n  convertTimeStamp(time) {\n        if (time <= 0) return \"\";\n        var d = new Date(time);\n        return Utils.twoDigit(d.getDate()) + '/' + Utils.twoDigit(d.getMonth() + 1) + '/' + d.getFullYear() + ' ' + Utils.twoDigit(d.getHours()) + ':' + Utils.twoDigit(d.getMinutes()) + ':' + Utils.twoDigit(d.getSeconds());\n    },\n    convertTimeStampNoTime(time) {\n        if (time <= 0) return \"\";\n        var d = new Date(time);\n        return Utils.twoDigit(d.getDate()) + '/' + Utils.twoDigit(d.getMonth() + 1) + '/' + d.getFullYear() ;\n    },\n    twoDigit(myNumber) {\n        return (\"0\" + myNumber).slice(-2);\n    },\n    TwoDigitTime(time) {\n        if (time < 10)\n            return \"0\" + time;\n        else return time + \"\";\n    },\n    truncateStr(str, n) {\n        if (!str) return '';\n        return (str.length > n) ? str.substr(0, n - 1) + '...' + str.substr(str.length - n, str.length - 1) : str;\n    },\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    },\n    delay(timeout) {\n        return new Promise(resolve => {\n            setTimeout(resolve, timeout);\n        });\n    },\n  \n};\n  \nexport default utils;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Volumes/SSD/Active Projects/OptionBlitz/UI-2/TestUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Volumes/SSD/Active Projects/OptionBlitz/UI-2/TestUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport TronGrid from \"trongrid\";\nimport Cookies from 'universal-cookie';\nvar utils = {\n  TRC10_token_address: \"\",\n  contractAddress: \"TTJhhVEhhmxrbYxTZGt5JpSnMuh3aX2CnC\",\n  tronWeb: false,\n  tronGrid: false,\n  contract: false,\n  loading: true,\n  tronwebInstalled: false,\n  tronwebLogin: false,\n  address: \"-\",\n  balance: 0,\n  token: 0,\n  setContract: function setContract(_tronWeb) {\n    var _this = this;\n\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //console.log(\"Here\");\n              _this.tronwebReady = true; //this.tokenContract = await _tronWeb.contract().at(this.tokenAddress);\n\n              _this.tronGrid = new TronGrid(_tronWeb);\n              console.log('set Contract');\n              console.log('set TronGrid');\n              _this.address = _tronWeb.defaultAddress.base58;\n\n              _this.fetchAccountBalance();\n\n              _this.getAffiliate();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  fetchAccountBalance: function fetchAccountBalance() {\n    var _this2 = this;\n\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var balanceInSun, balanceInTRX;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return window.tronWeb.trx.getBalance();\n\n            case 3:\n              balanceInSun = _context2.sent;\n              //number\n              balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n              // const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n              _this2.balance = balanceInTRX;\n              console.log(\"TRX:\", balanceInTRX);\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0.message);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9]]);\n    }))();\n  },\n  getAffiliate: function getAffiliate() {\n    var _this3 = this;\n\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var href, ref, n, leng, cookies, cookieref;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              href = window.location.href;\n              ref = \"\"; //get ref=....\n\n              n = href.indexOf(\"ref=\");\n              leng = href.length;\n\n              if (n > 0) {\n                ref = href.substring(n + 4, n + 4 + 34);\n              } //console.log(ref);\n\n\n              cookies = new Cookies();\n\n              if (_this3.tronWeb.isAddress(ref)) {\n                cookies.set('TTMref', ref, {\n                  path: '/',\n                  expires: new Date(Date.now() + 31536000)\n                }); //console.log(cookies.get('TTMref')); \n\n                _this3.affiliateAddress = ref;\n              } else {\n                cookieref = cookies.get('TTMref');\n                if (_this3.tronWeb.isAddress(cookieref)) _this3.affiliateAddress = cookieref;else _this3.affiliateAddress = _this3.address;\n              }\n\n              console.log('ref: ', _this3.affiliateAddress);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  shortenAddress: function shortenAddress(address) {\n    return address.length === 34 ? address.substr(0, 4) + '...' + address.substr(30, 33) : address;\n  }\n};\nexport default utils;","map":{"version":3,"sources":["/Volumes/SSD/Active Projects/OptionBlitz/UI-2/TestUI/src/utils/index.js"],"names":["TronGrid","Cookies","utils","TRC10_token_address","contractAddress","tronWeb","tronGrid","contract","loading","tronwebInstalled","tronwebLogin","address","balance","token","setContract","_tronWeb","tronwebReady","console","log","defaultAddress","base58","fetchAccountBalance","getAffiliate","window","trx","getBalance","balanceInSun","balanceInTRX","fromSun","error","message","href","location","ref","n","indexOf","leng","length","substring","cookies","isAddress","set","path","expires","Date","now","affiliateAddress","cookieref","get","shortenAddress","substr"],"mappings":"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","sourcesContent":["import TronGrid from \"trongrid\";\nimport Cookies from 'universal-cookie';\n\nconst utils = {\n  TRC10_token_address:\"\",\n  contractAddress:\"TTJhhVEhhmxrbYxTZGt5JpSnMuh3aX2CnC\",\n  tronWeb: false,\n  tronGrid:false,\n  contract: false,\n  loading: true,\n  tronwebInstalled: false,\n  tronwebLogin: false,\n  address:\"-\",\n  balance:0,\n  token:0,\n\n  \n  async setContract(_tronWeb) {\n      //console.log(\"Here\");\n      this.tronwebReady = true;\n      //this.tokenContract = await _tronWeb.contract().at(this.tokenAddress);\n\n      this.tronGrid = new TronGrid(_tronWeb);\n      console.log('set Contract');\n      console.log('set TronGrid');\n      this.address = _tronWeb.defaultAddress.base58;\n      this.fetchAccountBalance();\n      this.getAffiliate();\n\n  },\n  \n  async fetchAccountBalance() {\n    try{\n        //const account = await window.tronWeb.trx.getAccount();\n        const balanceInSun = await window.tronWeb.trx.getBalance(); //number\n        const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n        // const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n        this.balance = balanceInTRX;\n        console.log(\"TRX:\",balanceInTRX);\n    } catch (e) {\n      console.error(e.message);\n    }\n  },\n  async getAffiliate()\n  {\n    var href = window.location.href;\n    var ref=\"\";\n    //get ref=....\n    var n = href.indexOf(\"ref=\");\n    var leng = href.length;\n    if (n>0)\n    {\n      ref = href.substring(n+4,n+4+34);\n    }\n\n    //console.log(ref);\n    const cookies = new Cookies();\n    if (this.tronWeb.isAddress(ref))\n    {\n      \n      cookies.set('TTMref', ref, { path: '/',expires: new Date(Date.now()+31536000) });\n      //console.log(cookies.get('TTMref')); \n\n      this.affiliateAddress = ref;\n\n    }\n    else\n    {\n      const cookieref = cookies.get('TTMref');\n      if (this.tronWeb.isAddress(cookieref)) \n        this.affiliateAddress = cookieref;\n      else\n        this.affiliateAddress = this.address;\n        \n    }\n    console.log('ref: ',this.affiliateAddress); \n  },\n  shortenAddress(address){\n      return (address.length === 34) ? address.substr(0, 4) + '...' + address.substr(30, 33): address;\n  },\n  \n  \n};\n  \nexport default utils;\n"]},"metadata":{},"sourceType":"module"}